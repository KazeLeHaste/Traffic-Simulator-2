{"version":3,"file":"tests.js","mappings":"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AACL;AACA;AACA;;;;;;;;;;;;;;;;ACd6C;;AAE7C;AACe;AACf,wBAAwB,qDAAc;AACtC;;;;;;;;;;;;;;;;ACLwC;;AAExC,iEAAe,yDAAS,UAAU,EAAC;;;;;;;;;;;;;;;;;ACFiC;AAC5B;;AAExC;AACA;AACA;AACA;AACA,iEAAe,uEAAuB,CAAC,qDAAS,CAAC,EAAC;;;;;;;;;;;;;;;;;ACPkB;AACpB;;AAEhD;AACA;AACA,iEAAe,uEAAuB,CAAC,yDAAa,CAAC,EAAC;;;;;;;;;;;;;;;ACLtD;AACA;AACe;AACf;AACA;;;;;;;;;;;;;;;;;;;;;ACJwC;AACC;AACN;;AAEnC;AACA;AACA;AACA;AACO;AACP,eAAe,yDAAS;AACxB;AACA;AACA;AACA,eAAe,uDAAO;AACtB,QAAQ,yDAAS;AACjB,oBAAoB,YAAY;AAChC,WAAW,0DAAU;AACrB;AACA;AACA;AACA;AACA,0CAA0C,0DAAU;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACO;;AAEP;AACA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACO;AACA;;AAEP;AACO;AACP;AACA;AACA;;AAEA;AACO;AACP;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACO;AACP;;AAEA;AACO,mBAAmB,eAAe;AAClC;AACP;;AAEA;AACO;;;;;;;;;;;;;;;AC1CP;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACL+C;AACD;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACO;AACP,MAAM,uDAAgB,kDAAkD,4DAAY;AACpF;AACA,4CAA4C,4DAAY;;;;;;;;;;;;;;;;ACZjB;;AAEvC;AACe;AACf;AACA;AACA,WAAW,+CAAQ;AACnB;AACA;;;;;;;;;;;;;;;;A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ACJ;AACF;AACJ;AACA;AACA;AACY;;AAEtD;AACA;AACA;AACA;AACA;AACoD;AACA;AACR;AACI;AACI;AACI;AAEN;AACJ;AACE;AACN;AACM;AACI;AACgB;AAChB;AACJ;AACI;AACN;AACM;;AAEpD;AACA;AACA;AACA;AACkD;AACN;AACM;AACA;AACJ;AACA;AACM;AACA;AACR;AACI;AACE;AACJ;AACE;AACJ;;AAE5C;AACA;AACA;AACA;AACkD;AACI;AACQ;AACJ;AACR;AACQ;AAEZ;AACQ;;AAEtD;AACA;AACA;AACA;AAE+C;AAED;AAGE;AAEU;AAEV;AACA;AAEF;AAEF;AAGQ;AACJ;AACF;AACA;AACJ;AACA;AACQ;AACF;AACA;AACE;AACA;AACA;AACI;AACJ;AACN;;AAE5C;AACA;AACA;AAC4C;AACA;;AAE5C;AACA;AACA;AACA;AAG8C;AACI;AACN;AAGA;AACM;AACA;AACA;AAEJ;AACA;AACc;AACJ;AAEN;AACR;AACM;AACF;AACA;;AAE9C;AACA;AACA;AACA;AAC8C;AACU;;;;;;;;;;;;;;;;ACvMxB;;AAEhC;AACA;AACA,iEAAe,qDAAK;AACpB;AACA,CAAC,CAAC,EAAC;;;;;;;;;;;;;;;;;;ACNwC;AACJ;AACiB;;AAExD;AACA;AACA;AACA;AACA,iEAAe,iEAAiB,IAAI,qDAAS,EAAE,uDAAW,CAAC,EAAC;;;;;;;;;;;;;;;;ACRxB;;AAEpC;AACA;AACA;AACe;AACf,SAAS,4CAAK;AACd;;;;;;;;;;;;;;;;;ACPwC;AACH;;AAErC;AACA;AACe;AACf;AACA;AACA,2BAA2B,yDAAS,SAAS,YAAY;AACzD;AACA,QAAQ,wDAAQ;AAChB;AACA,gBAAgB,gBAAgB;AAChC,WAAW,wDAAQ;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClB6B;;AAE7B;AACe;AACf;AACA,cAAc,oDAAI;AAClB,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACV+C;AACN;AACd;AACS;AACF;;AAElC;AACA,iEAAe,6DAAa;AAC5B;AACA,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AACvC;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACf0B;AACG;;AAE7B;AACA;AACe;AACf,aAAa,kDAAE;AACf,cAAc,oDAAI;AAClB;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACfuC;AACJ;;AAEnC;AACA;AACe;AACf,UAAU,yDAAS,GAAG;AACtB;AACA,WAAW,uDAAO;AAClB;AACA;;;;;;;;;;;;;;;;;;;ACV4C;AACX;AACP;AACG;;AAE7B;AACe;AACf;AACA;AACA;AACA,UAAU,2DAAW,cAAc,sDAAM;AACzC,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,eAAe,kDAAE;AACjB,IAAI,oDAAI;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;AC5B4B;;AAE5B;AACe;AACf;AACA;AACA;AACA,SAAS,mDAAG;AACZ;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACZ4C;AACX;AACP;AACG;;AAE7B;AACe;AACf;AACA;AACA;AACA,UAAU,2DAAW,cAAc,sDAAM;AACzC,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,eAAe,kDAAE;AACjB,IAAI,oDAAI;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5BgC;AACH;AACU;AACJ;AACS;;AAE5C;AACe;AACf,EAAE,oDAAI,CAAC,yDAAS;AAChB,eAAe,sDAAC;AAChB,IAAI,sDAAC;AACL;AACA,MAAM,2CAAI;AACV,aAAa,2DAAW,kBAAkB,sDAAC;AAC3C;AACA,GAAG;AACH,SAAS,sDAAC;AACV;;;;;;;;;;;;;;;ACjBA;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;AACe;;;;;;;;;;;;;;;ACDf;AACA,iEAAe;AACf;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;ACHuC;;AAEzC;AACA;AACA;AACe;AACf;AACA,2BAA2B,yDAAS,QAAQ,YAAY;AACxD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACf+C;AACN;AACR;AACN;AACS;AACC;AACR;;AAE7B;AACA,iEAAe,6DAAa;AAC5B;AACA,MAAM,0DAAU;AAChB,eAAe,sDAAM;AACrB;AACA,IAAI;AACJ,WAAW,mDAAG,CAAC,uDAAO;AACtB;AACA,cAAc,wDAAQ;AACtB;AACA;AACA,SAAS,oDAAI;AACb,CAAC,CAAC,EAAC;;;;;;;;;;;;;;;;;ACrBgC;AACF;;AAEjC;AACA;AACA,iEAAe,uDAAO,CAAC,kDAAM,IAAI,EAAC;;;;;;;;;;;;;;;;ACLL;;AAE7B;AACA;AACe;AACf,cAAc,oDAAI;AAClB;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACZ+C;AACD;AACd;;AAEhC;AACA;AACA;AACA;AACA,cAAc,6DAAa;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA,WAAW,4DAAY;AACvB;AACA;AACA,CAAC;;AAED,sBAAsB,sDAAC;AACvB,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;ACvBS;;AAEhC;AACA;AACA,iEAAe,qDAAK;AACpB;AACA,CAAC,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;ACNsC;AACN;AACC;AACP;AACG;AACF;;AAEpC;AACA,iEAAe,6DAAa;AAC5B,iBAAiB;AACjB;AACA,MAAM,0DAAU;AAChB,oCAAoC,0DAAU;AAC9C,WAAW,uDAAO;AAClB,IAAI;AACJ,eAAe,oDAAQ;AACvB,WAAW,uDAAO;AAClB;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,EAAC;;;;;;;;;;;;;;;;;ACzBwB;AACU;;AAErC;AACe;AACf,SAAS,mDAAG,MAAM,wDAAQ;AAC1B;;;;;;;;;;;;;;;;;ACNoC;AACF;;AAElC;AACA;AACe;AACf,SAAS,sDAAM;AACf;AACA,WAAW,uDAAO;AAClB;AACA;;;;;;;;;;;;;;;;;ACV6B;AACF;;AAE3B;AACe;AACf,0BAA0B,gDAAI;AAC9B;AACA,WAAW,mDAAG;AACd;AACA;;;;;;;;;;;;;;;ACTA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,cAAc;AAClC;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACpB8C;;AAE9C;AACA;AACA,iEAAe,4DAAY,GAAG,EAAC;;;;;;;;;;;;;;;;ACJe;;AAE9C;AACA,iEAAe,4DAAY,IAAI,EAAC;;;;;;;;;;;;;;;;;;ACHC;AACA;AACP;;AAE1B;AACe;AACf,SAAS,sDAAM,MAAM,sDAAM,CAAC,kDAAE;AAC9B;;;;;;;;;;;;;;;;ACPoC;;AAEpC;AACA;AACA;AACe;AACf,SAAS,4CAAK;AACd;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1ByC;AACP;;AAElC;AACA;AACA;AACe;AACf,SAAS,sDAAM;AACf;AACA;AACA,WAAW,0DAAU;AACrB;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA,kBAAkB;AAClB;AACA,UAAU,0DAAU;AACpB;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACrB4C;AACX;AACO;AACP;AACE;;AAEnC;AACA;AACA;AACA;AACe;AACf;AACA,SAAS,2DAAW,aAAa,sDAAM;AACvC,eAAe,sDAAM;AACrB;AACA,eAAe,uDAAO;AACtB,eAAe,yDAAS;AACxB;AACA;AACA,sBAAsB,WAAW;AACjC,eAAe,sDAAM;AACrB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BiC;;AAEjC;AACe;AACf,SAAS,sDAAM;AACf;;;;;;;;;;;;;;;;;ACL4C;AACf;;AAE7B;AACe;AACf;AACA,SAAS,2DAAW,qBAAqB,oDAAI;AAC7C;;;;;;;;;;;;;;;;;;ACP0B;AACkB;AACf;;AAE7B;AACe;AACf,cAAc,kDAAE;AAChB,eAAe,2DAAW,SAAS,oDAAI;AACvC;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACd0B;AACK;AACJ;;AAE3B;AACe;AACf;AACA,aAAa,kDAAE;AACf,SAAS,qDAAK,CAAC,mDAAG;AAClB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;ACvB0B;AACc;;AAExC;AACA;AACe;AACf,aAAa,kDAAE;AACf;AACA,sBAAsB,yDAAS;AAC/B;AACA;AACA,qDAAqD;AACrD;AACA;AACA;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACe;AACf;AACA;AACA;;;;;;;;;;;;;;;;;;ACNqC;AACL;AACD;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACe;AACf;AACA,aAAa,wDAAQ,GAAG,YAAY,sDAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,mBAAmB;AACnB;;AAEA;AACA;AACA,GAAG;AACH,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,0BAA0B,EAAE,iBAAiB;AAC7C;AACA;;AAEA;AACA,sBAAsB,8BAA8B;AACpD,yBAAyB;;AAEzB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,mCAAmC,sDAAC;AACpC;;AAEA;AACA,gDAAgD,iBAAiB;;AAEjE;AACA;;;;;;;;;;;;;;;;ACpGgC;;AAEhC;AACA;AACA,iEAAe,sDA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","sources":["webpack://trafic-simulator/./node_modules/underscore/modules/_baseCreate.js","webpack://trafic-simulator/./node_modules/underscore/modules/_baseIteratee.js","webpack://trafic-simulator/./node_modules/underscore/modules/_cb.js","webpack://trafic-simulator/./node_modules/underscore/modules/_chainResult.js","webpack://trafic-simulator/./node_modules/underscore/modules/_collectNonEnumProps.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createAssigner.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createEscaper.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createIndexFinder.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createPredicateIndexFinder.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createReduce.js","webpack://trafic-simulator/./node_modules/underscore/modules/_createSizePropertyCheck.js","webpack://trafic-simulator/./node_modules/underscore/modules/_deepGet.js","webpack://trafic-simulator/./node_modules/underscore/modules/_escapeMap.js","webpack://trafic-simulator/./node_modules/underscore/modules/_executeBound.js","webpack://trafic-simulator/./node_modules/underscore/modules/_flatten.js","webpack://trafic-simulator/./node_modules/underscore/modules/_getByteLength.js","webpack://trafic-simulator/./node_modules/underscore/modules/_getLength.js","webpack://trafic-simulator/./node_modules/underscore/modules/_group.js","webpack://trafic-simulator/./node_modules/underscore/modules/_has.js","webpack://trafic-simulator/./node_modules/underscore/modules/_hasObjectTag.js","webpack://trafic-simulator/./node_modules/underscore/modules/_isArrayLike.js","webpack://trafic-simulator/./node_modules/underscore/modules/_isBufferLike.js","webpack://trafic-simulator/./node_modules/underscore/modules/_keyInObj.js","webpack://trafic-simulator/./node_modules/underscore/modules/_methodFingerprint.js","webpack://trafic-simulator/./node_modules/underscore/modules/_optimizeCb.js","webpack://trafic-simulator/./node_modules/underscore/modules/_setup.js","webpack://trafic-simulator/./node_modules/underscore/modules/_shallowProperty.js","webpack://trafic-simulator/./node_modules/underscore/modules/_stringTagBug.js","webpack://trafic-simulator/./node_modules/underscore/modules/_tagTester.js","webpack://trafic-simulator/./node_modules/underscore/modules/_toBufferView.js","webpack://trafic-simulator/./node_modules/underscore/modules/_toPath.js","webpack://trafic-simulator/./node_modules/underscore/modules/_unescapeMap.js","webpack://trafic-simulator/./node_modules/underscore/modules/after.js","webpack://trafic-simulator/./node_modules/underscore/modules/allKeys.js","webpack://trafic-simulator/./node_modules/underscore/modules/before.js","webpack://trafic-simulator/./node_modules/underscore/modules/bind.js","webpack://trafic-simulator/./node_modules/underscore/modules/bindAll.js","webpack://trafic-simulator/./node_modules/underscore/modules/chain.js","webpack://trafic-simulator/./node_modules/underscore/modules/chunk.js","webpack://trafic-simulator/./node_modules/underscore/modules/clone.js","webpack://trafic-simulator/./node_modules/underscore/modules/compact.js","webpack://trafic-simulator/./node_modules/underscore/modules/compose.js","webpack://trafic-simulator/./node_modules/underscore/modules/constant.js","webpack://trafic-simulator/./node_modules/underscore/modules/contains.js","webpack://trafic-simulator/./node_modules/underscore/modules/countBy.js","webpack://trafic-simulator/./node_modules/underscore/modules/create.js","webpack://trafic-simulator/./node_modules/underscore/modules/debounce.js","webpack://trafic-simulator/./node_modules/underscore/modules/defaults.js","webpack://trafic-simulator/./node_modules/underscore/modules/defer.js","webpack://trafic-simulator/./node_modules/underscore/modules/delay.js","webpack://trafic-simulator/./node_modules/underscore/modules/difference.js","webpack://trafic-simulator/./node_modules/underscore/modules/each.js","webpack://trafic-simulator/./node_modules/underscore/modules/escape.js","webpack://trafic-simulator/./node_modules/underscore/modules/every.js","webpack://trafic-simulator/./node_modules/underscore/modules/extend.js","webpack://trafic-simulator/./node_modules/underscore/modules/extendOwn.js","webpack://trafic-simulator/./node_modules/underscore/modules/filter.js","webpack://trafic-simulator/./node_modules/underscore/modules/find.js","webpack://trafic-simulator/./node_modules/underscore/modules/findIndex.js","webpack://trafic-simulator/./node_modules/underscore/modules/findKey.js","webpack://trafic-simulator/./node_modules/underscore/modules/findLastIndex.js","webpack://trafic-simulator/./node_modules/underscore/modules/findWhere.js","webpack://trafic-simulator/./node_modules/underscore/modules/first.js","webpack://trafic-simulator/./node_modules/underscore/modules/flatten.js","webpack://trafic-simulator/./node_modules/underscore/modules/functions.js","webpack://trafic-simulator/./node_modules/underscore/modules/get.js","webpack://trafic-simulator/./node_modules/underscore/modules/groupBy.js","webpack://trafic-simulator/./node_modules/underscore/modules/has.js","webpack://trafic-simulator/./node_modules/underscore/modules/identity.js","webpack://trafic-simulator/./node_modules/underscore/modules/index-all.js","webpack://trafic-simulator/./node_modules/underscore/modules/index-default.js","webpack://trafic-simulator/./node_modules/underscore/modules/index.js","webpack://trafic-simulator/./node_modules/underscore/modules/indexBy.js","webpack://trafic-simulator/./node_modules/underscore/modules/indexOf.js","webpack://trafic-simulator/./node_modules/underscore/modules/initial.js","webpack://trafic-simulator/./node_modules/underscore/modules/intersection.js","webpack://trafic-simulator/./node_modules/underscore/modules/invert.js","webpack://trafic-simulator/./node_modules/underscore/modules/invoke.js","webpack://trafic-simulator/./node_modules/underscore/modules/isArguments.js","webpack://trafic-simulator/./node_modules/underscore/modules/isArray.js","webpack://trafic-simulator/./node_modules/underscore/modules/isArrayBuffer.js","webpack://trafic-simulator/./node_modules/underscore/modules/isBoolean.js","webpack://trafic-simulator/./node_modules/underscore/modules/isDataView.js","webpack://trafic-simulator/./node_modules/underscore/modules/isDate.js","webpack://trafic-simulator/./node_modules/underscore/modules/isElement.js","webpack://trafic-simulator/./node_modules/underscore/modules/isEmpty.js","webpack://trafic-simulator/./node_modules/underscore/modules/isEqual.js","webpack://trafic-simulator/./node_modules/underscore/modules/isError.js","webpack://trafic-simulator/./node_modules/underscore/modules/isFinite.js","webpack://trafic-simulator/./node_modules/underscore/modules/isFunction.js","webpack://trafic-simulator/./node_modules/underscore/modules/isMap.js","webpack://trafic-simulator/./node_modules/underscore/modules/isMatch.js","webpack://trafic-simulator/./node_modules/underscore/modules/isNaN.js","webpack://trafic-simulator/./node_modules/underscore/modules/isNull.js","webpack://trafic-simulator/./node_modules/underscore/modules/isNumber.js","webpack://trafic-simulator/./node_modules/underscore/modules/isObject.js","webpack://trafic-simulator/./node_modules/underscore/modules/isRegExp.js","webpack://trafic-simulator/./node_modules/underscore/modules/isSet.js","webpack://trafic-simulator/./node_modules/underscore/modules/isString.js","webpack://trafic-simulator/./node_modules/underscore/modules/isSymbol.js","webpack://trafic-simulator/./node_modules/underscore/modules/isTypedArray.js","webpack://trafic-simulator/./node_modules/underscore/modules/isUndefined.js","webpack://trafic-simulator/./node_modules/underscore/modules/isWeakMap.js","webpack://trafic-simulator/./node_modules/underscore/modules/isWeakSet.js","webpack://trafic-simulator/./node_modules/underscore/modules/iteratee.js","webpack://trafic-simulator/./node_modules/underscore/modules/keys.js","webpack://trafic-simulator/./node_modules/underscore/modules/last.js","webpack://trafic-simulator/./node_modules/underscore/modules/lastIndexOf.js","webpack://trafic-simulator/./node_modules/underscore/modules/map.js","webpack://trafic-simulator/./node_modules/underscore/modules/mapObject.js","webpack://trafic-simulator/./node_modules/underscore/modules/matcher.js","webpack://trafic-simulator/./node_modules/underscore/modules/max.js","webpack://trafic-simulator/./node_modules/underscore/modules/memoize.js","webpack://trafic-simulator/./node_modules/underscore/modules/min.js","webpack://trafic-simulator/./node_modules/underscore/modules/mixin.js","webpack://trafic-simulator/./node_modules/underscore/modules/negate.js","webpack://trafic-simulator/./node_modules/underscore/modules/noop.js","webpack://trafic-simulator/./node_modules/underscore/modules/now.js","webpack://trafic-simulator/./node_modules/underscore/modules/object.js","webpack://trafic-simulator/./node_modules/underscore/modules/omit.js","webpack://trafic-simulator/./node_modules/underscore/modules/once.js","webpack://trafic-simulator/./node_modules/underscore/modules/pairs.js","webpack://trafic-simulator/./node_modules/underscore/modules/partial.js","webpack://trafic-simulator/./node_modules/underscore/modules/partition.js","webpack://trafic-simulator/./node_modules/underscore/modules/pick.js","webpack://trafic-simulator/./node_modules/underscore/modules/pluck.js","webpack://trafic-simulator/./node_modules/underscore/modules/property.js","webpack://trafic-simulator/./node_modules/underscore/modules/propertyOf.js","webpack://trafic-simulator/./node_modules/underscore/modules/random.js","webpack://trafic-simulator/./node_modules/underscore/modules/range.js","webpack://trafic-simulator/./node_modules/underscore/modules/reduce.js","webpack://trafic-simulator/./node_modules/underscore/modules/reduceRight.js","webpack://trafic-simulator/./node_modules/underscore/modules/reject.js","webpack://trafic-simulator/./node_modules/underscore/modules/rest.js","webpack://trafic-simulator/./node_modules/underscore/modules/restArguments.js","webpack://trafic-simulator/./node_modules/underscore/modules/result.js","webpack://trafic-simulator/./node_modules/underscore/modules/sample.js","webpack://trafic-simulator/./node_modules/underscore/modules/shuffle.js","webpack://trafic-simulator/./node_modules/underscore/modules/size.js","webpack://trafic-simulator/./node_modules/underscore/modules/some.js","webpack://trafic-simulator/./node_modules/underscore/modules/sortBy.js","webpack://trafic-simulator/./node_modules/underscore/modules/sortedIndex.js","webpack://trafic-simulator/./node_modules/underscore/modules/tap.js","webpack://trafic-simulator/./node_modules/underscore/modules/template.js","webpack://trafic-simulator/./node_modules/underscore/modules/templateSettings.js","webpack://trafic-simulator/./node_modules/underscore/modules/throttle.js","webpack://trafic-simulator/./node_modules/underscore/modules/times.js","webpack://trafic-simulator/./node_modules/underscore/modules/toArray.js","webpack://trafic-simulator/./node_modules/underscore/modules/toPath.js","webpack://trafic-simulator/./node_modules/underscore/modules/underscore-array-methods.js","webpack://trafic-simulator/./node_modules/underscore/modules/underscore.js","webpack://trafic-simulator/./node_modules/underscore/modules/unescape.js","webpack://trafic-simulator/./node_modules/underscore/modules/union.js","webpack://trafic-simulator/./node_modules/underscore/modules/uniq.js","webpack://trafic-simulator/./node_modules/underscore/modules/uniqueId.js","webpack://trafic-simulator/./node_modules/underscore/modules/unzip.js","webpack://trafic-simulator/./node_modules/underscore/modules/values.js","webpack://trafic-simulator/./node_modules/underscore/modules/where.js","webpack://trafic-simulator/./node_modules/underscore/modules/without.js","webpack://trafic-simulator/./node_modules/underscore/modules/wrap.js","webpack://trafic-simulator/./node_modules/underscore/modules/zip.js","webpack://trafic-simulator/./src/geom/point.ts","webpack://trafic-simulator/./src/geom/rect.ts","webpack://trafic-simulator/./src/geom/segment.ts","webpack://trafic-simulator/./src/helpers.ts","webpack://trafic-simulator/./src/model/control-signals.ts","webpack://trafic-simulator/./src/model/intersection.ts","webpack://trafic-simulator/./src/model/kpi-collector.ts","webpack://trafic-simulator/./src/model/traffic-control/AbstractTrafficControlStrategy.ts","webpack://trafic-simulator/./src/model/traffic-control/AdaptiveTimingStrategy.ts","webpack://trafic-simulator/./src/model/traffic-control/AllRedFlashingStrategy.ts","webpack://trafic-simulator/./src/model/traffic-control/FixedTimingStrategy.ts","webpack://trafic-simulator/./src/model/traffic-control/TrafficControlStrategyManager.ts","webpack://trafic-simulator/./src/model/traffic-control/TrafficEnforcerStrategy.ts","webpack://trafic-simulator/./src/model/traffic-control/TrafficLightController.ts","webpack://trafic-simulator/./src/model/traffic-control/tests/AdaptiveTimingStrategyTest.ts","webpack://trafic-simulator/./src/model/traffic-control/tests/FixedTimingStrategyTest.ts","webpack://trafic-simulator/./src/model/traffic-control/tests/TestRunner.ts","webpack://trafic-simulator/./src/model/traffic-control/tests/TrafficEnforcerStrategyTest.ts","webpack://trafic-simulator/./src/model/traffic-control/tests/TrafficLightControllerTest.ts","webpack://trafic-simulator/./src/settings.ts","webpack://trafic-simulator/./src/test-runner.ts","webpack://trafic-simulator/webpack/bootstrap","webpack://trafic-simulator/webpack/runtime/define property getters","webpack://trafic-simulator/webpack/runtime/hasOwnProperty shorthand","webpack://trafic-simulator/webpack/runtime/make namespace object","webpack://trafic-simulator/webpack/runtime/node module decorator","webpack://trafic-simulator/webpack/before-startup","webpack://trafic-simulator/webpack/startup","webpack://trafic-simulator/webpack/after-startup"],"sourcesContent":["import isObject from './isObject.js';\nimport { nativeCreate } from './_setup.js';\n\n// Create a naked function reference for surrogate-prototype-swapping.\nfunction ctor() {\n  return function(){};\n}\n\n// An internal function for creating a new object that inherits from another.\nexport default function baseCreate(prototype) {\n  if (!isObject(prototype)) return {};\n  if (nativeCreate) return nativeCreate(prototype);\n  var Ctor = ctor();\n  Ctor.prototype = prototype;\n  var result = new Ctor;\n  Ctor.prototype = null;\n  return result;\n}\n","import identity from './identity.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isArray from './isArray.js';\nimport matcher from './matcher.js';\nimport property from './property.js';\nimport optimizeCb from './_optimizeCb.js';\n\n// An internal function to generate callbacks that can be applied to each\n// element in a collection, returning the desired result — either `_.identity`,\n// an arbitrary callback, a property matcher, or a property accessor.\nexport default function baseIteratee(value, context, argCount) {\n  if (value == null) return identity;\n  if (isFunction(value)) return optimizeCb(value, context, argCount);\n  if (isObject(value) && !isArray(value)) return matcher(value);\n  return property(value);\n}\n","import _ from './underscore.js';\nimport baseIteratee from './_baseIteratee.js';\nimport iteratee from './iteratee.js';\n\n// The function we call internally to generate a callback. It invokes\n// `_.iteratee` if overridden, otherwise `baseIteratee`.\nexport default function cb(value, context, argCount) {\n  if (_.iteratee !== iteratee) return _.iteratee(value, context);\n  return baseIteratee(value, context, argCount);\n}\n","import _ from './underscore.js';\n\n// Helper function to continue chaining intermediate results.\nexport default function chainResult(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n}\n","import { nonEnumerableProps, ObjProto } from './_setup.js';\nimport isFunction from './isFunction.js';\nimport has from './_has.js';\n\n// Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\nfunction emulatedSet(keys) {\n  var hash = {};\n  for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n  return {\n    contains: function(key) { return hash[key] === true; },\n    push: function(key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n}\n\n// Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\nexport default function collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = (isFunction(constructor) && constructor.prototype) || ObjProto;\n\n  // Constructor is a special case.\n  var prop = 'constructor';\n  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}\n","// An internal function for creating assigner functions.\nexport default function createAssigner(keysFunc, defaults) {\n  return function(obj) {\n    var length = arguments.length;\n    if (defaults) obj = Object(obj);\n    if (length < 2 || obj == null) return obj;\n    for (var index = 1; index < length; index++) {\n      var source = arguments[index],\n          keys = keysFunc(source),\n          l = keys.length;\n      for (var i = 0; i < l; i++) {\n        var key = keys[i];\n        if (!defaults || obj[key] === void 0) obj[key] = source[key];\n      }\n    }\n    return obj;\n  };\n}\n","import keys from './keys.js';\n\n// Internal helper to generate functions for escaping and unescaping strings\n// to/from HTML interpolation.\nexport default function createEscaper(map) {\n  var escaper = function(match) {\n    return map[match];\n  };\n  // Regexes for identifying a key that needs to be escaped.\n  var source = '(?:' + keys(map).join('|') + ')';\n  var testRegexp = RegExp(source);\n  var replaceRegexp = RegExp(source, 'g');\n  return function(string) {\n    string = string == null ? '' : '' + string;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n  };\n}\n","import getLength from './_getLength.js';\nimport { slice } from './_setup.js';\nimport isNaN from './isNaN.js';\n\n// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\nexport default function createIndexFinder(dir, predicateFind, sortedIndex) {\n  return function(array, item, idx) {\n    var i = 0, length = getLength(array);\n    if (typeof idx == 'number') {\n      if (dir > 0) {\n        i = idx >= 0 ? idx : Math.max(idx + length, i);\n      } else {\n        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n      }\n    } else if (sortedIndex && idx && length) {\n      idx = sortedIndex(array, item);\n      return array[idx] === item ? idx : -1;\n    }\n    if (item !== item) {\n      idx = predicateFind(slice.call(array, i, length), isNaN);\n      return idx >= 0 ? idx + i : -1;\n    }\n    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n      if (array[idx] === item) return idx;\n    }\n    return -1;\n  };\n}\n","import cb from './_cb.js';\nimport getLength from './_getLength.js';\n\n// Internal function to generate `_.findIndex` and `_.findLastIndex`.\nexport default function createPredicateIndexFinder(dir) {\n  return function(array, predicate, context) {\n    predicate = cb(predicate, context);\n    var length = getLength(array);\n    var index = dir > 0 ? 0 : length - 1;\n    for (; index >= 0 && index < length; index += dir) {\n      if (predicate(array[index], index, array)) return index;\n    }\n    return -1;\n  };\n}\n","import isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\nimport optimizeCb from './_optimizeCb.js';\n\n// Internal helper to create a reducing function, iterating left or right.\nexport default function createReduce(dir) {\n  // Wrap code that reassigns argument variables in a separate function than\n  // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n  var reducer = function(obj, iteratee, memo, initial) {\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        index = dir > 0 ? 0 : length - 1;\n    if (!initial) {\n      memo = obj[_keys ? _keys[index] : index];\n      index += dir;\n    }\n    for (; index >= 0 && index < length; index += dir) {\n      var currentKey = _keys ? _keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n    }\n    return memo;\n  };\n\n  return function(obj, iteratee, memo, context) {\n    var initial = arguments.length >= 3;\n    return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n  };\n}\n","import { MAX_ARRAY_INDEX } from './_setup.js';\n\n// Common internal logic for `isArrayLike` and `isBufferLike`.\nexport default function createSizePropertyCheck(getSizeProperty) {\n  return function(collection) {\n    var sizeProperty = getSizeProperty(collection);\n    return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n  }\n}\n","// Internal function to obtain a nested property in `obj` along `path`.\nexport default function deepGet(obj, path) {\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    if (obj == null) return void 0;\n    obj = obj[path[i]];\n  }\n  return length ? obj : void 0;\n}\n","// Internal list of HTML entities for escaping.\nexport default {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n","import baseCreate from './_baseCreate.js';\nimport isObject from './isObject.js';\n\n// Internal function to execute `sourceFunc` bound to `context` with optional\n// `args`. Determines whether to execute a function as a constructor or as a\n// normal function.\nexport default function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n  if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n  var self = baseCreate(sourceFunc.prototype);\n  var result = sourceFunc.apply(self, args);\n  if (isObject(result)) return result;\n  return self;\n}\n","import getLength from './_getLength.js';\nimport isArrayLike from './_isArrayLike.js';\nimport isArray from './isArray.js';\nimport isArguments from './isArguments.js';\n\n// Internal implementation of a recursive `flatten` function.\nexport default function flatten(input, depth, strict, output) {\n  output = output || [];\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n  var idx = output.length;\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0, len = value.length;\n        while (j < len) output[idx++] = value[j++];\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n  return output;\n}\n","import shallowProperty from './_shallowProperty.js';\n\n// Internal helper to obtain the `byteLength` property of an object.\nexport default shallowProperty('byteLength');\n","import shallowProperty from './_shallowProperty.js';\n\n// Internal helper to obtain the `length` property of an object.\nexport default shallowProperty('length');\n","import cb from './_cb.js';\nimport each from './each.js';\n\n// An internal function used for aggregate \"group by\" operations.\nexport default function group(behavior, partition) {\n  return function(obj, iteratee, context) {\n    var result = partition ? [[], []] : {};\n    iteratee = cb(iteratee, context);\n    each(obj, function(value, index) {\n      var key = iteratee(value, index, obj);\n      behavior(result, value, key);\n    });\n    return result;\n  };\n}\n","import { hasOwnProperty } from './_setup.js';\n\n// Internal function to check whether `key` is an own property name of `obj`.\nexport default function has(obj, key) {\n  return obj != null && hasOwnProperty.call(obj, key);\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Object');\n","import createSizePropertyCheck from './_createSizePropertyCheck.js';\nimport getLength from './_getLength.js';\n\n// Internal helper for collection methods to determine whether a collection\n// should be iterated as an array or as an object.\n// Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n// Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\nexport default createSizePropertyCheck(getLength);\n","import createSizePropertyCheck from './_createSizePropertyCheck.js';\nimport getByteLength from './_getByteLength.js';\n\n// Internal helper to determine whether we should spend extensive checks against\n// `ArrayBuffer` et al.\nexport default createSizePropertyCheck(getByteLength);\n","// Internal `_.pick` helper function to determine whether `key` is an enumerable\n// property name of `obj`.\nexport default function keyInObj(value, key, obj) {\n  return key in obj;\n}\n","import getLength from './_getLength.js';\nimport isFunction from './isFunction.js';\nimport allKeys from './allKeys.js';\n\n// Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\nexport function ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function(obj) {\n    if (obj == null) return false;\n    // `Map`, `WeakMap` and `Set` have no enumerable keys.\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n    for (var i = 0; i < length; i++) {\n      if (!isFunction(obj[methods[i]])) return false;\n    }\n    // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n    return methods !== weakMapMethods || !isFunction(obj[forEachName]);\n  };\n}\n\n// In the interest of compact minification, we write\n// each string in the fingerprints only once.\nvar forEachName = 'forEach',\n    hasName = 'has',\n    commonInit = ['clear', 'delete'],\n    mapTail = ['get', hasName, 'set'];\n\n// `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\nexport var mapMethods = commonInit.concat(forEachName, mapTail),\n    weakMapMethods = commonInit.concat(mapTail),\n    setMethods = ['add'].concat(commonInit, forEachName, hasName);\n","// Internal function that returns an efficient (for current engines) version\n// of the passed-in callback, to be repeatedly applied in other Underscore\n// functions.\nexport default function optimizeCb(func, context, argCount) {\n  if (context === void 0) return func;\n  switch (argCount == null ? 3 : argCount) {\n    case 1: return function(value) {\n      return func.call(context, value);\n    };\n    // The 2-argument case is omitted because we’re not using it.\n    case 3: return function(value, index, collection) {\n      return func.call(context, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(context, accumulator, value, index, collection);\n    };\n  }\n  return function() {\n    return func.apply(context, arguments);\n  };\n}\n","// Current version.\nexport var VERSION = '1.13.7';\n\n// Establish the root object, `window` (`self`) in the browser, `global`\n// on the server, or `this` in some virtual machines. We use `self`\n// instead of `window` for `WebWorker` support.\nexport var root = (typeof self == 'object' && self.self === self && self) ||\n          (typeof global == 'object' && global.global === global && global) ||\n          Function('return this')() ||\n          {};\n\n// Save bytes in the minified (but not gzipped) version:\nexport var ArrayProto = Array.prototype, ObjProto = Object.prototype;\nexport var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n// Create quick reference variables for speed access to core prototypes.\nexport var push = ArrayProto.push,\n    slice = ArrayProto.slice,\n    toString = ObjProto.toString,\n    hasOwnProperty = ObjProto.hasOwnProperty;\n\n// Modern feature detection.\nexport var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\n    supportsDataView = typeof DataView !== 'undefined';\n\n// All **ECMAScript 5+** native function implementations that we hope to use\n// are declared here.\nexport var nativeIsArray = Array.isArray,\n    nativeKeys = Object.keys,\n    nativeCreate = Object.create,\n    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n// Create references to these builtin functions because we override them.\nexport var _isNaN = isNaN,\n    _isFinite = isFinite;\n\n// Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\nexport var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\nexport var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n// The largest integer that can be represented exactly.\nexport var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n","// Internal helper to generate a function to obtain property `key` from `obj`.\nexport default function shallowProperty(key) {\n  return function(obj) {\n    return obj == null ? void 0 : obj[key];\n  };\n}\n","import { supportsDataView } from './_setup.js';\nimport hasObjectTag from './_hasObjectTag.js';\n\n// In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\n// In IE 11, the most common among them, this problem also applies to\n// `Map`, `WeakMap` and `Set`.\n// Also, there are cases where an application can override the native\n// `DataView` object, in cases like that we can't use the constructor\n// safely and should just rely on alternate `DataView` checks\nexport var hasDataViewBug = (\n      supportsDataView && (!/\\[native code\\]/.test(String(DataView)) || hasObjectTag(new DataView(new ArrayBuffer(8))))\n    ),\n    isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\n","import { toString } from './_setup.js';\n\n// Internal function for creating a `toString`-based type tester.\nexport default function tagTester(name) {\n  var tag = '[object ' + name + ']';\n  return function(obj) {\n    return toString.call(obj) === tag;\n  };\n}\n","import getByteLength from './_getByteLength.js';\n\n// Internal function to wrap or shallow-copy an ArrayBuffer,\n// typed array or DataView to a new view, reusing the buffer.\nexport default function toBufferView(bufferSource) {\n  return new Uint8Array(\n    bufferSource.buffer || bufferSource,\n    bufferSource.byteOffset || 0,\n    getByteLength(bufferSource)\n  );\n}\n","import _ from './underscore.js';\nimport './toPath.js';\n\n// Internal wrapper for `_.toPath` to enable minification.\n// Similar to `cb` for `_.iteratee`.\nexport default function toPath(path) {\n  return _.toPath(path);\n}\n","import invert from './invert.js';\nimport escapeMap from './_escapeMap.js';\n\n// Internal list of HTML entities for unescaping.\nexport default invert(escapeMap);\n","// Returns a function that will only be executed on and after the Nth call.\nexport default function after(times, func) {\n  return function() {\n    if (--times < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n","import isObject from './isObject.js';\nimport { hasEnumBug } from './_setup.js';\nimport collectNonEnumProps from './_collectNonEnumProps.js';\n\n// Retrieve all the enumerable property names of an object.\nexport default function allKeys(obj) {\n  if (!isObject(obj)) return [];\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n","// Returns a function that will only be executed up to (but not including) the\n// Nth call.\nexport default function before(times, func) {\n  var memo;\n  return function() {\n    if (--times > 0) {\n      memo = func.apply(this, arguments);\n    }\n    if (times <= 1) func = null;\n    return memo;\n  };\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport executeBound from './_executeBound.js';\n\n// Create a function bound to a given object (assigning `this`, and arguments,\n// optionally).\nexport default restArguments(function(func, context, args) {\n  if (!isFunction(func)) throw new TypeError('Bind must be called on a function');\n  var bound = restArguments(function(callArgs) {\n    return executeBound(func, bound, context, this, args.concat(callArgs));\n  });\n  return bound;\n});\n","import restArguments from './restArguments.js';\nimport flatten from './_flatten.js';\nimport bind from './bind.js';\n\n// Bind a number of an object's methods to that object. Remaining arguments\n// are the method names to be bound. Useful for ensuring that all callbacks\n// defined on an object belong to it.\nexport default restArguments(function(obj, keys) {\n  keys = flatten(keys, false, false);\n  var index = keys.length;\n  if (index < 1) throw new Error('bindAll must be passed function names');\n  while (index--) {\n    var key = keys[index];\n    obj[key] = bind(obj[key], obj);\n  }\n  return obj;\n});\n","import _ from './underscore.js';\n\n// Start chaining a wrapped Underscore object.\nexport default function chain(obj) {\n  var instance = _(obj);\n  instance._chain = true;\n  return instance;\n}\n","import { slice } from './_setup.js';\n\n// Chunk a single array into multiple arrays, each containing `count` or fewer\n// items.\nexport default function chunk(array, count) {\n  if (count == null || count < 1) return [];\n  var result = [];\n  var i = 0, length = array.length;\n  while (i < length) {\n    result.push(slice.call(array, i, i += count));\n  }\n  return result;\n}\n","import isObject from './isObject.js';\nimport isArray from './isArray.js';\nimport extend from './extend.js';\n\n// Create a (shallow-cloned) duplicate of an object.\nexport default function clone(obj) {\n  if (!isObject(obj)) return obj;\n  return isArray(obj) ? obj.slice() : extend({}, obj);\n}\n","import filter from './filter.js';\n\n// Trim out all falsy values from an array.\nexport default function compact(array) {\n  return filter(array, Boolean);\n}\n","// Returns a function that is the composition of a list of functions, each\n// consuming the return value of the function that follows.\nexport default function compose() {\n  var args = arguments;\n  var start = args.length - 1;\n  return function() {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n","// Predicate-generating function. Often useful outside of Underscore.\nexport default function constant(value) {\n  return function() {\n    return value;\n  };\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport indexOf from './indexOf.js';\n\n// Determine if the array or object contains a given item (using `===`).\nexport default function contains(obj, item, fromIndex, guard) {\n  if (!isArrayLike(obj)) obj = values(obj);\n  if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n  return indexOf(obj, item, fromIndex) >= 0;\n}\n","import group from './_group.js';\nimport has from './_has.js';\n\n// Counts instances of an object that group by a certain criterion. Pass\n// either a string attribute to count by, or a function that returns the\n// criterion.\nexport default group(function(result, value, key) {\n  if (has(result, key)) result[key]++; else result[key] = 1;\n});\n","import baseCreate from './_baseCreate.js';\nimport extendOwn from './extendOwn.js';\n\n// Creates an object that inherits from the given prototype object.\n// If additional properties are provided then they will be added to the\n// created object.\nexport default function create(prototype, props) {\n  var result = baseCreate(prototype);\n  if (props) extendOwn(result, props);\n  return result;\n}\n","import restArguments from './restArguments.js';\nimport now from './now.js';\n\n// When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\nexport default function debounce(func, wait, immediate) {\n  var timeout, previous, args, result, context;\n\n  var later = function() {\n    var passed = now() - previous;\n    if (wait > passed) {\n      timeout = setTimeout(later, wait - passed);\n    } else {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n      // This check is needed because `func` can recursively invoke `debounced`.\n      if (!timeout) args = context = null;\n    }\n  };\n\n  var debounced = restArguments(function(_args) {\n    context = this;\n    args = _args;\n    previous = now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n      if (immediate) result = func.apply(context, args);\n    }\n    return result;\n  });\n\n  debounced.cancel = function() {\n    clearTimeout(timeout);\n    timeout = args = context = null;\n  };\n\n  return debounced;\n}\n","import createAssigner from './_createAssigner.js';\nimport allKeys from './allKeys.js';\n\n// Fill in a given object with default properties.\nexport default createAssigner(allKeys, true);\n","import partial from './partial.js';\nimport delay from './delay.js';\nimport _ from './underscore.js';\n\n// Defers a function, scheduling it to run after the current call stack has\n// cleared.\nexport default partial(delay, _, 1);\n","import restArguments from './restArguments.js';\n\n// Delays a function for the given number of milliseconds, and then calls\n// it with the arguments supplied.\nexport default restArguments(function(func, wait, args) {\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n});\n","import restArguments from './restArguments.js';\nimport flatten from './_flatten.js';\nimport filter from './filter.js';\nimport contains from './contains.js';\n\n// Take the difference between one array and a number of other arrays.\n// Only the elements present in just the first array will remain.\nexport default restArguments(function(array, rest) {\n  rest = flatten(rest, true, true);\n  return filter(array, function(value){\n    return !contains(rest, value);\n  });\n});\n","import optimizeCb from './_optimizeCb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// The cornerstone for collection functions, an `each`\n// implementation, aka `forEach`.\n// Handles raw objects in addition to array-likes. Treats all\n// sparse array-likes as if they were dense.\nexport default function each(obj, iteratee, context) {\n  iteratee = optimizeCb(iteratee, context);\n  var i, length;\n  if (isArrayLike(obj)) {\n    for (i = 0, length = obj.length; i < length; i++) {\n      iteratee(obj[i], i, obj);\n    }\n  } else {\n    var _keys = keys(obj);\n    for (i = 0, length = _keys.length; i < length; i++) {\n      iteratee(obj[_keys[i]], _keys[i], obj);\n    }\n  }\n  return obj;\n}\n","import createEscaper from './_createEscaper.js';\nimport escapeMap from './_escapeMap.js';\n\n// Function for escaping strings to HTML interpolation.\nexport default createEscaper(escapeMap);\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Determine whether all of the elements pass a truth test.\nexport default function every(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (!predicate(obj[currentKey], currentKey, obj)) return false;\n  }\n  return true;\n}\n","import createAssigner from './_createAssigner.js';\nimport allKeys from './allKeys.js';\n\n// Extend a given object with all the properties in passed-in object(s).\nexport default createAssigner(allKeys);\n","import createAssigner from './_createAssigner.js';\nimport keys from './keys.js';\n\n// Assigns a given object with all the own properties in the passed-in\n// object(s).\n// (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\nexport default createAssigner(keys);\n","import cb from './_cb.js';\nimport each from './each.js';\n\n// Return all the elements that pass a truth test.\nexport default function filter(obj, predicate, context) {\n  var results = [];\n  predicate = cb(predicate, context);\n  each(obj, function(value, index, list) {\n    if (predicate(value, index, list)) results.push(value);\n  });\n  return results;\n}\n","import isArrayLike from './_isArrayLike.js';\nimport findIndex from './findIndex.js';\nimport findKey from './findKey.js';\n\n// Return the first value which passes a truth test.\nexport default function find(obj, predicate, context) {\n  var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n  var key = keyFinder(obj, predicate, context);\n  if (key !== void 0 && key !== -1) return obj[key];\n}\n","import createPredicateIndexFinder from './_createPredicateIndexFinder.js';\n\n// Returns the first index on an array-like that passes a truth test.\nexport default createPredicateIndexFinder(1);\n","import cb from './_cb.js';\nimport keys from './keys.js';\n\n// Returns the first key on an object that passes a truth test.\nexport default function findKey(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = keys(obj), key;\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    key = _keys[i];\n    if (predicate(obj[key], key, obj)) return key;\n  }\n}\n","import createPredicateIndexFinder from './_createPredicateIndexFinder.js';\n\n// Returns the last index on an array-like that passes a truth test.\nexport default createPredicateIndexFinder(-1);\n","import find from './find.js';\nimport matcher from './matcher.js';\n\n// Convenience version of a common use case of `_.find`: getting the first\n// object containing specific `key:value` pairs.\nexport default function findWhere(obj, attrs) {\n  return find(obj, matcher(attrs));\n}\n","import initial from './initial.js';\n\n// Get the first element of an array. Passing **n** will return the first N\n// values in the array. The **guard** check allows it to work with `_.map`.\nexport default function first(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[0];\n  return initial(array, array.length - n);\n}\n","import _flatten from './_flatten.js';\n\n// Flatten out an array, either recursively (by default), or up to `depth`.\n// Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\nexport default function flatten(array, depth) {\n  return _flatten(array, depth, false);\n}\n","import isFunction from './isFunction.js';\n\n// Return a sorted list of the function names available on the object.\nexport default function functions(obj) {\n  var names = [];\n  for (var key in obj) {\n    if (isFunction(obj[key])) names.push(key);\n  }\n  return names.sort();\n}\n","import toPath from './_toPath.js';\nimport deepGet from './_deepGet.js';\nimport isUndefined from './isUndefined.js';\n\n// Get the value of the (deep) property on `path` from `object`.\n// If any property in `path` does not exist or if the value is\n// `undefined`, return `defaultValue` instead.\n// The `path` is normalized through `_.toPath`.\nexport default function get(object, path, defaultValue) {\n  var value = deepGet(object, toPath(path));\n  return isUndefined(value) ? defaultValue : value;\n}\n","import group from './_group.js';\nimport has from './_has.js';\n\n// Groups the object's values by a criterion. Pass either a string attribute\n// to group by, or a function that returns the criterion.\nexport default group(function(result, value, key) {\n  if (has(result, key)) result[key].push(value); else result[key] = [value];\n});\n","import _has from './_has.js';\nimport toPath from './_toPath.js';\n\n// Shortcut function for checking if an object has a given property directly on\n// itself (in other words, not on a prototype). Unlike the internal `has`\n// function, this public version can also traverse nested properties.\nexport default function has(obj, path) {\n  path = toPath(path);\n  var length = path.length;\n  for (var i = 0; i < length; i++) {\n    var key = path[i];\n    if (!_has(obj, key)) return false;\n    obj = obj[key];\n  }\n  return !!length;\n}\n","// Keep the identity function around for default iteratees.\nexport default function identity(value) {\n  return value;\n}\n","// ESM Exports\n// ===========\n// This module is the package entry point for ES module users. In other words,\n// it is the module they are interfacing with when they import from the whole\n// package instead of from a submodule, like this:\n//\n// ```js\n// import { map } from 'underscore';\n// ```\n//\n// The difference with `./index-default`, which is the package entry point for\n// CommonJS, AMD and UMD users, is purely technical. In ES modules, named and\n// default exports are considered to be siblings, so when you have a default\n// export, its properties are not automatically available as named exports. For\n// this reason, we re-export the named exports in addition to providing the same\n// default export as in `./index-default`.\nexport { default } from './index-default.js';\nexport * from './index.js';\n","// Default Export\n// ==============\n// In this module, we mix our bundled exports into the `_` object and export\n// the result. This is analogous to setting `module.exports = _` in CommonJS.\n// Hence, this module is also the entry point of our UMD bundle and the package\n// entry point for CommonJS and AMD users. In other words, this is (the source\n// of) the module you are interfacing with when you do any of the following:\n//\n// ```js\n// // CommonJS\n// var _ = require('underscore');\n//\n// // AMD\n// define(['underscore'], function(_) {...});\n//\n// // UMD in the browser\n// // _ is available as a global variable\n// ```\nimport * as allExports from './index.js';\nimport { mixin } from './index.js';\n\n// Add all of the Underscore functions to the wrapper object.\nvar _ = mixin(allExports);\n// Legacy Node.js API.\n_._ = _;\n// Export the Underscore API.\nexport default _;\n","// Named Exports\n// =============\n\n//     Underscore.js 1.13.7\n//     https://underscorejs.org\n//     (c) 2009-2024 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n// Baseline setup.\nexport { VERSION } from './_setup.js';\nexport { default as restArguments } from './restArguments.js';\n\n// Object Functions\n// ----------------\n// Our most fundamental functions operate on any JavaScript object.\n// Most functions in Underscore depend on at least one function in this section.\n\n// A group of functions that check the types of core JavaScript values.\n// These are often informally referred to as the \"isType\" functions.\nexport { default as isObject } from './isObject.js';\nexport { default as isNull } from './isNull.js';\nexport { default as isUndefined } from './isUndefined.js';\nexport { default as isBoolean } from './isBoolean.js';\nexport { default as isElement } from './isElement.js';\nexport { default as isString } from './isString.js';\nexport { default as isNumber } from './isNumber.js';\nexport { default as isDate } from './isDate.js';\nexport { default as isRegExp } from './isRegExp.js';\nexport { default as isError } from './isError.js';\nexport { default as isSymbol } from './isSymbol.js';\nexport { default as isArrayBuffer } from './isArrayBuffer.js';\nexport { default as isDataView } from './isDataView.js';\nexport { default as isArray } from './isArray.js';\nexport { default as isFunction } from './isFunction.js';\nexport { default as isArguments } from './isArguments.js';\nexport { default as isFinite } from './isFinite.js';\nexport { default as isNaN } from './isNaN.js';\nexport { default as isTypedArray } from './isTypedArray.js';\nexport { default as isEmpty } from './isEmpty.js';\nexport { default as isMatch } from './isMatch.js';\nexport { default as isEqual } from './isEqual.js';\nexport { default as isMap } from './isMap.js';\nexport { default as isWeakMap } from './isWeakMap.js';\nexport { default as isSet } from './isSet.js';\nexport { default as isWeakSet } from './isWeakSet.js';\n\n// Functions that treat an object as a dictionary of key-value pairs.\nexport { default as keys } from './keys.js';\nexport { default as allKeys } from './allKeys.js';\nexport { default as values } from './values.js';\nexport { default as pairs } from './pairs.js';\nexport { default as invert } from './invert.js';\nexport { default as functions,\n         default as methods   } from './functions.js';\nexport { default as extend } from './extend.js';\nexport { default as extendOwn,\n         default as assign    } from './extendOwn.js';\nexport { default as defaults } from './defaults.js';\nexport { default as create } from './create.js';\nexport { default as clone } from './clone.js';\nexport { default as tap } from './tap.js';\nexport { default as get } from './get.js';\nexport { default as has } from './has.js';\nexport { default as mapObject } from './mapObject.js';\n\n// Utility Functions\n// -----------------\n// A bit of a grab bag: Predicate-generating functions for use with filters and\n// loops, string escaping and templating, create random numbers and unique ids,\n// and functions that facilitate Underscore's chaining and iteration conventions.\nexport { default as identity } from './identity.js';\nexport { default as constant } from './constant.js';\nexport { default as noop } from './noop.js';\nexport { default as toPath } from './toPath.js';\nexport { default as property } from './property.js';\nexport { default as propertyOf } from './propertyOf.js';\nexport { default as matcher,\n         default as matches } from './matcher.js';\nexport { default as times } from './times.js';\nexport { default as random } from './random.js';\nexport { default as now } from './now.js';\nexport { default as escape } from './escape.js';\nexport { default as unescape } from './unescape.js';\nexport { default as templateSettings } from './templateSettings.js';\nexport { default as template } from './template.js';\nexport { default as result } from './result.js';\nexport { default as uniqueId } from './uniqueId.js';\nexport { default as chain } from './chain.js';\nexport { default as iteratee } from './iteratee.js';\n\n// Function (ahem) Functions\n// -------------------------\n// These functions take a function as an argument and return a new function\n// as the result. Also known as higher-order functions.\nexport { default as partial } from './partial.js';\nexport { default as bind } from './bind.js';\nexport { default as bindAll } from './bindAll.js';\nexport { default as memoize } from './memoize.js';\nexport { default as delay } from './delay.js';\nexport { default as defer } from './defer.js';\nexport { default as throttle } from './throttle.js';\nexport { default as debounce } from './debounce.js';\nexport { default as wrap } from './wrap.js';\nexport { default as negate } from './negate.js';\nexport { default as compose } from './compose.js';\nexport { default as after } from './after.js';\nexport { default as before } from './before.js';\nexport { default as once } from './once.js';\n\n// Finders\n// -------\n// Functions that extract (the position of) a single element from an object\n// or array based on some criterion.\nexport { default as findKey } from './findKey.js';\nexport { default as findIndex } from './findIndex.js';\nexport { default as findLastIndex } from './findLastIndex.js';\nexport { default as sortedIndex } from './sortedIndex.js';\nexport { default as indexOf } from './indexOf.js';\nexport { default as lastIndexOf } from './lastIndexOf.js';\nexport { default as find,\n         default as detect } from './find.js';\nexport { default as findWhere } from './findWhere.js';\n\n// Collection Functions\n// --------------------\n// Functions that work on any collection of elements: either an array, or\n// an object of key-value pairs.\nexport { default as each,\n         default as forEach } from './each.js';\nexport { default as map,\n         default as collect } from './map.js';\nexport { default as reduce,\n         default as foldl,\n         default as inject } from './reduce.js';\nexport { default as reduceRight,\n         default as foldr       } from './reduceRight.js';\nexport { default as filter,\n         default as select } from './filter.js';\nexport { default as reject } from './reject.js';\nexport { default as every,\n         default as all   } from './every.js';\nexport { default as some,\n         default as any  } from './some.js';\nexport { default as contains,\n         default as includes,\n         default as include  } from './contains.js';\nexport { default as invoke } from './invoke.js';\nexport { default as pluck } from './pluck.js';\nexport { default as where } from './where.js';\nexport { default as max } from './max.js';\nexport { default as min } from './min.js';\nexport { default as shuffle } from './shuffle.js';\nexport { default as sample } from './sample.js';\nexport { default as sortBy } from './sortBy.js';\nexport { default as groupBy } from './groupBy.js';\nexport { default as indexBy } from './indexBy.js';\nexport { default as countBy } from './countBy.js';\nexport { default as partition } from './partition.js';\nexport { default as toArray } from './toArray.js';\nexport { default as size } from './size.js';\n\n// `_.pick` and `_.omit` are actually object functions, but we put\n// them here in order to create a more natural reading order in the\n// monolithic build as they depend on `_.contains`.\nexport { default as pick } from './pick.js';\nexport { default as omit } from './omit.js';\n\n// Array Functions\n// ---------------\n// Functions that operate on arrays (and array-likes) only, because they’re\n// expressed in terms of operations on an ordered list of values.\nexport { default as first,\n         default as head,\n         default as take  } from './first.js';\nexport { default as initial } from './initial.js';\nexport { default as last } from './last.js';\nexport { default as rest,\n         default as tail,\n         default as drop } from './rest.js';\nexport { default as compact } from './compact.js';\nexport { default as flatten } from './flatten.js';\nexport { default as without } from './without.js';\nexport { default as uniq,\n         default as unique } from './uniq.js';\nexport { default as union } from './union.js';\nexport { default as intersection } from './intersection.js';\nexport { default as difference } from './difference.js';\nexport { default as unzip,\n         default as transpose } from './unzip.js';\nexport { default as zip } from './zip.js';\nexport { default as object } from './object.js';\nexport { default as range } from './range.js';\nexport { default as chunk } from './chunk.js';\n\n// OOP\n// ---\n// These modules support the \"object-oriented\" calling style. See also\n// `underscore.js` and `index-default.js`.\nexport { default as mixin } from './mixin.js';\nexport { default } from './underscore-array-methods.js';\n","import group from './_group.js';\n\n// Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n// when you know that your index values will be unique.\nexport default group(function(result, value, key) {\n  result[key] = value;\n});\n","import sortedIndex from './sortedIndex.js';\nimport findIndex from './findIndex.js';\nimport createIndexFinder from './_createIndexFinder.js';\n\n// Return the position of the first occurrence of an item in an array,\n// or -1 if the item is not included in the array.\n// If the array is large and already in sort order, pass `true`\n// for **isSorted** to use binary search.\nexport default createIndexFinder(1, findIndex, sortedIndex);\n","import { slice } from './_setup.js';\n\n// Returns everything but the last entry of the array. Especially useful on\n// the arguments object. Passing **n** will return all the values in\n// the array, excluding the last N.\nexport default function initial(array, n, guard) {\n  return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n}\n","import getLength from './_getLength.js';\nimport contains from './contains.js';\n\n// Produce an array that contains every item shared between all the\n// passed-in arrays.\nexport default function intersection(array) {\n  var result = [];\n  var argsLength = arguments.length;\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var item = array[i];\n    if (contains(result, item)) continue;\n    var j;\n    for (j = 1; j < argsLength; j++) {\n      if (!contains(arguments[j], item)) break;\n    }\n    if (j === argsLength) result.push(item);\n  }\n  return result;\n}\n","import keys from './keys.js';\n\n// Invert the keys and values of an object. The values must be serializable.\nexport default function invert(obj) {\n  var result = {};\n  var _keys = keys(obj);\n  for (var i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport map from './map.js';\nimport deepGet from './_deepGet.js';\nimport toPath from './_toPath.js';\n\n// Invoke a method (with arguments) on every item in a collection.\nexport default restArguments(function(obj, path, args) {\n  var contextPath, func;\n  if (isFunction(path)) {\n    func = path;\n  } else {\n    path = toPath(path);\n    contextPath = path.slice(0, -1);\n    path = path[path.length - 1];\n  }\n  return map(obj, function(context) {\n    var method = func;\n    if (!method) {\n      if (contextPath && contextPath.length) {\n        context = deepGet(context, contextPath);\n      }\n      if (context == null) return void 0;\n      method = context[path];\n    }\n    return method == null ? method : method.apply(context, args);\n  });\n});\n","import tagTester from './_tagTester.js';\nimport has from './_has.js';\n\nvar isArguments = tagTester('Arguments');\n\n// Define a fallback version of the method in browsers (ahem, IE < 9), where\n// there isn't any inspectable \"Arguments\" type.\n(function() {\n  if (!isArguments(arguments)) {\n    isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n}());\n\nexport default isArguments;\n","import { nativeIsArray } from './_setup.js';\nimport tagTester from './_tagTester.js';\n\n// Is a given value an array?\n// Delegates to ECMA5's native `Array.isArray`.\nexport default nativeIsArray || tagTester('Array');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('ArrayBuffer');\n","import { toString } from './_setup.js';\n\n// Is a given value a boolean?\nexport default function isBoolean(obj) {\n  return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n}\n","import tagTester from './_tagTester.js';\nimport isFunction from './isFunction.js';\nimport isArrayBuffer from './isArrayBuffer.js';\nimport { hasDataViewBug } from './_stringTagBug.js';\n\nvar isDataView = tagTester('DataView');\n\n// In IE 10 - Edge 13, we need a different heuristic\n// to determine whether an object is a `DataView`.\n// Also, in cases where the native `DataView` is\n// overridden we can't rely on the tag itself.\nfunction alternateIsDataView(obj) {\n  return obj != null && isFunction(obj.getInt8) && isArrayBuffer(obj.buffer);\n}\n\nexport default (hasDataViewBug ? alternateIsDataView : isDataView);\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Date');\n","// Is a given value a DOM element?\nexport default function isElement(obj) {\n  return !!(obj && obj.nodeType === 1);\n}\n","import getLength from './_getLength.js';\nimport isArray from './isArray.js';\nimport isString from './isString.js';\nimport isArguments from './isArguments.js';\nimport keys from './keys.js';\n\n// Is a given array, string, or object empty?\n// An \"empty\" object has no enumerable own-properties.\nexport default function isEmpty(obj) {\n  if (obj == null) return true;\n  // Skip the more expensive `toString`-based type checks if `obj` has no\n  // `.length`.\n  var length = getLength(obj);\n  if (typeof length == 'number' && (\n    isArray(obj) || isString(obj) || isArguments(obj)\n  )) return length === 0;\n  return getLength(keys(obj)) === 0;\n}\n","import _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport { hasDataViewBug }  from './_stringTagBug.js';\nimport isDataView from './isDataView.js';\nimport keys from './keys.js';\nimport has from './_has.js';\nimport toBufferView from './_toBufferView.js';\n\n// We use this string twice, so give it a name for minification.\nvar tagDataView = '[object DataView]';\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  // `null` or `undefined` only equal to itself (strict comparison).\n  if (a == null || b == null) return false;\n  // `NaN`s are equivalent, but non-reflexive.\n  if (a !== a) return b !== b;\n  // Exhaust primitive checks\n  var type = typeof a;\n  if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n}\n\n// Internal recursive comparison function for `_.isEqual`.\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped;\n  // Compare `[[Class]]` names.\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n  // Work around a bug in IE 10 - Edge 13.\n  if (hasDataViewBug && className == '[object Object]' && isDataView(a)) {\n    if (!isDataView(b)) return false;\n    className = tagDataView;\n  }\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b;\n      // An `egal` comparison is performed for other numeric values.\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    case '[object ArrayBuffer]':\n    case tagDataView:\n      // Coerce to typed array so we can fall through.\n      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n  if (!areArrays && isTypedArray(a)) {\n      var byteLength = getByteLength(a);\n      if (byteLength !== getByteLength(b)) return false;\n      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n      areArrays = true;\n  }\n  if (!areArrays) {\n    if (typeof a != 'object' || typeof b != 'object') return false;\n\n    // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n    var aCtor = a.constructor, bCtor = b.constructor;\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\n                             isFunction(bCtor) && bCtor instanceof bCtor)\n                        && ('constructor' in a && 'constructor' in b)) {\n      return false;\n    }\n  }\n  // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  }\n\n  // Add the first object to the stack of traversed objects.\n  aStack.push(a);\n  bStack.push(b);\n\n  // Recursively compare objects and arrays.\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false;\n    // Deep compare the contents, ignoring non-numeric properties.\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a), key;\n    length = _keys.length;\n    // Ensure that both objects contain the same number of properties before comparing deep equality.\n    if (keys(b).length !== length) return false;\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  }\n  // Remove the first object from the stack of traversed objects.\n  aStack.pop();\n  bStack.pop();\n  return true;\n}\n\n// Perform a deep comparison to check if two objects are equal.\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Error');\n","import { _isFinite } from './_setup.js';\nimport isSymbol from './isSymbol.js';\n\n// Is a given object a finite number?\nexport default function isFinite(obj) {\n  return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n}\n","import tagTester from './_tagTester.js';\nimport { root } from './_setup.js';\n\nvar isFunction = tagTester('Function');\n\n// Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n// v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\nvar nodelist = root.document && root.document.childNodes;\nif (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n  isFunction = function(obj) {\n    return typeof obj == 'function' || false;\n  };\n}\n\nexport default isFunction;\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, mapMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\n","import keys from './keys.js';\n\n// Returns whether an object has a given set of `key:value` pairs.\nexport default function isMatch(object, attrs) {\n  var _keys = keys(attrs), length = _keys.length;\n  if (object == null) return !length;\n  var obj = Object(object);\n  for (var i = 0; i < length; i++) {\n    var key = _keys[i];\n    if (attrs[key] !== obj[key] || !(key in obj)) return false;\n  }\n  return true;\n}\n","import { _isNaN } from './_setup.js';\nimport isNumber from './isNumber.js';\n\n// Is the given value `NaN`?\nexport default function isNaN(obj) {\n  return isNumber(obj) && _isNaN(obj);\n}\n","// Is a given value equal to null?\nexport default function isNull(obj) {\n  return obj === null;\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Number');\n","// Is a given variable an object?\nexport default function isObject(obj) {\n  var type = typeof obj;\n  return type === 'function' || (type === 'object' && !!obj);\n}\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('RegExp');\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, setMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('String');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('Symbol');\n","import { supportsArrayBuffer, nativeIsView, toString } from './_setup.js';\nimport isDataView from './isDataView.js';\nimport constant from './constant.js';\nimport isBufferLike from './_isBufferLike.js';\n\n// Is a given value a typed array?\nvar typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\nfunction isTypedArray(obj) {\n  // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n  // Otherwise, fall back on the above regular expression.\n  return nativeIsView ? (nativeIsView(obj) && !isDataView(obj)) :\n                isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n}\n\nexport default supportsArrayBuffer ? isTypedArray : constant(false);\n","// Is a given variable undefined?\nexport default function isUndefined(obj) {\n  return obj === void 0;\n}\n","import tagTester from './_tagTester.js';\nimport { isIE11 } from './_stringTagBug.js';\nimport { ie11fingerprint, weakMapMethods }  from './_methodFingerprint.js';\n\nexport default isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\n","import tagTester from './_tagTester.js';\n\nexport default tagTester('WeakSet');\n","import _ from './underscore.js';\nimport baseIteratee from './_baseIteratee.js';\n\n// External wrapper for our callback generator. Users may customize\n// `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n// This abstraction hides the internal-only `argCount` argument.\nexport default function iteratee(value, context) {\n  return baseIteratee(value, context, Infinity);\n}\n_.iteratee = iteratee;\n","import isObject from './isObject.js';\nimport { nativeKeys, hasEnumBug } from './_setup.js';\nimport has from './_has.js';\nimport collectNonEnumProps from './_collectNonEnumProps.js';\n\n// Retrieve the names of an object's own properties.\n// Delegates to **ECMAScript 5**'s native `Object.keys`.\nexport default function keys(obj) {\n  if (!isObject(obj)) return [];\n  if (nativeKeys) return nativeKeys(obj);\n  var keys = [];\n  for (var key in obj) if (has(obj, key)) keys.push(key);\n  // Ahem, IE < 9.\n  if (hasEnumBug) collectNonEnumProps(obj, keys);\n  return keys;\n}\n","import rest from './rest.js';\n\n// Get the last element of an array. Passing **n** will return the last N\n// values in the array.\nexport default function last(array, n, guard) {\n  if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n  if (n == null || guard) return array[array.length - 1];\n  return rest(array, Math.max(0, array.length - n));\n}\n","import findLastIndex from './findLastIndex.js';\nimport createIndexFinder from './_createIndexFinder.js';\n\n// Return the position of the last occurrence of an item in an array,\n// or -1 if the item is not included in the array.\nexport default createIndexFinder(-1, findLastIndex);\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Return the results of applying the iteratee to each element.\nexport default function map(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length,\n      results = Array(length);\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    results[index] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n","import cb from './_cb.js';\nimport keys from './keys.js';\n\n// Returns the results of applying the `iteratee` to each element of `obj`.\n// In contrast to `_.map` it returns an object.\nexport default function mapObject(obj, iteratee, context) {\n  iteratee = cb(iteratee, context);\n  var _keys = keys(obj),\n      length = _keys.length,\n      results = {};\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys[index];\n    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n  }\n  return results;\n}\n","import extendOwn from './extendOwn.js';\nimport isMatch from './isMatch.js';\n\n// Returns a predicate for checking whether an object has a given set of\n// `key:value` pairs.\nexport default function matcher(attrs) {\n  attrs = extendOwn({}, attrs);\n  return function(obj) {\n    return isMatch(obj, attrs);\n  };\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport cb from './_cb.js';\nimport each from './each.js';\n\n// Return the maximum element (or element-based computation).\nexport default function max(obj, iteratee, context) {\n  var result = -Infinity, lastComputed = -Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value > result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n","import has from './_has.js';\n\n// Memoize an expensive function by storing its results.\nexport default function memoize(func, hasher) {\n  var memoize = function(key) {\n    var cache = memoize.cache;\n    var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n    if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n    return cache[address];\n  };\n  memoize.cache = {};\n  return memoize;\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport cb from './_cb.js';\nimport each from './each.js';\n\n// Return the minimum element (or element-based computation).\nexport default function min(obj, iteratee, context) {\n  var result = Infinity, lastComputed = Infinity,\n      value, computed;\n  if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n    obj = isArrayLike(obj) ? obj : values(obj);\n    for (var i = 0, length = obj.length; i < length; i++) {\n      value = obj[i];\n      if (value != null && value < result) {\n        result = value;\n      }\n    }\n  } else {\n    iteratee = cb(iteratee, context);\n    each(obj, function(v, index, list) {\n      computed = iteratee(v, index, list);\n      if (computed < lastComputed || (computed === Infinity && result === Infinity)) {\n        result = v;\n        lastComputed = computed;\n      }\n    });\n  }\n  return result;\n}\n","import _ from './underscore.js';\nimport each from './each.js';\nimport functions from './functions.js';\nimport { push } from './_setup.js';\nimport chainResult from './_chainResult.js';\n\n// Add your own custom functions to the Underscore object.\nexport default function mixin(obj) {\n  each(functions(obj), function(name) {\n    var func = _[name] = obj[name];\n    _.prototype[name] = function() {\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n      return chainResult(this, func.apply(_, args));\n    };\n  });\n  return _;\n}\n","// Returns a negated version of the passed-in predicate.\nexport default function negate(predicate) {\n  return function() {\n    return !predicate.apply(this, arguments);\n  };\n}\n","// Predicate-generating function. Often useful outside of Underscore.\nexport default function noop(){}\n","// A (possibly faster) way to get the current timestamp as an integer.\nexport default Date.now || function() {\n  return new Date().getTime();\n};\n","import getLength  from './_getLength.js';\n\n// Converts lists into objects. Pass either a single array of `[key, value]`\n// pairs, or two parallel arrays of the same length -- one of keys, and one of\n// the corresponding values. Passing by pairs is the reverse of `_.pairs`.\nexport default function object(list, values) {\n  var result = {};\n  for (var i = 0, length = getLength(list); i < length; i++) {\n    if (values) {\n      result[list[i]] = values[i];\n    } else {\n      result[list[i][0]] = list[i][1];\n    }\n  }\n  return result;\n}\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport negate from './negate.js';\nimport map from './map.js';\nimport flatten from './_flatten.js';\nimport contains from './contains.js';\nimport pick from './pick.js';\n\n// Return a copy of the object without the disallowed properties.\nexport default restArguments(function(obj, keys) {\n  var iteratee = keys[0], context;\n  if (isFunction(iteratee)) {\n    iteratee = negate(iteratee);\n    if (keys.length > 1) context = keys[1];\n  } else {\n    keys = map(flatten(keys, false, false), String);\n    iteratee = function(value, key) {\n      return !contains(keys, key);\n    };\n  }\n  return pick(obj, iteratee, context);\n});\n","import partial from './partial.js';\nimport before from './before.js';\n\n// Returns a function that will be executed at most one time, no matter how\n// often you call it. Useful for lazy initialization.\nexport default partial(before, 2);\n","import keys from './keys.js';\n\n// Convert an object into a list of `[key, value]` pairs.\n// The opposite of `_.object` with one argument.\nexport default function pairs(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var pairs = Array(length);\n  for (var i = 0; i < length; i++) {\n    pairs[i] = [_keys[i], obj[_keys[i]]];\n  }\n  return pairs;\n}\n","import restArguments from './restArguments.js';\nimport executeBound from './_executeBound.js';\nimport _ from './underscore.js';\n\n// Partially apply a function by creating a version that has had some of its\n// arguments pre-filled, without changing its dynamic `this` context. `_` acts\n// as a placeholder by default, allowing any combination of arguments to be\n// pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\nvar partial = restArguments(function(func, boundArgs) {\n  var placeholder = partial.placeholder;\n  var bound = function() {\n    var position = 0, length = boundArgs.length;\n    var args = Array(length);\n    for (var i = 0; i < length; i++) {\n      args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n    }\n    while (position < arguments.length) args.push(arguments[position++]);\n    return executeBound(func, bound, this, this, args);\n  };\n  return bound;\n});\n\npartial.placeholder = _;\nexport default partial;\n","import group from './_group.js';\n\n// Split a collection into two arrays: one whose elements all pass the given\n// truth test, and one whose elements all do not pass the truth test.\nexport default group(function(result, value, pass) {\n  result[pass ? 0 : 1].push(value);\n}, true);\n","import restArguments from './restArguments.js';\nimport isFunction from './isFunction.js';\nimport optimizeCb from './_optimizeCb.js';\nimport allKeys from './allKeys.js';\nimport keyInObj from './_keyInObj.js';\nimport flatten from './_flatten.js';\n\n// Return a copy of the object only containing the allowed properties.\nexport default restArguments(function(obj, keys) {\n  var result = {}, iteratee = keys[0];\n  if (obj == null) return result;\n  if (isFunction(iteratee)) {\n    if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n    keys = allKeys(obj);\n  } else {\n    iteratee = keyInObj;\n    keys = flatten(keys, false, false);\n    obj = Object(obj);\n  }\n  for (var i = 0, length = keys.length; i < length; i++) {\n    var key = keys[i];\n    var value = obj[key];\n    if (iteratee(value, key, obj)) result[key] = value;\n  }\n  return result;\n});\n","import map from './map.js';\nimport property from './property.js';\n\n// Convenience version of a common use case of `_.map`: fetching a property.\nexport default function pluck(obj, key) {\n  return map(obj, property(key));\n}\n","import deepGet from './_deepGet.js';\nimport toPath from './_toPath.js';\n\n// Creates a function that, when passed an object, will traverse that object’s\n// properties down the given `path`, specified as an array of keys or indices.\nexport default function property(path) {\n  path = toPath(path);\n  return function(obj) {\n    return deepGet(obj, path);\n  };\n}\n","import noop from './noop.js';\nimport get from './get.js';\n\n// Generates a function for a given object that returns a given property.\nexport default function propertyOf(obj) {\n  if (obj == null) return noop;\n  return function(path) {\n    return get(obj, path);\n  };\n}\n","// Return a random integer between `min` and `max` (inclusive).\nexport default function random(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n  return min + Math.floor(Math.random() * (max - min + 1));\n}\n","// Generate an integer Array containing an arithmetic progression. A port of\n// the native Python `range()` function. See\n// [the Python documentation](https://docs.python.org/library/functions.html#range).\nexport default function range(start, stop, step) {\n  if (stop == null) {\n    stop = start || 0;\n    start = 0;\n  }\n  if (!step) {\n    step = stop < start ? -1 : 1;\n  }\n\n  var length = Math.max(Math.ceil((stop - start) / step), 0);\n  var range = Array(length);\n\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start;\n  }\n\n  return range;\n}\n","import createReduce from './_createReduce.js';\n\n// **Reduce** builds up a single result from a list of values, aka `inject`,\n// or `foldl`.\nexport default createReduce(1);\n","import createReduce from './_createReduce.js';\n\n// The right-associative version of reduce, also known as `foldr`.\nexport default createReduce(-1);\n","import filter from './filter.js';\nimport negate from './negate.js';\nimport cb from './_cb.js';\n\n// Return all the elements for which a truth test fails.\nexport default function reject(obj, predicate, context) {\n  return filter(obj, negate(cb(predicate)), context);\n}\n","import { slice } from './_setup.js';\n\n// Returns everything but the first entry of the `array`. Especially useful on\n// the `arguments` object. Passing an **n** will return the rest N values in the\n// `array`.\nexport default function rest(array, n, guard) {\n  return slice.call(array, n == null || guard ? 1 : n);\n}\n","// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nexport default function restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function() {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n    switch (startIndex) {\n      case 0: return func.call(this, rest);\n      case 1: return func.call(this, arguments[0], rest);\n      case 2: return func.call(this, arguments[0], arguments[1], rest);\n    }\n    var args = Array(startIndex + 1);\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n}\n","import isFunction from './isFunction.js';\nimport toPath from './_toPath.js';\n\n// Traverses the children of `obj` along `path`. If a child is a function, it\n// is invoked with its parent as context. Returns the value of the final\n// child, or `fallback` if any child is undefined.\nexport default function result(obj, path, fallback) {\n  path = toPath(path);\n  var length = path.length;\n  if (!length) {\n    return isFunction(fallback) ? fallback.call(obj) : fallback;\n  }\n  for (var i = 0; i < length; i++) {\n    var prop = obj == null ? void 0 : obj[path[i]];\n    if (prop === void 0) {\n      prop = fallback;\n      i = length; // Ensure we don't continue iterating.\n    }\n    obj = isFunction(prop) ? prop.call(obj) : prop;\n  }\n  return obj;\n}\n","import isArrayLike from './_isArrayLike.js';\nimport values from './values.js';\nimport getLength from './_getLength.js';\nimport random from './random.js';\nimport toArray from './toArray.js';\n\n// Sample **n** random values from a collection using the modern version of the\n// [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n// If **n** is not specified, returns a single random element.\n// The internal `guard` argument allows it to work with `_.map`.\nexport default function sample(obj, n, guard) {\n  if (n == null || guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    return obj[random(obj.length - 1)];\n  }\n  var sample = toArray(obj);\n  var length = getLength(sample);\n  n = Math.max(Math.min(n, length), 0);\n  var last = length - 1;\n  for (var index = 0; index < n; index++) {\n    var rand = random(index, last);\n    var temp = sample[index];\n    sample[index] = sample[rand];\n    sample[rand] = temp;\n  }\n  return sample.slice(0, n);\n}\n","import sample from './sample.js';\n\n// Shuffle a collection.\nexport default function shuffle(obj) {\n  return sample(obj, Infinity);\n}\n","import isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Return the number of elements in a collection.\nexport default function size(obj) {\n  if (obj == null) return 0;\n  return isArrayLike(obj) ? obj.length : keys(obj).length;\n}\n","import cb from './_cb.js';\nimport isArrayLike from './_isArrayLike.js';\nimport keys from './keys.js';\n\n// Determine if at least one element in the object passes a truth test.\nexport default function some(obj, predicate, context) {\n  predicate = cb(predicate, context);\n  var _keys = !isArrayLike(obj) && keys(obj),\n      length = (_keys || obj).length;\n  for (var index = 0; index < length; index++) {\n    var currentKey = _keys ? _keys[index] : index;\n    if (predicate(obj[currentKey], currentKey, obj)) return true;\n  }\n  return false;\n}\n","import cb from './_cb.js';\nimport pluck from './pluck.js';\nimport map from './map.js';\n\n// Sort the object's values by a criterion produced by an iteratee.\nexport default function sortBy(obj, iteratee, context) {\n  var index = 0;\n  iteratee = cb(iteratee, context);\n  return pluck(map(obj, function(value, key, list) {\n    return {\n      value: value,\n      index: index++,\n      criteria: iteratee(value, key, list)\n    };\n  }).sort(function(left, right) {\n    var a = left.criteria;\n    var b = right.criteria;\n    if (a !== b) {\n      if (a > b || a === void 0) return 1;\n      if (a < b || b === void 0) return -1;\n    }\n    return left.index - right.index;\n  }), 'value');\n}\n","import cb from './_cb.js';\nimport getLength from './_getLength.js';\n\n// Use a comparator function to figure out the smallest index at which\n// an object should be inserted so as to maintain order. Uses binary search.\nexport default function sortedIndex(array, obj, iteratee, context) {\n  iteratee = cb(iteratee, context, 1);\n  var value = iteratee(obj);\n  var low = 0, high = getLength(array);\n  while (low < high) {\n    var mid = Math.floor((low + high) / 2);\n    if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n  }\n  return low;\n}\n","// Invokes `interceptor` with the `obj` and then returns `obj`.\n// The primary purpose of this method is to \"tap into\" a method chain, in\n// order to perform operations on intermediate results within the chain.\nexport default function tap(obj, interceptor) {\n  interceptor(obj);\n  return obj;\n}\n","import defaults from './defaults.js';\nimport _ from './underscore.js';\nimport './templateSettings.js';\n\n// When customizing `_.templateSettings`, if you don't want to define an\n// interpolation, evaluation or escaping regex, we need one that is\n// guaranteed not to match.\nvar noMatch = /(.)^/;\n\n// Certain characters need to be escaped so that they can be put into a\n// string literal.\nvar escapes = {\n  \"'\": \"'\",\n  '\\\\': '\\\\',\n  '\\r': 'r',\n  '\\n': 'n',\n  '\\u2028': 'u2028',\n  '\\u2029': 'u2029'\n};\n\nvar escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\nfunction escapeChar(match) {\n  return '\\\\' + escapes[match];\n}\n\n// In order to prevent third-party code injection through\n// `_.templateSettings.variable`, we test it against the following regular\n// expression. It is intentionally a bit more liberal than just matching valid\n// identifiers, but still prevents possible loopholes through defaults or\n// destructuring assignment.\nvar bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\n\n// JavaScript micro-templating, similar to John Resig's implementation.\n// Underscore templating handles arbitrary delimiters, preserves whitespace,\n// and correctly escapes quotes within interpolated code.\n// NB: `oldSettings` only exists for backwards compatibility.\nexport default function template(text, settings, oldSettings) {\n  if (!settings && oldSettings) settings = oldSettings;\n  settings = defaults({}, settings, _.templateSettings);\n\n  // Combine delimiters into one regular expression via alternation.\n  var matcher = RegExp([\n    (settings.escape || noMatch).source,\n    (settings.interpolate || noMatch).source,\n    (settings.evaluate || noMatch).source\n  ].join('|') + '|$', 'g');\n\n  // Compile the template source, escaping string literals appropriately.\n  var index = 0;\n  var source = \"__p+='\";\n  text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n    source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n    index = offset + match.length;\n\n    if (escape) {\n      source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n    } else if (interpolate) {\n      source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n    } else if (evaluate) {\n      source += \"';\\n\" + evaluate + \"\\n__p+='\";\n    }\n\n    // Adobe VMs need the match returned to produce the correct offset.\n    return match;\n  });\n  source += \"';\\n\";\n\n  var argument = settings.variable;\n  if (argument) {\n    // Insure against third-party code injection. (CVE-2021-23358)\n    if (!bareIdentifier.test(argument)) throw new Error(\n      'variable is not a bare identifier: ' + argument\n    );\n  } else {\n    // If a variable is not specified, place data values in local scope.\n    source = 'with(obj||{}){\\n' + source + '}\\n';\n    argument = 'obj';\n  }\n\n  source = \"var __t,__p='',__j=Array.prototype.join,\" +\n    \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n    source + 'return __p;\\n';\n\n  var render;\n  try {\n    render = new Function(argument, '_', source);\n  } catch (e) {\n    e.source = source;\n    throw e;\n  }\n\n  var template = function(data) {\n    return render.call(this, data, _);\n  };\n\n  // Provide the compiled source as a convenience for precompilation.\n  template.source = 'function(' + argument + '){\\n' + source + '}';\n\n  return template;\n}\n","import _ from './underscore.js';\n\n// By default, Underscore uses ERB-style template delimiters. Change the\n// following template settings to use alternative delimiters.\nexport default _.templateSettings = {\n  evaluate: /<%([\\s\\S]+?)%>/g,\n  interpolate: /<%=([\\s\\S]+?)%>/g,\n  escape: /<%-([\\s\\S]+?)%>/g\n};\n","import now from './now.js';\n\n// Returns a function, that, when invoked, will only be triggered at most once\n// during a given window of time. Normally, the throttled function will run\n// as much as it can, without ever going more than once per `wait` duration;\n// but if you'd like to disable the execution on the leading edge, pass\n// `{leading: false}`. To disable execution on the trailing edge, ditto.\nexport default function throttle(func, wait, options) {\n  var timeout, context, args, result;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function() {\n    var _now = now();\n    if (!previous && options.leading === false) previous = _now;\n    var remaining = wait - (_now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function() {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n","import optimizeCb from './_optimizeCb.js';\n\n// Run a function **n** times.\nexport default function times(n, iteratee, context) {\n  var accum = Array(Math.max(0, n));\n  iteratee = optimizeCb(iteratee, context, 1);\n  for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n  return accum;\n}\n","import isArray from './isArray.js';\nimport { slice } from './_setup.js';\nimport isString from './isString.js';\nimport isArrayLike from './_isArrayLike.js';\nimport map from './map.js';\nimport identity from './identity.js';\nimport values from './values.js';\n\n// Safely create a real, live array from anything iterable.\nvar reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\nexport default function toArray(obj) {\n  if (!obj) return [];\n  if (isArray(obj)) return slice.call(obj);\n  if (isString(obj)) {\n    // Keep surrogate pair characters together.\n    return obj.match(reStrSymbol);\n  }\n  if (isArrayLike(obj)) return map(obj, identity);\n  return values(obj);\n}\n","import _ from './underscore.js';\nimport isArray from './isArray.js';\n\n// Normalize a (deep) property `path` to array.\n// Like `_.iteratee`, this function can be customized.\nexport default function toPath(path) {\n  return isArray(path) ? path : [path];\n}\n_.toPath = toPath;\n","import _ from './underscore.js';\nimport each from './each.js';\nimport { ArrayProto } from './_setup.js';\nimport chainResult from './_chainResult.js';\n\n// Add all mutator `Array` functions to the wrapper.\neach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n  var method = ArrayProto[name];\n  _.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) {\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n        delete obj[0];\n      }\n    }\n    return chainResult(this, obj);\n  };\n});\n\n// Add all accessor `Array` functions to the wrapper.\neach(['concat', 'join', 'slice'], function(name) {\n  var method = ArrayProto[name];\n  _.prototype[name] = function() {\n    var obj = this._wrapped;\n    if (obj != null) obj = method.apply(obj, arguments);\n    return chainResult(this, obj);\n  };\n});\n\nexport default _;\n","import { VERSION } from './_setup.js';\n\n// If Underscore is called as a function, it returns a wrapped object that can\n// be used OO-style. This wrapper holds altered versions of all functions added\n// through `_.mixin`. Wrapped objects may be chained.\nexport default function _(obj) {\n  if (obj instanceof _) return obj;\n  if (!(this instanceof _)) return new _(obj);\n  this._wrapped = obj;\n}\n\n_.VERSION = VERSION;\n\n// Extracts the result from a wrapped and chained object.\n_.prototype.value = function() {\n  return this._wrapped;\n};\n\n// Provide unwrapping proxies for some methods used in engine operations\n// such as arithmetic and JSON stringification.\n_.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n_.prototype.toString = function() {\n  return String(this._wrapped);\n};\n","import createEscaper from './_createEscaper.js';\nimport unescapeMap from './_unescapeMap.js';\n\n// Function for unescaping strings from HTML interpolation.\nexport default createEscaper(unescapeMap);\n","import restArguments from './restArguments.js';\nimport uniq from './uniq.js';\nimport flatten from './_flatten.js';\n\n// Produce an array that contains the union: each distinct element from all of\n// the passed-in arrays.\nexport default restArguments(function(arrays) {\n  return uniq(flatten(arrays, true, true));\n});\n","import isBoolean from './isBoolean.js';\nimport cb from './_cb.js';\nimport getLength from './_getLength.js';\nimport contains from './contains.js';\n\n// Produce a duplicate-free version of the array. If the array has already\n// been sorted, you have the option of using a faster algorithm.\n// The faster algorithm will not work with an iteratee if the iteratee\n// is not a one-to-one function, so providing an iteratee will disable\n// the faster algorithm.\nexport default function uniq(array, isSorted, iteratee, context) {\n  if (!isBoolean(isSorted)) {\n    context = iteratee;\n    iteratee = isSorted;\n    isSorted = false;\n  }\n  if (iteratee != null) iteratee = cb(iteratee, context);\n  var result = [];\n  var seen = [];\n  for (var i = 0, length = getLength(array); i < length; i++) {\n    var value = array[i],\n        computed = iteratee ? iteratee(value, i, array) : value;\n    if (isSorted && !iteratee) {\n      if (!i || seen !== computed) result.push(value);\n      seen = computed;\n    } else if (iteratee) {\n      if (!contains(seen, computed)) {\n        seen.push(computed);\n        result.push(value);\n      }\n    } else if (!contains(result, value)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n","// Generate a unique integer id (unique within the entire client session).\n// Useful for temporary DOM ids.\nvar idCounter = 0;\nexport default function uniqueId(prefix) {\n  var id = ++idCounter + '';\n  return prefix ? prefix + id : id;\n}\n","import max from './max.js';\nimport getLength from './_getLength.js';\nimport pluck from './pluck.js';\n\n// Complement of zip. Unzip accepts an array of arrays and groups\n// each array's elements on shared indices.\nexport default function unzip(array) {\n  var length = (array && max(array, getLength).length) || 0;\n  var result = Array(length);\n\n  for (var index = 0; index < length; index++) {\n    result[index] = pluck(array, index);\n  }\n  return result;\n}\n","import keys from './keys.js';\n\n// Retrieve the values of an object's properties.\nexport default function values(obj) {\n  var _keys = keys(obj);\n  var length = _keys.length;\n  var values = Array(length);\n  for (var i = 0; i < length; i++) {\n    values[i] = obj[_keys[i]];\n  }\n  return values;\n}\n","import filter from './filter.js';\nimport matcher from './matcher.js';\n\n// Convenience version of a common use case of `_.filter`: selecting only\n// objects containing specific `key:value` pairs.\nexport default function where(obj, attrs) {\n  return filter(obj, matcher(attrs));\n}\n","import restArguments from './restArguments.js';\nimport difference from './difference.js';\n\n// Return a version of the array that does not contain the specified value(s).\nexport default restArguments(function(array, otherArrays) {\n  return difference(array, otherArrays);\n});\n","import partial from './partial.js';\n\n// Returns the first function passed as an argument to the second,\n// allowing you to adjust arguments, run code before and after, and\n// conditionally execute the original function.\nexport default function wrap(func, wrapper) {\n  return partial(wrapper, func);\n}\n","import restArguments from './restArguments.js';\nimport unzip from './unzip.js';\n\n// Zip together multiple lists into a single array -- elements that share\n// an index go together.\nexport default restArguments(unzip);\n","import '../helpers';\n\nconst { sqrt, atan2 } = Math;\n\nclass Point {\n  public x: number;\n  public y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  static property = Function.prototype.property;\n\n  get length(): number {\n    return sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  get direction(): number {\n    return atan2(this.y, this.x);\n  }\n\n  get normalized(): Point {\n    return new Point(this.x / this.length, this.y / this.length);\n  }\n\n  add(o: Point): Point {\n    return new Point(this.x + o.x, this.y + o.y);\n  }\n\n  subtract(o: Point): Point {\n    return new Point(this.x - o.x, this.y - o.y);\n  }\n\n  mult(k: number): Point {\n    return new Point(this.x * k, this.y * k);\n  }\n\n  divide(k: number): Point {\n    return new Point(this.x / k, this.y / k);\n  }\n}\n\n// Set up properties using the CoffeeScript-style property decorator\nPoint.property('length', {\n  get: function(this: Point) {\n    return sqrt(this.x * this.x + this.y * this.y);\n  }\n});\n\nPoint.property('direction', {\n  get: function(this: Point) {\n    return atan2(this.y, this.x);\n  }\n});\n\nPoint.property('normalized', {\n  get: function(this: Point) {\n    return new Point(this.x / this.length, this.y / this.length);\n  }\n});\n\nexport = Point;\n","import '../helpers';\nimport _ = require('underscore');\nimport Point = require('./point');\nimport Segment = require('./segment');\n\nconst { abs } = Math;\n\nclass Rect {\n  public x: number;\n  public y: number;\n  public _width: number;\n  public _height: number;\n\n  constructor(x: number, y: number, _width: number = 0, _height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this._width = _width;\n    this._height = _height;\n  }\n\n  static copy(rect: Rect): Rect {\n    return new Rect(rect.x, rect.y, rect._width, rect._height);\n  }\n\n  toJSON(): any {\n    return _.extend({}, this);\n  }\n\n  area(): number {\n    return this.width() * this.height();\n  }\n\n  left(left?: number): number {\n    if (left !== undefined) {\n      this.x = left;\n    }\n    return this.x;\n  }\n\n  right(right?: number): number {\n    if (right !== undefined) {\n      this.x = right - this.width();\n    }\n    return this.x + this.width();\n  }\n\n  width(width?: number): number {\n    if (width !== undefined) {\n      this._width = width;\n    }\n    return this._width;\n  }\n\n  top(top?: number): number {\n    if (top !== undefined) {\n      this.y = top;\n    }\n    return this.y;\n  }\n\n  bottom(bottom?: number): number {\n    if (bottom !== undefined) {\n      this.y = bottom - this.height();\n    }\n    return this.y + this.height();\n  }\n\n  height(height?: number): number {\n    if (height !== undefined) {\n      this._height = height;\n    }\n    return this._height;\n  }\n\n  center(center?: Point): Point {\n    if (center) {\n      this.x = center.x - this.width() / 2;\n      this.y = center.y - this.height() / 2;\n    }\n    return new Point(this.x + this.width() / 2, this.y + this.height() / 2);\n  }\n\n  containsPoint(point: Point): boolean {\n    return this.left() <= point.x && point.x <= this.right() && \n           this.top() <= point.y && point.y <= this.bottom();\n  }\n\n  containsRect(rect: Rect): boolean {\n    return this.left() <= rect.left() && rect.right() <= this.right() &&\n           this.top() <= rect.top() && rect.bottom() <= this.bottom();\n  }\n\n  getVertices(): Point[] {\n    return [\n      new Point(this.left(), this.top()),\n      new Point(this.right(), this.top()),\n      new Point(this.right(), this.bottom()),\n      new Point(this.left(), this.bottom()),\n    ];\n  }\n\n  getSide(i: number): Segment {\n    const vertices = this.getVertices();\n    return new Segment(vertices[i], vertices[(i + 1) % 4]);\n  }\n\n  getSectorId(point: Point): number {\n    const offset = point.subtract(this.center());\n    if (offset.y <= 0 && abs(offset.x) <= abs(offset.y)) {\n      return 0;\n    }\n    if (offset.x >= 0 && abs(offset.x) >= abs(offset.y)) {\n      return 1;\n    }\n    if (offset.y >= 0 && abs(offset.x) <= abs(offset.y)) {\n      return 2;\n    }\n    if (offset.x <= 0 && abs(offset.x) >= abs(offset.y)) {\n      return 3;\n    }\n    throw new Error('algorithm error');\n  }\n\n  getSector(point: Point): Segment {\n    return this.getSide(this.getSectorId(point));\n  }\n}\n\nexport = Rect;\n","import '../helpers';\nimport Point = require('./point');\n\nclass Segment {\n  public source: Point;\n  public target: Point;\n\n  constructor(source: Point, target: Point) {\n    this.source = source;\n    this.target = target;\n  }\n\n  get vector(): Point {\n    return this.target.subtract(this.source);\n  }\n\n  get length(): number {\n    return this.vector.length;\n  }\n\n  get direction(): number {\n    return this.vector.direction;\n  }\n\n  get center(): Point {\n    return this.getPoint(0.5);\n  }\n\n  split(n: number, reverse?: boolean): Segment[] {\n    const order = reverse ? \n      Array.from({ length: n }, (_, i) => n - 1 - i) : \n      Array.from({ length: n }, (_, i) => i);\n    \n    return order.map(k => this.subsegment(k / n, (k + 1) / n));\n  }\n\n  getPoint(a: number): Point {\n    return this.source.add(this.vector.mult(a));\n  }\n\n  subsegment(a: number, b: number): Segment {\n    const offset = this.vector;\n    const start = this.source.add(offset.mult(a));\n    const end = this.source.add(offset.mult(b));\n    return new Segment(start, end);\n  }\n}\n\n// Set up properties using the CoffeeScript-style property decorator\nSegment.property('vector', {\n  get: function(this: Segment) {\n    return this.target.subtract(this.source);\n  }\n});\n\nSegment.property('length', {\n  get: function(this: Segment) {\n    return this.vector.length;\n  }\n});\n\nSegment.property('direction', {\n  get: function(this: Segment) {\n    return this.vector.direction;\n  }\n});\n\nSegment.property('center', {\n  get: function(this: Segment) {\n    return this.getPoint(0.5);\n  }\n});\n\nexport = Segment;\n","// TypeScript equivalent of CoffeeScript property decorator functionality\n\nexport {};\n\ndeclare global {\n  interface Function {\n    property(prop: string, desc: PropertyDescriptor): void;\n  }\n}\n\nFunction.prototype.property = function(prop: string, desc: PropertyDescriptor) {\n  Object.defineProperty(this.prototype, prop, desc);\n};\n","import '../helpers';\nimport settings = require('../settings');\n\nconst { random } = Math;\n\ninterface Intersection {\n  roads: any[];\n}\n\nclass ControlSignals {\n  public intersection: Intersection;\n  public flipMultiplier: number;\n  public phaseOffset: number;\n  public time: number;\n  public stateNum: number;\n  public lastFlipTime: number;\n\n  // Traffic light states\n  static STATE = { RED: 0, GREEN: 1 };\n\n  // Traffic signal patterns for intersections\n  // 'L' = Left turn, 'F' = Forward, 'R' = Right turn\n  // Each array represents a phase of the traffic light cycle\n  // Each element in the array represents a direction (N, E, S, W)\n  states = [\n    ['L', '', 'L', ''],       // Phase 1: North & South left turns\n    ['FR', '', 'FR', ''],     // Phase 2: North & South forward and right\n    ['', 'L', '', 'L'],       // Phase 3: East & West left turns\n    ['', 'FR', '', 'FR']      // Phase 4: East & West forward and right\n  ];\n\n  constructor(intersection: Intersection) {\n    this.intersection = intersection;\n    this.flipMultiplier = random();  // Randomize cycle timing for variety\n    this.phaseOffset = 100 * random(); // Randomize starting phase\n    this.time = this.phaseOffset;\n    this.stateNum = 0;\n    this.lastFlipTime = 0;\n  }\n\n  static copy(controlSignals: any, intersection: Intersection): ControlSignals {\n    if (!controlSignals) {\n      return new ControlSignals(intersection);\n    }\n    \n    // Create a proper instance with the correct prototype\n    const result = new ControlSignals(intersection);\n    \n    // Copy over the data properties\n    result.flipMultiplier = controlSignals.flipMultiplier || Math.random();\n    result.phaseOffset = controlSignals.phaseOffset || 100 * Math.random();\n    result.time = result.phaseOffset;\n    result.stateNum = controlSignals.stateNum || 0;\n    result.lastFlipTime = 0;\n    \n    // Ensure we have the proper states array if it was serialized\n    result.states = controlSignals.states || [\n      ['L', '', 'L', ''],\n      ['FR', '', 'FR', ''],\n      ['', 'L', '', 'L'],\n      ['', 'FR', '', 'FR']\n    ];\n    \n    return result;\n  }\n\n  toJSON(): any {\n    return {\n      flipMultiplier: this.flipMultiplier,\n      phaseOffset: this.phaseOffset,\n      stateNum: this.stateNum,\n      states: this.states\n    };\n  }\n\n  // Calculate the interval between light changes based on the flipMultiplier\n  get flipInterval(): number {\n    // This formula matches the reference implementation\n    return (0.1 + 0.05 * this.flipMultiplier) * settings.lightsFlipInterval;\n  }\n\n  // Convert string representation to numeric state array\n  // e.g., \"LFR\" -> [1,1,1] (left, forward, right allowed)\n  public _decode(str: string): number[] {\n    const state = [0, 0, 0];\n    if (str.includes('L')) state[0] = 1;\n    if (str.includes('F')) state[1] = 1;\n    if (str.includes('R')) state[2] = 1;\n    return state;\n  }\n\n  // Get the current state of all traffic lights\n  get state(): number[][] {\n    let stringState = this.states[this.stateNum % this.states.length];\n    \n    // For 2-way or T-intersections, always allow all movements\n    if (this.intersection.roads && this.intersection.roads.length <= 2) {\n      stringState = ['LFR', 'LFR', 'LFR', 'LFR'];\n    }\n    \n    // Convert string patterns to numeric state arrays\n    return stringState.map(x => this._decode(x));\n  }\n\n  // Advance to the next traffic light phase\n  flip(): void {\n    this.stateNum += 1;\n    this.lastFlipTime = this.time;\n  }\n\n  // Update the traffic light state based on elapsed time\n  onTick = (delta: number): void => {\n    // Update timer\n    this.time += delta;\n    \n    // When the interval is reached, change the light\n    if (this.time > this.lastFlipTime + this.flipInterval) {\n      this.flip();\n    }\n  }\n}\n\n// Set up properties using the CoffeeScript-style property decorator\nControlSignals.property('flipInterval', {\n  get: function(this: ControlSignals) {\n    return (0.1 + 0.05 * this.flipMultiplier) * settings.lightsFlipInterval;\n  }\n});\n\nControlSignals.property('state', {\n  get: function(this: ControlSignals) {\n    let stringState = this.states[this.stateNum % this.states.length];\n    \n    // For 2-way or T-intersections, always allow all movements\n    if (this.intersection.roads && this.intersection.roads.length <= 2) {\n      stringState = ['LFR', 'LFR', 'LFR', 'LFR'];\n    }\n    \n    // Convert string patterns to numeric state arrays\n    return stringState.map(x => this._decode(x));\n  }\n});\n\nexport = ControlSignals;\n","import '../helpers';\nimport _ = require('underscore');\nimport Rect = require('../geom/rect');\nimport TrafficLightController = require('./traffic-control/TrafficLightController');\nimport ControlSignals = require('./control-signals'); // Keep for backward compatibility\n\nclass Intersection {\n  public rect: Rect;\n  public id: string;\n  public roads: any[];\n  public inRoads: any[];\n  public trafficLightController: TrafficLightController;\n  \n  // For backward compatibility\n  public get controlSignals(): any {\n    console.warn('Deprecated: controlSignals is deprecated. Use trafficLightController instead.');\n    return this._legacyControlSignals;\n  }\n  \n  public set controlSignals(value: any) {\n    console.warn('Deprecated: Setting controlSignals is deprecated. Use trafficLightController instead.');\n    this._legacyControlSignals = value;\n  }\n  \n  private _legacyControlSignals: any;\n\n  constructor(rect: Rect) {\n    this.rect = rect;\n    this.id = _.uniqueId('intersection');\n    this.roads = [];\n    this.inRoads = [];\n    \n    // Initialize the traffic light controller\n    this.trafficLightController = new TrafficLightController(this);\n    \n    // Initialize legacy control signals for backward compatibility\n    this._legacyControlSignals = new ControlSignals(this);\n  }\n\n  static copy(intersection: any): Intersection {\n    intersection.rect = Rect.copy(intersection.rect);\n    const result = Object.create(Intersection.prototype);\n    _.extend(result, intersection);\n    result.roads = [];\n    result.inRoads = [];\n    \n    // Initialize the traffic light controller with the intersection\n    if (intersection.trafficLightController) {\n      result.trafficLightController = TrafficLightController.copy(\n        intersection.trafficLightController, \n        result\n      );\n    } else {\n      result.trafficLightController = new TrafficLightController(result);\n    }\n    \n    // For backward compatibility\n    if (intersection.controlSignals) {\n      result._legacyControlSignals = ControlSignals.copy(intersection.controlSignals, result);\n    } else {\n      result._legacyControlSignals = new ControlSignals(result);\n    }\n    \n    return result;\n  }\n\n  toJSON(): any {\n    return {\n      id: this.id,\n      rect: this.rect,\n      trafficLightController: this.trafficLightController,\n      // Include controlSignals for backward compatibility\n      controlSignals: this._legacyControlSignals\n    };\n  }\n\n  update(): void {\n    // Update connected roads\n    for (const road of this.roads) {\n      road.update();\n    }\n    for (const road of this.inRoads) {\n      road.update();\n    }\n  }\n  \n  /**\n   * Process a simulation tick\n   * @param delta Time elapsed since last tick in seconds\n   */\n  onTick(delta: number): void {\n    // Delegate to the traffic light controller\n    if (this.trafficLightController) {\n      this.trafficLightController.onTick(delta);\n    }\n    \n    // For backward compatibility\n    if (this._legacyControlSignals && this._legacyControlSignals.onTick) {\n      this._legacyControlSignals.onTick(delta);\n    }\n  }\n  \n  /**\n   * Get the current traffic signal state\n   * @returns A 2D array where [approach][movement] represents the signal state\n   *          (0 = RED, 1 = GREEN) for each approach (N,E,S,W) and movement (L,F,R)\n   */\n  getSignalState(): number[][] {\n    // Get state from the traffic light controller\n    if (this.trafficLightController) {\n      return this.trafficLightController.state;\n    }\n    \n    // Fallback to legacy control signals for backward compatibility\n    if (this._legacyControlSignals) {\n      return this._legacyControlSignals.state;\n    }\n    \n    // Default to all red if no controller is available\n    return [[0,0,0], [0,0,0], [0,0,0], [0,0,0]];\n  }\n  \n  /**\n   * Set the traffic control strategy\n   * @param strategyType The type of strategy to use\n   * @returns True if the strategy was successfully applied, false otherwise\n   */\n  setTrafficControlStrategy(strategyType: string): boolean {\n    if (this.trafficLightController) {\n      return this.trafficLightController.setStrategy(strategyType);\n    }\n    return false;\n  }\n}\n\nexport = Intersection;\n","/**\r\n * KPICollector - Collects and aggregates Key Performance Indicators for the traffic simulation\r\n * \r\n * This class is responsible for:\r\n * - Recording events from vehicles, lanes, and intersections\r\n * - Calculating metrics based on these events\r\n * - Providing an API for the UI to display these metrics\r\n */\r\n\r\nimport { appState } from '../core/AppState';\r\nimport { Car as CarInterface, NextCarDistance } from '../interfaces';\r\nimport Car = require('./car');\r\nimport Road = require('./road');\r\nimport Intersection = require('./intersection');\r\nimport _ = require('underscore');\r\n\r\n// Define interfaces for metric tracking\r\nexport interface VehicleMetric {\r\n  vehicleId: string;\r\n  timestamp: number;\r\n  speed: number;\r\n  position?: { x: number; y: number };\r\n  event: VehicleEvent;\r\n  duration?: number; // For stopped events\r\n  oldSpeed?: number; // For speed change events\r\n  intersectionId?: string; // For intersection entry/exit events\r\n  laneId?: string; // For lane-specific events\r\n  roadId?: string; // For road-specific events\r\n}\r\n\r\nexport enum VehicleEvent {\r\n  ENTER_SIMULATION = 'enter_simulation',\r\n  EXIT_SIMULATION = 'exit_simulation',\r\n  ENTER_INTERSECTION = 'enter_intersection',\r\n  EXIT_INTERSECTION = 'exit_intersection',\r\n  START_MOVING = 'start_moving',\r\n  STOP_MOVING = 'stop_moving',\r\n  CHANGE_LANE = 'change_lane',\r\n  SPEED_CHANGE = 'speed_change',\r\n  ENTER_LANE = 'enter_lane',\r\n  EXIT_LANE = 'exit_lane'\r\n}\r\n\r\nexport interface IntersectionMetric {\r\n  intersectionId: string;\r\n  timestamp: number;\r\n  queueLength: number;\r\n  waitTime?: number;\r\n  signalPhase?: number;\r\n  throughput?: number; // Vehicles per minute passing through\r\n}\r\n\r\nexport interface LaneMetric {\r\n  laneId: string;\r\n  timestamp: number;\r\n  vehicleCount: number;\r\n  averageSpeed: number; \r\n  congestionRate: number; // 0-1 value representing congestion level\r\n  queueLength?: number;\r\n}\r\n\r\nexport interface SimulationMetrics {\r\n  totalVehicles: number;\r\n  activeVehicles: number;\r\n  completedTrips: number;\r\n  averageSpeed: number;\r\n  averageWaitTime: number;\r\n  maxWaitTime: number;\r\n  totalStops: number;\r\n  stoppedVehicles: number;\r\n  intersectionUtilization: { [intersectionId: string]: number };\r\n  roadUtilization: { [roadId: string]: number };\r\n  simulationTime: number;\r\n  \r\n  // New expanded metrics\r\n  laneMetrics: { [laneId: string]: LaneDetailedMetrics };\r\n  intersectionMetrics: { [intersectionId: string]: IntersectionDetailedMetrics };\r\n  globalThroughput: number; // Vehicles per minute for entire simulation\r\n  congestionIndex: number; // Overall congestion index (0-1)\r\n}\r\n\r\n// Detailed metrics for lanes\r\nexport interface LaneDetailedMetrics {\r\n  laneId: string;\r\n  averageSpeed: number;\r\n  vehicleCount: number;\r\n  maxVehicleCount: number;\r\n  averageVehicleCount: number;\r\n  congestionRate: number; // 0-1 ratio of vehicle count to capacity\r\n  throughput: number; // Vehicles per minute\r\n  totalVehiclesPassed: number;\r\n  averageWaitTime: number;\r\n  queueLength: number; // Average queue length\r\n}\r\n\r\n// Detailed metrics for intersections\r\nexport interface IntersectionDetailedMetrics {\r\n  intersectionId: string;\r\n  throughput: number; // Vehicles per minute\r\n  averageWaitTime: number;\r\n  maxWaitTime: number;\r\n  averageQueueLength: number;\r\n  maxQueueLength: number;\r\n  totalVehiclesPassed: number;\r\n  congestionRate: number; // Based on queue length and wait time\r\n}\r\n\r\nexport class KPICollector {\r\n  // Store metrics\r\n  private vehicleMetrics: VehicleMetric[] = [];\r\n  private intersectionMetrics: IntersectionMetric[] = [];\r\n  private laneMetrics: LaneMetric[] = [];\r\n  private activeVehicles: Set<string> = new Set();\r\n  private stoppedVehicles: Set<string> = new Set();\r\n  private stoppedTimestamps: { [vehicleId: string]: number } = {};\r\n  private completedTrips: number = 0;\r\n  private simulationStartTime: number = 0;\r\n\r\n  // Summary metrics (calculated on demand)\r\n  private totalSpeed: number = 0;\r\n  private speedMeasurements: number = 0;\r\n  private waitTimes: number[] = [];\r\n  \r\n  // Lane tracking\r\n  private vehiclesInLane: { [laneId: string]: Set<string> } = {}; // laneId -> Set of vehicleIds\r\n  private laneEntryTimes: { [vehicleId: string]: { [laneId: string]: number } } = {}; // vehicleId -> {laneId -> entryTime}\r\n  private laneThroughput: { [laneId: string]: number } = {}; // laneId -> count\r\n  private laneWaitTimes: { [laneId: string]: number[] } = {}; // laneId -> waitTimes array\r\n  private laneTotalSpeeds: { [laneId: string]: { total: number, count: number } } = {}; // laneId -> {total, count}\r\n  \r\n  // Intersection tracking\r\n  private intersectionEntryTimes: { [vehicleId: string]: { [intersectionId: string]: number } } = {}; // vehicleId -> {intersectionId -> entryTime}\r\n  private intersectionThroughput: { [intersectionId: string]: number } = {}; // intersectionId -> count\r\n  private intersectionWaitTimes: { [intersectionId: string]: number[] } = {}; // intersectionId -> waitTimes array\r\n  private intersectionQueueHistory: { [intersectionId: string]: number[] } = {}; // intersectionId -> queueLengths array\r\n  \r\n  // Settings\r\n  private readonly sampleInterval: number = 0.5; // How often to sample speed (in simulation seconds)\r\n  private lastSampleTime: number = 0;\r\n  private isRecording: boolean = false;\r\n  private cleanupTimeout: number | null = null;\r\n\r\n  constructor() {\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * Start collecting metrics\r\n   */\r\n  public startRecording(initialTime: number = 0): void {\r\n    this.isRecording = true;\r\n    this.simulationStartTime = initialTime;\r\n    this.lastSampleTime = initialTime;\r\n    console.log('🔄 KPI Collector: Started recording metrics');\r\n  }\r\n\r\n  /**\r\n   * Stop collecting metrics\r\n   */\r\n  public stopRecording(): void {\r\n    this.isRecording = false;\r\n    console.log('🛑 KPI Collector: Stopped recording metrics');\r\n  }\r\n\r\n  /**\r\n   * Reset all collected metrics\r\n   */\r\n  public reset(): void {\r\n    this.vehicleMetrics = [];\r\n    this.intersectionMetrics = [];\r\n    this.laneMetrics = [];\r\n    this.activeVehicles = new Set();\r\n    this.stoppedVehicles = new Set();\r\n    this.stoppedTimestamps = {};\r\n    this.completedTrips = 0;\r\n    this.simulationStartTime = 0;\r\n    this.totalSpeed = 0;\r\n    this.speedMeasurements = 0;\r\n    this.waitTimes = [];\r\n    this.isRecording = false;\r\n    \r\n    // Reset lane tracking\r\n    this.vehiclesInLane = {};\r\n    this.laneEntryTimes = {};\r\n    this.laneThroughput = {};\r\n    this.laneWaitTimes = {};\r\n    this.laneTotalSpeeds = {};\r\n    \r\n    // Reset intersection tracking\r\n    this.intersectionEntryTimes = {};\r\n    this.intersectionThroughput = {};\r\n    this.intersectionWaitTimes = {};\r\n    this.intersectionQueueHistory = {};\r\n    \r\n    if (this.cleanupTimeout !== null) {\r\n      clearTimeout(this.cleanupTimeout);\r\n      this.cleanupTimeout = null;\r\n    }\r\n\r\n    console.log('🗑️ KPI Collector: Metrics reset');\r\n  }\r\n\r\n  /**\r\n   * Record vehicle entering the simulation\r\n   */\r\n  public recordVehicleEnter(vehicle: Car, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    this.activeVehicles.add(vehicle.id);\r\n    \r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      event: VehicleEvent.ENTER_SIMULATION\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Record vehicle exiting the simulation\r\n   */\r\n  public recordVehicleExit(vehicle: Car, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    this.activeVehicles.delete(vehicle.id);\r\n    this.completedTrips++;\r\n    \r\n    // If vehicle was stopped, clear that state\r\n    if (this.stoppedVehicles.has(vehicle.id)) {\r\n      this.stoppedVehicles.delete(vehicle.id);\r\n      delete this.stoppedTimestamps[vehicle.id];\r\n    }\r\n    \r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      event: VehicleEvent.EXIT_SIMULATION\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Record vehicle stopping (speed ~= 0)\r\n   */\r\n  public recordVehicleStop(vehicle: Car, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    // Only record if vehicle wasn't already stopped\r\n    if (!this.stoppedVehicles.has(vehicle.id)) {\r\n      this.stoppedVehicles.add(vehicle.id);\r\n      this.stoppedTimestamps[vehicle.id] = time;\r\n      \r\n      this.vehicleMetrics.push({\r\n        vehicleId: vehicle.id,\r\n        timestamp: time,\r\n        speed: vehicle.speed,\r\n        position: vehicle.coords,\r\n        event: VehicleEvent.STOP_MOVING\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record vehicle starting to move again\r\n   */\r\n  public recordVehicleStart(vehicle: Car, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    // Only record if vehicle was stopped\r\n    if (this.stoppedVehicles.has(vehicle.id)) {\r\n      const stoppedTime = time - this.stoppedTimestamps[vehicle.id];\r\n      this.stoppedVehicles.delete(vehicle.id);\r\n      delete this.stoppedTimestamps[vehicle.id];\r\n      \r\n      // Record wait time for analytics\r\n      this.waitTimes.push(stoppedTime);\r\n      \r\n      this.vehicleMetrics.push({\r\n        vehicleId: vehicle.id,\r\n        timestamp: time,\r\n        speed: vehicle.speed,\r\n        duration: stoppedTime,\r\n        event: VehicleEvent.START_MOVING\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record vehicle changing lanes\r\n   */\r\n  public recordLaneChange(vehicle: Car, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      event: VehicleEvent.CHANGE_LANE\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Record vehicle entering an intersection\r\n   */\r\n  public recordIntersectionEnter(vehicle: Car, intersection: Intersection, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    const intersectionId = intersection.id;\r\n    \r\n    // Initialize intersection tracking structures if needed\r\n    if (!this.intersectionEntryTimes[vehicle.id]) {\r\n      this.intersectionEntryTimes[vehicle.id] = {};\r\n    }\r\n    if (!this.intersectionQueueHistory[intersectionId]) {\r\n      this.intersectionQueueHistory[intersectionId] = [];\r\n    }\r\n    \r\n    // Record entry time for calculating wait time later\r\n    this.intersectionEntryTimes[vehicle.id][intersectionId] = time;\r\n    \r\n    // Record the vehicle event\r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      intersectionId: intersectionId,\r\n      event: VehicleEvent.ENTER_INTERSECTION\r\n    });\r\n    \r\n    // Update intersection metrics\r\n    const queueLength = this.getVehiclesAtIntersection(intersectionId).length;\r\n    \r\n    // Store queue length history\r\n    this.intersectionQueueHistory[intersectionId].push(queueLength);\r\n    \r\n    // Record updated intersection metrics\r\n    this.intersectionMetrics.push({\r\n      intersectionId: intersectionId,\r\n      timestamp: time,\r\n      queueLength: queueLength\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Record vehicle exiting an intersection\r\n   */\r\n  public recordIntersectionExit(vehicle: Car, intersection: Intersection, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    const intersectionId = intersection.id;\r\n    \r\n    // Initialize tracking if needed\r\n    if (!this.intersectionEntryTimes[vehicle.id]) {\r\n      this.intersectionEntryTimes[vehicle.id] = {};\r\n    }\r\n    if (!this.intersectionThroughput[intersectionId]) {\r\n      this.intersectionThroughput[intersectionId] = 0;\r\n    }\r\n    if (!this.intersectionWaitTimes[intersectionId]) {\r\n      this.intersectionWaitTimes[intersectionId] = [];\r\n    }\r\n    \r\n    // Calculate wait time for the vehicle at this intersection\r\n    if (this.intersectionEntryTimes[vehicle.id][intersectionId]) {\r\n      const waitTime = time - this.intersectionEntryTimes[vehicle.id][intersectionId];\r\n      this.intersectionWaitTimes[intersectionId].push(waitTime);\r\n      delete this.intersectionEntryTimes[vehicle.id][intersectionId];\r\n    }\r\n    \r\n    // Increment throughput counter\r\n    this.intersectionThroughput[intersectionId]++;\r\n    \r\n    // Record the vehicle event\r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      intersectionId: intersectionId,\r\n      event: VehicleEvent.EXIT_INTERSECTION\r\n    });\r\n    \r\n    // Update intersection metrics\r\n    const queueLength = this.getVehiclesAtIntersection(intersectionId).length;\r\n    \r\n    // Update queue length history\r\n    if (!this.intersectionQueueHistory[intersectionId]) {\r\n      this.intersectionQueueHistory[intersectionId] = [];\r\n    }\r\n    this.intersectionQueueHistory[intersectionId].push(queueLength);\r\n    \r\n    // Record updated intersection metrics\r\n    this.intersectionMetrics.push({\r\n      intersectionId: intersectionId,\r\n      timestamp: time,\r\n      queueLength: queueLength,\r\n      // Calculate throughput as vehicles per minute (based on simulation time)\r\n      throughput: this.calculateIntersectionThroughput(intersectionId, time)\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Calculate vehicles per minute throughput for an intersection\r\n   */\r\n  private calculateIntersectionThroughput(intersectionId: string, currentTime: number): number {\r\n    const throughput = this.intersectionThroughput[intersectionId] || 0;\r\n    const elapsedMinutes = Math.max(0.001, (currentTime - this.simulationStartTime) / 60);\r\n    return throughput / elapsedMinutes; // Vehicles per minute\r\n  }\r\n\r\n  /**\r\n   * Record a vehicle entering a lane\r\n   */\r\n  public recordLaneEnter(vehicle: Car, lane: any, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    const laneId = lane.id;\r\n    \r\n    // Initialize lane tracking structures if needed\r\n    if (!this.vehiclesInLane[laneId]) {\r\n      this.vehiclesInLane[laneId] = new Set();\r\n    }\r\n    if (!this.laneEntryTimes[vehicle.id]) {\r\n      this.laneEntryTimes[vehicle.id] = {};\r\n    }\r\n    if (!this.laneWaitTimes[laneId]) {\r\n      this.laneWaitTimes[laneId] = [];\r\n    }\r\n    if (!this.laneTotalSpeeds[laneId]) {\r\n      this.laneTotalSpeeds[laneId] = { total: 0, count: 0 };\r\n    }\r\n    \r\n    // Record entry time for calculating wait time later\r\n    this.laneEntryTimes[vehicle.id][laneId] = time;\r\n    \r\n    // Add vehicle to the lane\r\n    this.vehiclesInLane[laneId].add(vehicle.id);\r\n    \r\n    // Update lane metrics\r\n    this.laneMetrics.push({\r\n      laneId: laneId,\r\n      timestamp: time,\r\n      vehicleCount: this.vehiclesInLane[laneId].size,\r\n      averageSpeed: this.calculateLaneAverageSpeed(laneId),\r\n      congestionRate: this.calculateLaneCongestion(lane, this.vehiclesInLane[laneId].size)\r\n    });\r\n    \r\n    // Record the event\r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      laneId: laneId,\r\n      event: VehicleEvent.ENTER_LANE\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Record a vehicle exiting a lane\r\n   */\r\n  public recordLaneExit(vehicle: Car, lane: any, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    const laneId = lane.id;\r\n    \r\n    // Make sure we have tracking data structures\r\n    if (!this.vehiclesInLane[laneId]) {\r\n      this.vehiclesInLane[laneId] = new Set();\r\n    }\r\n    if (!this.laneEntryTimes[vehicle.id]) {\r\n      this.laneEntryTimes[vehicle.id] = {};\r\n    }\r\n    if (!this.laneThroughput[laneId]) {\r\n      this.laneThroughput[laneId] = 0;\r\n    }\r\n    if (!this.laneWaitTimes[laneId]) {\r\n      this.laneWaitTimes[laneId] = [];\r\n    }\r\n    \r\n    // Calculate time spent in lane\r\n    if (this.laneEntryTimes[vehicle.id][laneId]) {\r\n      const timeInLane = time - this.laneEntryTimes[vehicle.id][laneId];\r\n      this.laneWaitTimes[laneId].push(timeInLane);\r\n      delete this.laneEntryTimes[vehicle.id][laneId];\r\n    }\r\n    \r\n    // Remove vehicle from lane\r\n    if (this.vehiclesInLane[laneId]) {\r\n      this.vehiclesInLane[laneId].delete(vehicle.id);\r\n    }\r\n    \r\n    // Increment throughput count\r\n    this.laneThroughput[laneId] = (this.laneThroughput[laneId] || 0) + 1;\r\n    \r\n    // Update lane metrics\r\n    this.laneMetrics.push({\r\n      laneId: laneId,\r\n      timestamp: time,\r\n      vehicleCount: this.vehiclesInLane[laneId]?.size || 0,\r\n      averageSpeed: this.calculateLaneAverageSpeed(laneId),\r\n      congestionRate: this.calculateLaneCongestion(lane, this.vehiclesInLane[laneId]?.size || 0)\r\n    });\r\n    \r\n    // Record the event\r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: vehicle.speed,\r\n      laneId: laneId,\r\n      event: VehicleEvent.EXIT_LANE\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Calculate average speed for a specific lane\r\n   */\r\n  private calculateLaneAverageSpeed(laneId: string): number {\r\n    const laneSpeedData = this.laneTotalSpeeds[laneId];\r\n    if (!laneSpeedData || laneSpeedData.count === 0) {\r\n      return 0;\r\n    }\r\n    return laneSpeedData.total / laneSpeedData.count;\r\n  }\r\n  \r\n  /**\r\n   * Calculate congestion rate for a lane (0-1)\r\n   * Uses vehicle count compared to lane capacity\r\n   */\r\n  private calculateLaneCongestion(lane: any, vehicleCount: number): number {\r\n    // Lane capacity is a reasonable estimate based on lane length and minimum safe distance\r\n    // This is an approximation - actual capacity would depend on lane properties\r\n    const approximateCapacity = lane.length / 10; // Assuming average vehicle + safe distance is ~10 units\r\n    return Math.min(1, vehicleCount / approximateCapacity);\r\n  }\r\n  \r\n  /**\r\n   * Sample the current state of a specific lane\r\n   */\r\n  public sampleLaneState(lane: any, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    const laneId = lane.id;\r\n    if (!this.vehiclesInLane[laneId]) {\r\n      this.vehiclesInLane[laneId] = new Set();\r\n    }\r\n    \r\n    // Count vehicles in the lane\r\n    const vehicleCount = this.vehiclesInLane[laneId].size;\r\n    \r\n    // Calculate congestion rate\r\n    const congestionRate = this.calculateLaneCongestion(lane, vehicleCount);\r\n    \r\n    // Collect speeds of vehicles in the lane to calculate average speed\r\n    let totalSpeed = 0;\r\n    let count = 0;\r\n    \r\n    // This would require a mapping of which vehicles are in which lane\r\n    // We'll update this in the recordLaneEnter/Exit methods\r\n    \r\n    // Add this to our lane metrics\r\n    this.laneMetrics.push({\r\n      laneId: laneId,\r\n      timestamp: time,\r\n      vehicleCount: vehicleCount,\r\n      averageSpeed: this.calculateLaneAverageSpeed(laneId),\r\n      congestionRate: congestionRate,\r\n      queueLength: this.calculateLaneQueueLength(laneId)\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Calculate queue length in a lane based on stopped vehicles\r\n   */\r\n  private calculateLaneQueueLength(laneId: string): number {\r\n    // Count stopped vehicles in the lane\r\n    let queueCount = 0;\r\n    \r\n    if (this.vehiclesInLane[laneId]) {\r\n      this.vehiclesInLane[laneId].forEach(vehicleId => {\r\n        if (this.stoppedVehicles.has(vehicleId)) {\r\n          queueCount++;\r\n        }\r\n      });\r\n    }\r\n    \r\n    return queueCount;\r\n  }\r\n  \r\n  /**\r\n   * Update lane speed metrics when a vehicle's speed changes\r\n   */\r\n  public updateLaneSpeedMetrics(vehicle: Car, laneId: string, speed: number): void {\r\n    if (!this.isRecording || !laneId) return;\r\n    \r\n    // Initialize if needed\r\n    if (!this.laneTotalSpeeds[laneId]) {\r\n      this.laneTotalSpeeds[laneId] = { total: 0, count: 0 };\r\n    }\r\n    \r\n    // Update speed metrics for the lane\r\n    this.laneTotalSpeeds[laneId].total += speed;\r\n    this.laneTotalSpeeds[laneId].count++;\r\n  }\r\n\r\n  /**\r\n   * Sample the current speeds of all vehicles\r\n   * Called periodically to track overall speed metrics\r\n   */\r\n  public sampleSpeeds(vehicles: { [id: string]: Car }, time: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    // Only sample at specific intervals to avoid too much data\r\n    if (time - this.lastSampleTime < this.sampleInterval) {\r\n      return;\r\n    }\r\n    \r\n    this.lastSampleTime = time;\r\n    \r\n    // Calculate average speed from all vehicles\r\n    let totalSpeed = 0;\r\n    let count = 0;\r\n    \r\n    for (const id in vehicles) {\r\n      const vehicle = vehicles[id];\r\n      totalSpeed += vehicle.speed;\r\n      count++;\r\n      \r\n      // Record significant speed changes individually\r\n      // We could implement this based on threshold if needed\r\n    }\r\n    \r\n    if (count > 0) {\r\n      this.totalSpeed += totalSpeed;\r\n      this.speedMeasurements += count;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get currently active vehicles at a specific intersection\r\n   */\r\n  private getVehiclesAtIntersection(intersectionId: string): VehicleMetric[] {\r\n    // This is a simple implementation - in a real system we'd track this more efficiently\r\n    return this.vehicleMetrics.filter(m => \r\n      m.event === VehicleEvent.ENTER_INTERSECTION && \r\n      // Check if there's no corresponding exit event yet\r\n      !this.vehicleMetrics.some(exit => \r\n        exit.vehicleId === m.vehicleId && \r\n        exit.event === VehicleEvent.EXIT_INTERSECTION && \r\n        exit.timestamp > m.timestamp\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the aggregated metrics for display or export\r\n   */\r\n  public getMetrics(currentTime: number = 0): SimulationMetrics {\r\n    // Calculate average speed - give more importance to recent measurements\r\n    const avgSpeed = this.speedMeasurements > 0 \r\n      ? this.totalSpeed / this.speedMeasurements\r\n      : 0;\r\n      \r\n    // Calculate wait times\r\n    const avgWaitTime = this.waitTimes.length > 0\r\n      ? this.waitTimes.reduce((a, b) => a + b, 0) / this.waitTimes.length\r\n      : 0;\r\n    const maxWaitTime = this.waitTimes.length > 0\r\n      ? Math.max(...this.waitTimes)\r\n      : 0;\r\n    \r\n    // Count total stops (unique stop events)\r\n    const totalStops = this.vehicleMetrics.filter(m => \r\n      m.event === VehicleEvent.STOP_MOVING\r\n    ).length;\r\n    \r\n    // Calculate intersection utilization\r\n    // Group metrics by intersection ID manually\r\n    const intersectionMetricsByID: { [id: string]: IntersectionMetric[] } = {};\r\n    \r\n    // Group metrics by intersection ID\r\n    this.intersectionMetrics.forEach(metric => {\r\n      const id = metric.intersectionId;\r\n      if (!intersectionMetricsByID[id]) {\r\n        intersectionMetricsByID[id] = [];\r\n      }\r\n      intersectionMetricsByID[id].push(metric);\r\n    });\r\n    \r\n    const intersectionUtilization: {[id: string]: number} = {};\r\n    \r\n    // Calculate average queue length for each intersection\r\n    Object.entries(intersectionMetricsByID).forEach(([id, metrics]) => {\r\n      let totalQueueLength = 0;\r\n      metrics.forEach(metric => {\r\n        totalQueueLength += metric.queueLength;\r\n      });\r\n      \r\n      const avgQueueLength = metrics.length > 0 ? totalQueueLength / metrics.length : 0;\r\n      intersectionUtilization[id] = avgQueueLength;\r\n    });\r\n    \r\n    // Calculate road utilization based on vehicle positions\r\n    // This is an approximation based on event frequency on roads\r\n    const roadUtilization: {[id: string]: number} = {};\r\n    \r\n    // Get true total vehicle count (all unique vehicles that entered)\r\n    const totalVehicleIDs = new Set(\r\n      this.vehicleMetrics\r\n        .filter(m => m.event === VehicleEvent.ENTER_SIMULATION)\r\n        .map(m => m.vehicleId)\r\n    );\r\n    \r\n    return {\r\n      totalVehicles: totalVehicleIDs.size,\r\n      activeVehicles: this.activeVehicles.size,\r\n      completedTrips: this.completedTrips,\r\n      averageSpeed: avgSpeed,\r\n      averageWaitTime: avgWaitTime,\r\n      maxWaitTime: maxWaitTime,\r\n      totalStops: totalStops,\r\n      stoppedVehicles: this.stoppedVehicles.size,\r\n      intersectionUtilization,\r\n      roadUtilization,\r\n      simulationTime: currentTime - this.simulationStartTime,\r\n      \r\n      // New expanded metrics\r\n      laneMetrics: this.calculateLaneMetrics(),\r\n      intersectionMetrics: this.calculateIntersectionMetrics(),\r\n      globalThroughput: this.calculateGlobalThroughput(),\r\n      congestionIndex: this.calculateCongestionIndex()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate detailed lane metrics\r\n   */\r\n  private calculateLaneMetrics(): { [laneId: string]: LaneDetailedMetrics } {\r\n    const laneMetrics: { [laneId: string]: LaneDetailedMetrics } = {};\r\n    \r\n    // Calculate metrics for each vehicle\r\n    this.vehicleMetrics.forEach(metric => {\r\n      if (metric.event === VehicleEvent.ENTER_LANE || metric.event === VehicleEvent.EXIT_LANE) {\r\n        const laneId = metric.laneId || '';\r\n        if (!laneMetrics[laneId]) {\r\n          laneMetrics[laneId] = {\r\n            laneId: laneId,\r\n            averageSpeed: 0,\r\n            vehicleCount: 0,\r\n            maxVehicleCount: 0,\r\n            averageVehicleCount: 0,\r\n            congestionRate: 0,\r\n            throughput: 0,\r\n            totalVehiclesPassed: 0,\r\n            averageWaitTime: 0,\r\n            queueLength: 0\r\n          };\r\n        }\r\n        \r\n        const laneMetric = laneMetrics[laneId];\r\n        \r\n        // Update counts\r\n        laneMetric.vehicleCount++;\r\n        laneMetric.totalVehiclesPassed++;\r\n        \r\n        // Update speeds\r\n        laneMetric.averageSpeed += metric.speed;\r\n        \r\n        // Update queue length (simple approximation)\r\n        if (metric.event === VehicleEvent.ENTER_LANE) {\r\n          laneMetric.queueLength++;\r\n        } else if (metric.event === VehicleEvent.EXIT_LANE) {\r\n          laneMetric.queueLength = Math.max(0, laneMetric.queueLength - 1);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Finalize metrics calculation\r\n    for (const laneId in laneMetrics) {\r\n      const metric = laneMetrics[laneId];\r\n      metric.averageSpeed /= metric.vehicleCount || 1;\r\n      metric.congestionRate = Math.min(1, metric.queueLength / 10); // Assume max 10 vehicles before congestion\r\n      metric.throughput = metric.totalVehiclesPassed / (this.simulationStartTime + 1); // Per minute\r\n    }\r\n    \r\n    return laneMetrics;\r\n  }\r\n\r\n  /**\r\n   * Calculate detailed intersection metrics\r\n   */\r\n  private calculateIntersectionMetrics(): { [intersectionId: string]: IntersectionDetailedMetrics } {\r\n    const intersectionMetrics: { [intersectionId: string]: IntersectionDetailedMetrics } = {};\r\n    \r\n    // Calculate metrics for each vehicle\r\n    this.vehicleMetrics.forEach(metric => {\r\n      if (metric.event === VehicleEvent.ENTER_INTERSECTION || metric.event === VehicleEvent.EXIT_INTERSECTION) {\r\n        const intersectionId = metric.intersectionId || '';\r\n        if (!intersectionMetrics[intersectionId]) {\r\n          intersectionMetrics[intersectionId] = {\r\n            intersectionId: intersectionId,\r\n            throughput: 0,\r\n            averageWaitTime: 0,\r\n            maxWaitTime: 0,\r\n            averageQueueLength: 0,\r\n            maxQueueLength: 0,\r\n            totalVehiclesPassed: 0,\r\n            congestionRate: 0\r\n          };\r\n        }\r\n        \r\n        const intersectionMetric = intersectionMetrics[intersectionId];\r\n        \r\n        // Update counts\r\n        intersectionMetric.totalVehiclesPassed++;\r\n        \r\n        // Update queue length (simple approximation)\r\n        if (metric.event === VehicleEvent.ENTER_INTERSECTION) {\r\n          intersectionMetric.averageQueueLength++;\r\n        } else if (metric.event === VehicleEvent.EXIT_INTERSECTION) {\r\n          intersectionMetric.averageQueueLength = Math.max(0, intersectionMetric.averageQueueLength - 1);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Finalize metrics calculation\r\n    for (const intersectionId in intersectionMetrics) {\r\n      const metric = intersectionMetrics[intersectionId];\r\n      metric.throughput = metric.totalVehiclesPassed / (this.simulationStartTime + 1); // Per minute\r\n      metric.congestionRate = Math.min(1, metric.averageQueueLength / 10); // Assume max 10 vehicles before congestion\r\n    }\r\n    \r\n    return intersectionMetrics;\r\n  }\r\n\r\n  /**\r\n   * Calculate global throughput (vehicles per minute)\r\n   */\r\n  private calculateGlobalThroughput(): number {\r\n    return this.vehicleMetrics.length / (this.simulationStartTime + 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate congestion index (0-1)\r\n   */\r\n  private calculateCongestionIndex(): number {\r\n    // Simple index based on average queue length across all intersections and lanes\r\n    const totalQueueLength = Object.values(this.calculateLaneMetrics()).reduce((sum, metric) => sum + metric.queueLength, 0) +\r\n                             Object.values(this.calculateIntersectionMetrics()).reduce((sum, metric) => sum + metric.averageQueueLength, 0);\r\n    \r\n    const maxPossibleQueueLength = (Object.keys(this.calculateLaneMetrics()).length + Object.keys(this.calculateIntersectionMetrics()).length) * 10; // Assume max 10 vehicles before congestion per lane/intersection\r\n    return Math.min(1, totalQueueLength / maxPossibleQueueLength);\r\n  }\r\n\r\n  /**\r\n   * Export metrics as CSV format\r\n   */\r\n  public exportMetricsCSV(): string {\r\n    const metrics = this.getMetrics();\r\n    let csv = 'Metric,Value\\n';\r\n    \r\n    // Global metrics\r\n    csv += '# Global Simulation Metrics\\n';\r\n    csv += `Total Vehicles,${metrics.totalVehicles}\\n`;\r\n    csv += `Active Vehicles,${metrics.activeVehicles}\\n`;\r\n    csv += `Completed Trips,${metrics.completedTrips}\\n`;\r\n    csv += `Average Speed (m/s),${metrics.averageSpeed.toFixed(2)}\\n`;\r\n    csv += `Average Wait Time (s),${metrics.averageWaitTime.toFixed(2)}\\n`;\r\n    csv += `Max Wait Time (s),${metrics.maxWaitTime.toFixed(2)}\\n`;\r\n    csv += `Total Stops,${metrics.totalStops}\\n`;\r\n    csv += `Stopped Vehicles,${metrics.stoppedVehicles}\\n`;\r\n    csv += `Global Throughput (vehicles/min),${metrics.globalThroughput.toFixed(2)}\\n`;\r\n    csv += `Global Congestion Index,${metrics.congestionIndex.toFixed(2)}\\n`;\r\n    csv += `Simulation Time (s),${metrics.simulationTime.toFixed(2)}\\n\\n`;\r\n    \r\n    // Lane metrics\r\n    csv += '# Lane Metrics\\n';\r\n    csv += 'Lane ID,Average Speed,Vehicle Count,Max Vehicle Count,Average Vehicle Count,Congestion Rate,Throughput,Total Vehicles Passed,Average Wait Time,Queue Length\\n';\r\n    \r\n    Object.values(metrics.laneMetrics).forEach(lane => {\r\n      csv += `${lane.laneId},${lane.averageSpeed.toFixed(2)},${lane.vehicleCount},${lane.maxVehicleCount},`;\r\n      csv += `${lane.averageVehicleCount.toFixed(2)},${lane.congestionRate.toFixed(2)},${lane.throughput.toFixed(2)},`;\r\n      csv += `${lane.totalVehiclesPassed},${lane.averageWaitTime.toFixed(2)},${lane.queueLength}\\n`;\r\n    });\r\n    \r\n    csv += '\\n# Intersection Metrics\\n';\r\n    csv += 'Intersection ID,Throughput,Average Wait Time,Max Wait Time,Average Queue Length,Max Queue Length,Total Vehicles Passed,Congestion Rate\\n';\r\n    \r\n    Object.values(metrics.intersectionMetrics).forEach(intersection => {\r\n      csv += `${intersection.intersectionId},${intersection.throughput.toFixed(2)},${intersection.averageWaitTime.toFixed(2)},`;\r\n      csv += `${intersection.maxWaitTime.toFixed(2)},${intersection.averageQueueLength.toFixed(2)},${intersection.maxQueueLength},`;\r\n      csv += `${intersection.totalVehiclesPassed},${intersection.congestionRate.toFixed(2)}\\n`;\r\n    });\r\n    \r\n    return csv;\r\n  }\r\n\r\n  /**\r\n   * Helper to download metrics as a CSV file\r\n   */\r\n  public downloadMetricsCSV(): void {\r\n    const csv = this.exportMetricsCSV();\r\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `traffic-metrics-${new Date().toISOString().slice(0, 10)}.csv`);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  }\r\n\r\n  /**\r\n   * Record a significant speed change\r\n   */\r\n  public recordSpeedChange(vehicle: Car, time: number, oldSpeed: number, newSpeed: number): void {\r\n    if (!this.isRecording) return;\r\n    \r\n    this.vehicleMetrics.push({\r\n      vehicleId: vehicle.id,\r\n      timestamp: time,\r\n      speed: newSpeed,\r\n      oldSpeed: oldSpeed,\r\n      event: VehicleEvent.SPEED_CHANGE\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Test function to validate KPI collection accuracy\r\n   * Logs detailed event counts and metrics to validate collection is working properly\r\n   * Returns HTML formatted validation report for UI display\r\n   */\r\n  public validateMetrics(): string {\r\n    // Count events by type\r\n    const eventCounts: { [key: string]: number } = {};\r\n    for (const metric of this.vehicleMetrics) {\r\n      eventCounts[metric.event] = (eventCounts[metric.event] || 0) + 1;\r\n    }\r\n    \r\n    // Get all unique vehicle IDs\r\n    const uniqueVehicleIds = new Set(this.vehicleMetrics.map(m => m.vehicleId));\r\n    \r\n    // Calculate metrics\r\n    const metrics = this.getMetrics();\r\n    \r\n    // Print validation report to console\r\n    console.log('=== KPI Collection Validation Report ===');\r\n    console.log('Event counts:', eventCounts);\r\n    console.log('Unique vehicles tracked:', uniqueVehicleIds.size);\r\n    console.log('Active vehicles:', this.activeVehicles.size);\r\n    console.log('Completed trips:', this.completedTrips);\r\n    console.log('Total vehicles processed:', metrics.totalVehicles);\r\n    \r\n    // Verify data integrity\r\n    const vehiclesWithEntry = new Set(this.vehicleMetrics\r\n      .filter(m => m.event === VehicleEvent.ENTER_SIMULATION)\r\n      .map(m => m.vehicleId));\r\n      \r\n    const vehiclesWithExit = new Set(this.vehicleMetrics\r\n      .filter(m => m.event === VehicleEvent.EXIT_SIMULATION)\r\n      .map(m => m.vehicleId));\r\n      \r\n    // Check for vehicles that have exit events but no entry events\r\n    const vehiclesWithExitButNoEntry = [...vehiclesWithExit].filter(id => !vehiclesWithEntry.has(id));\r\n    \r\n    // Check for vehicles that have speed changes but no entry events\r\n    const vehiclesWithSpeedChangeButNoEntry = new Set(this.vehicleMetrics\r\n      .filter(m => m.event === VehicleEvent.SPEED_CHANGE && !vehiclesWithEntry.has(m.vehicleId))\r\n      .map(m => m.vehicleId));\r\n      \r\n    // Check for intersection entries without exits\r\n    const vehiclesInIntersectionWithoutExit = new Set();\r\n    this.vehicleMetrics.forEach(m => {\r\n      if (m.event === VehicleEvent.ENTER_INTERSECTION) {\r\n        // Check if there's a matching exit event after this\r\n        const hasExit = this.vehicleMetrics.some(exit => \r\n          exit.vehicleId === m.vehicleId && \r\n          exit.event === VehicleEvent.EXIT_INTERSECTION && \r\n          exit.timestamp > m.timestamp\r\n        );\r\n        if (!hasExit && this.activeVehicles.has(m.vehicleId)) {\r\n          vehiclesInIntersectionWithoutExit.add(m.vehicleId);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Check for lane entries without exits\r\n    const vehiclesInLaneWithoutExit = new Set();\r\n    this.vehicleMetrics.forEach(m => {\r\n      if (m.event === VehicleEvent.ENTER_LANE) {\r\n        // Check if there's a matching exit event after this\r\n        const hasExit = this.vehicleMetrics.some(exit => \r\n          exit.vehicleId === m.vehicleId && \r\n          exit.event === VehicleEvent.EXIT_LANE && \r\n          exit.laneId === m.laneId && \r\n          exit.timestamp > m.timestamp\r\n        );\r\n        if (!hasExit && this.activeVehicles.has(m.vehicleId)) {\r\n          vehiclesInLaneWithoutExit.add(m.vehicleId);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Check for stop events without subsequent start events\r\n    const stoppedWithoutStart = new Set();\r\n    this.vehicleMetrics.forEach(m => {\r\n      if (m.event === VehicleEvent.STOP_MOVING) {\r\n        // Check if there's a matching start event after this\r\n        const hasStart = this.vehicleMetrics.some(start => \r\n          start.vehicleId === m.vehicleId && \r\n          start.event === VehicleEvent.START_MOVING && \r\n          start.timestamp > m.timestamp\r\n        );\r\n        if (!hasStart && this.activeVehicles.has(m.vehicleId)) {\r\n          stoppedWithoutStart.add(m.vehicleId);\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Check for average speed calculation accuracy\r\n    const calculatedAvgSpeed = this.speedMeasurements > 0 \r\n      ? this.totalSpeed / this.speedMeasurements\r\n      : 0;\r\n      \r\n    // Recalculate by direct measurement to validate\r\n    const allSpeeds = this.vehicleMetrics.map(m => m.speed);\r\n    const directAvgSpeed = allSpeeds.length > 0\r\n      ? allSpeeds.reduce((a, b) => a + b, 0) / allSpeeds.length\r\n      : 0;\r\n      \r\n    // Validate lane metrics consistency\r\n    const laneEntryEvents = this.vehicleMetrics.filter(m => m.event === VehicleEvent.ENTER_LANE);\r\n    const laneExitEvents = this.vehicleMetrics.filter(m => m.event === VehicleEvent.EXIT_LANE);\r\n    const lanesToValidate = Object.keys(metrics.laneMetrics);\r\n    \r\n    const laneMetricsValidation: { [laneId: string]: { entries: number, exits: number, balance: number } } = {};\r\n    lanesToValidate.forEach(laneId => {\r\n      const entries = laneEntryEvents.filter(m => m.laneId === laneId).length;\r\n      const exits = laneExitEvents.filter(m => m.laneId === laneId).length;\r\n      laneMetricsValidation[laneId] = {\r\n        entries,\r\n        exits,\r\n        balance: entries - exits\r\n      };\r\n    });\r\n    \r\n    // Validate intersection metrics consistency\r\n    const intersectionEntryEvents = this.vehicleMetrics.filter(m => m.event === VehicleEvent.ENTER_INTERSECTION);\r\n    const intersectionExitEvents = this.vehicleMetrics.filter(m => m.event === VehicleEvent.EXIT_INTERSECTION);\r\n    const intersectionsToValidate = Object.keys(metrics.intersectionMetrics);\r\n    \r\n    const intersectionMetricsValidation: { [intersectionId: string]: { entries: number, exits: number, balance: number } } = {};\r\n    intersectionsToValidate.forEach(intersectionId => {\r\n      const entries = intersectionEntryEvents.filter(m => m.intersectionId === intersectionId).length;\r\n      const exits = intersectionExitEvents.filter(m => m.intersectionId === intersectionId).length;\r\n      intersectionMetricsValidation[intersectionId] = {\r\n        entries,\r\n        exits,\r\n        balance: entries - exits\r\n      };\r\n    });\r\n    \r\n    // Log integrity issues\r\n    console.log('=== Data Integrity Checks ===');\r\n    console.log('Vehicles with exit but no entry:', vehiclesWithExitButNoEntry.length);\r\n    console.log('Vehicles with speed changes but no entry:', vehiclesWithSpeedChangeButNoEntry.size);\r\n    console.log('Vehicles currently in intersection:', vehiclesInIntersectionWithoutExit.size);\r\n    console.log('Vehicles in lane without exit:', vehiclesInLaneWithoutExit.size);\r\n    console.log('Vehicles stopped without restart:', stoppedWithoutStart.size);\r\n    console.log('Calculated avg speed:', calculatedAvgSpeed);\r\n    console.log('Direct measurement avg speed:', directAvgSpeed);\r\n    console.log('Speed measurement count:', this.speedMeasurements);\r\n    console.log('Lane metrics validation:', laneMetricsValidation);\r\n    console.log('Intersection metrics validation:', intersectionMetricsValidation);\r\n    console.log('Total event records:', this.vehicleMetrics.length);\r\n    console.log('==============================');\r\n    \r\n    // Create HTML report for UI display\r\n    let html = '<div class=\"kpi-validation\">';\r\n    html += '<h3>KPI Collection Validation Report</h3>';\r\n    html += '<table class=\"validation-table\">';\r\n    html += '<tr><th colspan=\"2\">Event Counts</th></tr>';\r\n    \r\n    for (const [event, count] of Object.entries(eventCounts)) {\r\n      html += `<tr><td>${event}</td><td>${count}</td></tr>`;\r\n    }\r\n    \r\n    html += '<tr><th colspan=\"2\">Vehicle Statistics</th></tr>';\r\n    html += `<tr><td>Unique vehicles tracked</td><td>${uniqueVehicleIds.size}</td></tr>`;\r\n    html += `<tr><td>Total vehicles (entry events)</td><td>${vehiclesWithEntry.size}</td></tr>`;\r\n    html += `<tr><td>Vehicles with exit events</td><td>${vehiclesWithExit.size}</td></tr>`;\r\n    html += `<tr><td>Currently active vehicles</td><td>${this.activeVehicles.size}</td></tr>`;\r\n    html += `<tr><td>Completed trips</td><td>${this.completedTrips}</td></tr>`;\r\n    \r\n    html += '<tr><th colspan=\"2\">Speed Statistics</th></tr>';\r\n    html += `<tr><td>Average speed (calculated)</td><td>${calculatedAvgSpeed.toFixed(2)} m/s</td></tr>`;\r\n    html += `<tr><td>Average speed (direct)</td><td>${directAvgSpeed.toFixed(2)} m/s</td></tr>`;\r\n    html += `<tr><td>Speed measurements</td><td>${this.speedMeasurements}</td></tr>`;\r\n    \r\n    // Lane and intersection validation\r\n    html += '<tr><th colspan=\"3\">Lane Metrics Validation</th></tr>';\r\n    html += '<tr><td>Lane ID</td><td>Entries</td><td>Exits</td></tr>';\r\n    for (const [laneId, validation] of Object.entries(laneMetricsValidation)) {\r\n      const isBalanced = validation.balance === 0 || \r\n                       (validation.entries > 0 && (validation.balance / validation.entries) < 0.05);\r\n      const rowClass = isBalanced ? '' : 'validation-error';\r\n      html += `<tr class=\"${rowClass}\"><td>${laneId}</td><td>${validation.entries}</td><td>${validation.exits}</td></tr>`;\r\n    }\r\n    \r\n    html += '<tr><th colspan=\"3\">Intersection Metrics Validation</th></tr>';\r\n    html += '<tr><td>Intersection ID</td><td>Entries</td><td>Exits</td></tr>';\r\n    for (const [intersectionId, validation] of Object.entries(intersectionMetricsValidation)) {\r\n      const isBalanced = validation.balance === 0 || \r\n                       (validation.entries > 0 && (validation.balance / validation.entries) < 0.05);\r\n      const rowClass = isBalanced ? '' : 'validation-error';\r\n      html += `<tr class=\"${rowClass}\"><td>${intersectionId}</td><td>${validation.entries}</td><td>${validation.exits}</td></tr>`;\r\n    }\r\n    \r\n    html += '<tr><th colspan=\"2\">Data Integrity Issues</th></tr>';\r\n    \r\n    // Add validation warnings in red if issues found\r\n    const hasIssues = vehiclesWithExitButNoEntry.length > 0 || \r\n                     vehiclesWithSpeedChangeButNoEntry.size > 0 ||\r\n                     Math.abs(calculatedAvgSpeed - directAvgSpeed) > 1.0 ||\r\n                     vehiclesInLaneWithoutExit.size > 0;\r\n                     \r\n    if (hasIssues) {\r\n      if (vehiclesWithExitButNoEntry.length > 0) {\r\n        html += `<tr class=\"validation-error\"><td>Vehicles with exit but no entry</td><td>${vehiclesWithExitButNoEntry.length}</td></tr>`;\r\n      }\r\n      \r\n      if (vehiclesWithSpeedChangeButNoEntry.size > 0) {\r\n        html += `<tr class=\"validation-error\"><td>Vehicles with speed changes but no entry</td><td>${vehiclesWithSpeedChangeButNoEntry.size}</td></tr>`;\r\n      }\r\n      \r\n      if (vehiclesInLaneWithoutExit.size > 0) {\r\n        html += `<tr class=\"validation-error\"><td>Vehicles in lane without exit</td><td>${vehiclesInLaneWithoutExit.size}</td></tr>`;\r\n      }\r\n      \r\n      if (Math.abs(calculatedAvgSpeed - directAvgSpeed) > 1.0) {\r\n        html += `<tr class=\"validation-error\"><td>Speed calculation discrepancy</td><td>${Math.abs(calculatedAvgSpeed - directAvgSpeed).toFixed(2)}</td></tr>`;\r\n      }\r\n    } else {\r\n      html += `<tr class=\"validation-success\"><td colspan=\"2\">All validation checks passed!</td></tr>`;\r\n    }\r\n    \r\n    // Global metrics summary\r\n    html += '<tr><th colspan=\"2\">Global Metrics</th></tr>';\r\n    html += `<tr><td>Global Throughput (vehicles/min)</td><td>${metrics.globalThroughput.toFixed(2)}</td></tr>`;\r\n    html += `<tr><td>Congestion Index (0-1)</td><td>${metrics.congestionIndex.toFixed(2)}</td></tr>`;\r\n    html += `<tr><td>Total event records</td><td>${this.vehicleMetrics.length}</td></tr>`;\r\n    \r\n    html += '</table></div>';\r\n    \r\n    return html;\r\n  }\r\n}\r\n\r\n// Export a singleton instance for application-wide use\r\nexport const kpiCollector = new KPICollector();\r\n","/**\r\n * AbstractTrafficControlStrategy\r\n * \r\n * Base class for implementing traffic control strategies.\r\n * Provides common functionality and default implementations.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { ITrafficControlStrategy, TrafficState } from './ITrafficControlStrategy';\r\n\r\n/**\r\n * Abstract base class for traffic control strategies\r\n */\r\nexport abstract class AbstractTrafficControlStrategy implements ITrafficControlStrategy {\r\n  /** Unique identifier for this strategy type */\r\n  abstract readonly strategyType: string;\r\n  \r\n  /** Human-readable name for displaying in UI */\r\n  abstract readonly displayName: string;\r\n  \r\n  /** Description of how this strategy works */\r\n  abstract readonly description: string;\r\n  \r\n  /** Reference to the intersection being controlled */\r\n  protected intersection: Intersection | null = null;\r\n  \r\n  /** Current phase number */\r\n  protected currentPhase: number = 0;\r\n  \r\n  /** Total phases in cycle */\r\n  protected totalPhases: number = 4;\r\n  \r\n  /** Time elapsed in current phase */\r\n  protected timeInPhase: number = 0;\r\n  \r\n  /** Time when current phase should end */\r\n  protected nextPhaseChangeTime: number = 0;\r\n  \r\n  /** Base duration for each phase (can be overridden by concrete implementations) */\r\n  protected phaseDuration: number = 30; // seconds\r\n  \r\n  /** Configuration options specific to this strategy */\r\n  protected configOptions: Record<string, any> = {};\r\n  \r\n  /**\r\n   * Initialize the traffic control strategy for a specific intersection\r\n   */\r\n  initialize(intersection: Intersection): void {\r\n    this.intersection = intersection;\r\n    this.reset();\r\n  }\r\n  \r\n  /**\r\n   * Update the traffic signals based on current traffic conditions\r\n   */\r\n  update(delta: number, trafficStates?: TrafficState[]): number[][] {\r\n    // Increment time in current phase\r\n    this.timeInPhase += delta;\r\n    \r\n    // Check if it's time to change phases\r\n    if (this.shouldSwitchPhase(trafficStates)) {\r\n      this.advanceToNextPhase();\r\n    }\r\n    \r\n    // Return current signal states\r\n    return this.getCurrentSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Reset the strategy to its initial state\r\n   */\r\n  reset(): void {\r\n    this.currentPhase = 0;\r\n    this.timeInPhase = 0;\r\n    this.nextPhaseChangeTime = this.getPhaseDuration();\r\n  }\r\n  \r\n  /**\r\n   * Get the current phase number\r\n   */\r\n  getCurrentPhase(): number {\r\n    return this.currentPhase;\r\n  }\r\n  \r\n  /**\r\n   * Get the total number of phases\r\n   */\r\n  getTotalPhases(): number {\r\n    return this.totalPhases;\r\n  }\r\n  \r\n  /**\r\n   * Get configuration options\r\n   */\r\n  getConfigOptions(): Record<string, any> {\r\n    return { ...this.configOptions };\r\n  }\r\n  \r\n  /**\r\n   * Get the current signal states without updating\r\n   * This method exposes the protected method to satisfy the interface\r\n   */\r\n  getCurrentSignalStates(): number[][] {\r\n    return this.getSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Update configuration options\r\n   */\r\n  updateConfig(options: Record<string, any>): void {\r\n    this.configOptions = { ...this.configOptions, ...options };\r\n  }\r\n  \r\n  /**\r\n   * Convert to JSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      strategyType: this.strategyType,\r\n      currentPhase: this.currentPhase,\r\n      timeInPhase: this.timeInPhase,\r\n      totalPhases: this.totalPhases,\r\n      phaseDuration: this.phaseDuration,\r\n      configOptions: this.configOptions\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Create from JSON\r\n   */\r\n  fromJSON(data: any, intersection: Intersection): ITrafficControlStrategy {\r\n    throw new Error('Method must be implemented by concrete strategy class');\r\n  }\r\n  \r\n  /**\r\n   * Check if the signal phase should be changed\r\n   * Can be overridden by concrete implementations for more sophisticated logic\r\n   */\r\n  protected shouldSwitchPhase(trafficStates?: TrafficState[]): boolean {\r\n    return this.timeInPhase >= this.nextPhaseChangeTime;\r\n  }\r\n  \r\n  /**\r\n   * Advance to the next phase\r\n   */\r\n  protected advanceToNextPhase(): void {\r\n    this.currentPhase = (this.currentPhase + 1) % this.totalPhases;\r\n    this.timeInPhase = 0;\r\n    this.nextPhaseChangeTime = this.getPhaseDuration();\r\n  }\r\n  \r\n  /**\r\n   * Get the duration for the current phase\r\n   * Can be overridden by concrete implementations for variable phase durations\r\n   */\r\n  protected getPhaseDuration(): number {\r\n    return this.phaseDuration;\r\n  }\r\n  \r\n  /**\r\n   * Get the current signal states for all approaches\r\n   * Must be implemented by concrete subclasses\r\n   */\r\n  protected abstract getSignalStates(): number[][];\r\n}\r\n","/**\r\n * AdaptiveTimingStrategy\r\n * \r\n * A more advanced traffic control strategy that adapts to traffic conditions.\r\n * This strategy adjusts phase durations based on queue lengths and waiting times.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { TrafficState } from './ITrafficControlStrategy';\r\nimport { AbstractTrafficControlStrategy } from './AbstractTrafficControlStrategy';\r\nimport settings = require('../../settings');\r\n\r\n/**\r\n * Adaptive timing traffic control strategy\r\n * Adjusts signal timing based on traffic conditions\r\n */\r\nexport class AdaptiveTimingStrategy extends AbstractTrafficControlStrategy {\r\n  readonly strategyType: string = 'adaptive-timing';\r\n  readonly displayName: string = 'Adaptive Timing';\r\n  readonly description: string = 'Adapts traffic signal timings based on real-time traffic conditions';\r\n  \r\n  // Traffic signal patterns (same as fixed timing)\r\n  protected states = [\r\n    ['L', '', 'L', ''],       // Phase 1: North & South left turns\r\n    ['FR', '', 'FR', ''],     // Phase 2: North & South forward and right\r\n    ['', 'L', '', 'L'],       // Phase 3: East & West left turns\r\n    ['', 'FR', '', 'FR']      // Phase 4: East & West forward and right\r\n  ];\r\n  \r\n  // Track traffic metrics for each approach\r\n  private queueLengths: number[] = [0, 0, 0, 0]; // N, E, S, W\r\n  private waitTimes: number[] = [0, 0, 0, 0];    // N, E, S, W\r\n  private flowRates: number[] = [0, 0, 0, 0];    // N, E, S, W\r\n  private congestionScores: number[] = [0, 0, 0, 0]; // N, E, S, W\r\n  private throughputRates: number[] = [0, 0, 0, 0]; // Vehicles passing through per minute\r\n  private saturationRates: number[] = [0, 0, 0, 0]; // How saturated the approach is (0-1)\r\n  \r\n  // Traffic history for trend analysis\r\n  private queueHistory: number[][] = [];\r\n  private waitTimeHistory: number[][] = [];\r\n  private flowRateHistory: number[][] = []; // Track flow rate history for better trend analysis\r\n  private historyMaxLength: number = 10;\r\n  \r\n  // Minimum and maximum phase durations\r\n  private minPhaseDuration: number = 10; // seconds\r\n  private maxPhaseDuration: number = 60; // seconds\r\n  private basePhaseDuration: number = 30; // seconds\r\n  \r\n  // Algorithm parameters\r\n  private trafficSensitivity: number = 0.5;  // How reactive to traffic (0-1)\r\n  private queueWeight: number = 1.0;         // Weight for queue length in scoring\r\n  private waitTimeWeight: number = 1.0;      // Weight for wait time in scoring\r\n  private flowRateWeight: number = 0.5;      // Weight for flow rate in scoring\r\n  private trendWeight: number = 0.3;         // Weight for trend analysis (0-1)\r\n  private prioritizeLeftTurns: boolean = true; // Give extra weight to left turn phases when congested\r\n  private enableLogging: boolean = false;    // Enable detailed logging\r\n  private emergencyMode: boolean = false;    // Enable emergency mode for extreme congestion\r\n  private fairnessWeight: number = 0.5;      // Weight for fairness across approaches (0-1)\r\n  \r\n  // Timing statistics for analysis\r\n  private phaseDurationHistory: number[] = [];\r\n  private trafficScoreHistory: number[] = [];\r\n  private phaseChanges: number = 0;\r\n  private emergencyActivations: number = 0;  // Track emergency mode activations\r\n  private fairnessMetric: number = 1.0;      // Track fairness across approaches (0-1)\r\n  \r\n  constructor() {\r\n    super();\r\n    this.totalPhases = this.states.length;\r\n    \r\n    this.configOptions = {\r\n      minPhaseDuration: this.minPhaseDuration,\r\n      maxPhaseDuration: this.maxPhaseDuration,\r\n      baseDuration: settings.lightsFlipInterval / 30, // Convert to seconds\r\n      trafficSensitivity: this.trafficSensitivity,\r\n      queueWeight: this.queueWeight,\r\n      waitTimeWeight: this.waitTimeWeight,\r\n      flowRateWeight: this.flowRateWeight,\r\n      trendWeight: this.trendWeight,\r\n      prioritizeLeftTurns: this.prioritizeLeftTurns,\r\n      enableLogging: this.enableLogging,\r\n      emergencyMode: this.emergencyMode,\r\n      fairnessWeight: this.fairnessWeight\r\n    };\r\n    \r\n    this.basePhaseDuration = this.configOptions.baseDuration;\r\n    \r\n    // Initialize history arrays\r\n    this.resetHistory();\r\n  }\r\n  \r\n  /**\r\n   * Reset traffic history arrays\r\n   */\r\n  private resetHistory(): void {\r\n    this.queueHistory = [];\r\n    this.waitTimeHistory = [];\r\n    this.flowRateHistory = [];\r\n    this.phaseDurationHistory = [];\r\n    this.trafficScoreHistory = [];\r\n    this.phaseChanges = 0;\r\n  }\r\n  \r\n  /**\r\n   * Initialize the strategy with an intersection\r\n   */\r\n  initialize(intersection: Intersection): void {\r\n    super.initialize(intersection);\r\n    \r\n    // If it's a 2-way or T-intersection, use a simplified state cycle\r\n    if (intersection.roads && intersection.roads.length <= 2) {\r\n      this.states = [\r\n        ['LFR', 'LFR', 'LFR', 'LFR'] // Single phase allowing all movements\r\n      ];\r\n      this.totalPhases = 1;\r\n    }\r\n    \r\n    // Initialize metric tracking\r\n    this.queueLengths = [0, 0, 0, 0];\r\n    this.waitTimes = [0, 0, 0, 0];\r\n    this.flowRates = [0, 0, 0, 0];\r\n    this.congestionScores = [0, 0, 0, 0];\r\n    \r\n    // Reset history arrays\r\n    this.resetHistory();\r\n    \r\n    // Apply configuration\r\n    this.minPhaseDuration = this.configOptions.minPhaseDuration || 10;\r\n    this.maxPhaseDuration = this.configOptions.maxPhaseDuration || 60;\r\n    this.basePhaseDuration = this.configOptions.baseDuration || 30;\r\n    this.trafficSensitivity = this.configOptions.trafficSensitivity || 0.5;\r\n    this.queueWeight = this.configOptions.queueWeight || 1.0;\r\n    this.waitTimeWeight = this.configOptions.waitTimeWeight || 1.0;\r\n    this.flowRateWeight = this.configOptions.flowRateWeight || 0.5;\r\n    this.trendWeight = this.configOptions.trendWeight || 0.3;\r\n    this.prioritizeLeftTurns = this.configOptions.prioritizeLeftTurns !== undefined ? \r\n      this.configOptions.prioritizeLeftTurns : true;\r\n    this.enableLogging = this.configOptions.enableLogging || false;\r\n    this.emergencyMode = this.configOptions.emergencyMode || false;\r\n    this.fairnessWeight = this.configOptions.fairnessWeight || 0.5;\r\n    \r\n    if (this.enableLogging) {\r\n      console.log(`[AdaptiveStrategy] Initialized for intersection ${intersection.id}`);\r\n      console.log(`[AdaptiveStrategy] Config: minDur=${this.minPhaseDuration}s, maxDur=${this.maxPhaseDuration}s, sensitivity=${this.trafficSensitivity}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update the strategy based on elapsed time and traffic conditions\r\n   */\r\n  update(delta: number, trafficStates?: TrafficState[]): number[][] {\r\n    // Add to time in current phase\r\n    this.timeInPhase += delta;\r\n    \r\n    // Process traffic states if available\r\n    if (trafficStates && trafficStates.length > 0) {\r\n      // This will update internal traffic metrics\r\n      const shouldSwitch = this.shouldSwitchPhase(trafficStates);\r\n      \r\n      // If it's time to switch, advance to next phase\r\n      if (shouldSwitch) {\r\n        this.advanceToNextPhase();\r\n      }\r\n    } else {\r\n      // Default behavior without traffic data\r\n      if (this.timeInPhase >= this.nextPhaseChangeTime) {\r\n        this.advanceToNextPhase();\r\n      }\r\n    }\r\n    \r\n    // Return current signal states\r\n    return this.getSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Update configuration options\r\n   */\r\n  updateConfig(options: Record<string, any>): void {\r\n    super.updateConfig(options);\r\n    \r\n    // Update internal parameters based on config\r\n    if (options.minPhaseDuration !== undefined) this.minPhaseDuration = options.minPhaseDuration;\r\n    if (options.maxPhaseDuration !== undefined) this.maxPhaseDuration = options.maxPhaseDuration;\r\n    if (options.baseDuration !== undefined) this.basePhaseDuration = options.baseDuration;\r\n    if (options.trafficSensitivity !== undefined) this.trafficSensitivity = options.trafficSensitivity;\r\n    if (options.queueWeight !== undefined) this.queueWeight = options.queueWeight;\r\n    if (options.waitTimeWeight !== undefined) this.waitTimeWeight = options.waitTimeWeight;\r\n    if (options.flowRateWeight !== undefined) this.flowRateWeight = options.flowRateWeight;\r\n    if (options.trendWeight !== undefined) this.trendWeight = options.trendWeight;\r\n    if (options.prioritizeLeftTurns !== undefined) this.prioritizeLeftTurns = options.prioritizeLeftTurns;\r\n    if (options.enableLogging !== undefined) this.enableLogging = options.enableLogging;\r\n    if (options.emergencyMode !== undefined) this.emergencyMode = options.emergencyMode;\r\n    if (options.fairnessWeight !== undefined) this.fairnessWeight = options.fairnessWeight;\r\n    \r\n    if (this.enableLogging) {\r\n      console.log(`[AdaptiveStrategy] Configuration updated`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Reset the strategy to initial state\r\n   */\r\n  reset(): void {\r\n    super.reset();\r\n    \r\n    // Reset traffic metrics\r\n    this.queueLengths = [0, 0, 0, 0];\r\n    this.waitTimes = [0, 0, 0, 0];\r\n    this.flowRates = [0, 0, 0, 0];\r\n    this.congestionScores = [0, 0, 0, 0];\r\n    \r\n    // Reset history\r\n    this.resetHistory();\r\n    \r\n    if (this.enableLogging) {\r\n      console.log(`[AdaptiveStrategy] Reset to initial state`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if the signal phase should be changed based on traffic conditions\r\n   * Overrides the base implementation to add adaptive logic\r\n   */\r\n  protected shouldSwitchPhase(trafficStates?: TrafficState[]): boolean {\r\n    // Standard time-based check\r\n    const timeBasedSwitch = this.timeInPhase >= this.nextPhaseChangeTime;\r\n    \r\n    // If we have traffic state data, we can do more sophisticated checks\r\n    if (trafficStates && trafficStates.length > 0) {\r\n      // Has minimum time elapsed?\r\n      if (this.timeInPhase < this.minPhaseDuration) {\r\n        return false; // Don't switch before minimum time\r\n      }\r\n      \r\n      // Update traffic metrics with latest data\r\n      this.updateTrafficMetrics(trafficStates);\r\n      \r\n      // Get traffic demand for current phase and all other phases\r\n      const currentDirections = this.getActiveDirectionsForPhase(this.currentPhase);\r\n      const currentTraffic = this.getTrafficDemandForDirections(currentDirections);\r\n      \r\n      // Find the phase with the highest demand\r\n      let maxTraffic = 0;\r\n      let maxTrafficPhase = this.currentPhase;\r\n      \r\n      for (let i = 0; i < this.totalPhases; i++) {\r\n        if (i !== this.currentPhase) {\r\n          const phaseDirections = this.getActiveDirectionsForPhase(i);\r\n          const phaseTraffic = this.getTrafficDemandForDirections(phaseDirections);\r\n          \r\n          if (phaseTraffic > maxTraffic) {\r\n            maxTraffic = phaseTraffic;\r\n            maxTrafficPhase = i;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Early switch conditions\r\n      const nextPhase = (this.currentPhase + 1) % this.totalPhases;\r\n      const nextTraffic = this.getTrafficDemandForDirections(\r\n        this.getActiveDirectionsForPhase(nextPhase)\r\n      );\r\n      \r\n      // Switch early under specific conditions\r\n      if (this.timeInPhase >= this.nextPhaseChangeTime * 0.75) {\r\n        // If the next phase has substantially more demand, switch early\r\n        if (nextTraffic > currentTraffic * 2) {\r\n          if (this.enableLogging) {\r\n            console.log(`[AdaptiveStrategy] Early switch: next phase has ${nextTraffic.toFixed(1)} demand vs current ${currentTraffic.toFixed(1)}`);\r\n          }\r\n          return true;\r\n        }\r\n        \r\n        // If another phase has extremely high demand, consider switching directly to it\r\n        if (maxTraffic > currentTraffic * 3 && maxTraffic > nextTraffic * 2) {\r\n          if (this.enableLogging) {\r\n            console.log(`[AdaptiveStrategy] Emergency switch: phase ${maxTrafficPhase + 1} has critical demand ${maxTraffic.toFixed(1)}`);\r\n          }\r\n          \r\n          // Set the next phase to the one with highest demand\r\n          this.currentPhase = maxTrafficPhase - 1;\r\n          if (this.currentPhase < 0) this.currentPhase = this.totalPhases - 1;\r\n          \r\n          return true;\r\n        }\r\n      }\r\n      \r\n      // Extend phase if it has significant traffic and hasn't reached max duration\r\n      if (currentTraffic > 0 && this.timeInPhase < this.maxPhaseDuration) {\r\n        // If current phase has more traffic than the next AND we're still processing vehicles\r\n        if (currentTraffic > nextTraffic * 0.8 && timeBasedSwitch) {\r\n          const remainingPercent = Math.min(1, (currentTraffic - nextTraffic) / currentTraffic);\r\n          \r\n          // Extend up to 50% of base duration based on remaining traffic\r\n          const extensionTime = this.basePhaseDuration * 0.5 * remainingPercent;\r\n          \r\n          if (this.timeInPhase < this.nextPhaseChangeTime + extensionTime && \r\n              this.timeInPhase < this.maxPhaseDuration) {\r\n            if (this.enableLogging && this.timeInPhase >= this.nextPhaseChangeTime) {\r\n              console.log(`[AdaptiveStrategy] Extending phase ${this.currentPhase + 1} by ${extensionTime.toFixed(1)}s due to continuing traffic`);\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // If current phase has no traffic but next phase does, switch immediately\r\n      // after minimum time has passed\r\n      if (currentTraffic === 0 && nextTraffic > 0 && this.timeInPhase >= this.minPhaseDuration) {\r\n        if (this.enableLogging) {\r\n          console.log(`[AdaptiveStrategy] Early switch: current phase empty, next phase has traffic`);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // If we're past the scheduled time, make the switch\r\n    if (timeBasedSwitch) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Update internal traffic metrics based on traffic state\r\n   */\r\n  private updateTrafficMetrics(trafficStates: TrafficState[]): void {\r\n    // Store previous metrics for trend analysis\r\n    const previousQueues = [...this.queueLengths];\r\n    const previousWaits = [...this.waitTimes];\r\n    const previousFlows = [...this.flowRates];\r\n    \r\n    // Update current metrics\r\n    for (let i = 0; i < trafficStates.length; i++) {\r\n      if (i < this.queueLengths.length) {\r\n        this.queueLengths[i] = trafficStates[i].queueLength;\r\n        this.waitTimes[i] = trafficStates[i].averageWaitTime;\r\n        this.flowRates[i] = trafficStates[i].flowRate;\r\n        \r\n        // Calculate throughput rates - if data is available in the traffic state\r\n        this.throughputRates[i] = trafficStates[i].flowRate || 0;\r\n        \r\n        // Calculate saturation rates - queue length compared to an estimated capacity\r\n        // Higher values indicate more saturation\r\n        const estimatedCapacity = 10; // Estimated capacity per lane\r\n        this.saturationRates[i] = Math.min(1.0, this.queueLengths[i] / estimatedCapacity);\r\n      }\r\n    }\r\n    \r\n    // Update congestion scores based on metrics\r\n    this.updateCongestionScores();\r\n    \r\n    // Add to history for trend analysis\r\n    this.queueHistory.push([...this.queueLengths]);\r\n    this.waitTimeHistory.push([...this.waitTimes]);\r\n    this.flowRateHistory.push([...this.flowRates]);\r\n    \r\n    // Limit history length\r\n    if (this.queueHistory.length > this.historyMaxLength) {\r\n      this.queueHistory.shift();\r\n      this.waitTimeHistory.shift();\r\n      this.flowRateHistory.shift();\r\n    }\r\n    \r\n    // Check for emergency conditions\r\n    this.checkEmergencyConditions();\r\n    \r\n    // Calculate fairness across approaches\r\n    this.calculateFairness();\r\n    \r\n    // Log metrics if logging is enabled\r\n    if (this.enableLogging) {\r\n      console.log(`[AdaptiveStrategy] Traffic metrics updated: Q=${this.queueLengths.join(',')}, W=${this.waitTimes.join(',')}, F=${this.flowRates.join(',')}`);\r\n      console.log(`[AdaptiveStrategy] Saturation rates: ${this.saturationRates.map(r => r.toFixed(2)).join(', ')}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate congestion scores for each direction\r\n   * Higher score = more congested\r\n   */\r\n  private updateCongestionScores(): void {\r\n    for (let i = 0; i < 4; i++) {\r\n      // Normalize each metric to a 0-10 scale\r\n      const queueScore = Math.min(10, this.queueLengths[i] / 2);\r\n      const waitScore = Math.min(10, this.waitTimes[i] / 30);\r\n      const flowScore = this.flowRates[i] > 0 ? 10 / Math.max(1, this.flowRates[i]) : 10;\r\n      const saturationScore = this.saturationRates[i] * 10; // Convert 0-1 to 0-10\r\n      \r\n      // Combine scores with weights\r\n      this.congestionScores[i] = (\r\n        queueScore * this.queueWeight +\r\n        waitScore * this.waitTimeWeight +\r\n        flowScore * this.flowRateWeight +\r\n        saturationScore * this.flowRateWeight // Use same weight as flow rate for now\r\n      ) / (this.queueWeight + this.waitTimeWeight + this.flowRateWeight * 2);\r\n      \r\n      // Apply trend analysis if we have history\r\n      if (this.queueHistory.length >= 3) {\r\n        const queueTrend = this.calculateTrend(i, this.queueHistory);\r\n        const waitTrend = this.calculateTrend(i, this.waitTimeHistory);\r\n        const flowTrend = this.calculateTrend(i, this.flowRateHistory);\r\n        \r\n        // If trends are increasing (positive), increase congestion score\r\n        // Weight queue trend highest, then wait time, then flow\r\n        const trendFactor = (queueTrend * 0.5 + waitTrend * 0.3 + flowTrend * 0.2);\r\n        if (trendFactor > 0) {\r\n          this.congestionScores[i] += trendFactor * this.trendWeight;\r\n        }\r\n      }\r\n      \r\n      // Apply fairness adjustment if fairness weight is > 0 \r\n      if (this.fairnessWeight > 0 && this.fairnessMetric < 1.0) {\r\n        // If this direction has been underserved (higher wait times),\r\n        // boost its congestion score to give it higher priority\r\n        const avgWait = this.waitTimes[i];\r\n        const maxWait = Math.max(...this.waitTimes);\r\n        \r\n        if (avgWait > 0 && avgWait >= maxWait * 0.8) {\r\n          const fairnessBoost = (avgWait / maxWait) * this.fairnessWeight * 2;\r\n          this.congestionScores[i] += fairnessBoost;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate trend for a specific direction and metric\r\n   * Returns a value between -1 and 1 (negative = decreasing, positive = increasing)\r\n   */\r\n  private calculateTrend(direction: number, history: number[][]): number {\r\n    if (history.length < 3) return 0;\r\n    \r\n    // Get last 3 values\r\n    const recent = history.slice(-3).map(h => h[direction]);\r\n    \r\n    // Simple trend calculation\r\n    if (recent[2] > recent[1] && recent[1] > recent[0]) {\r\n      // Consistently increasing\r\n      return 1.0;\r\n    } else if (recent[2] < recent[1] && recent[1] < recent[0]) {\r\n      // Consistently decreasing\r\n      return -1.0;\r\n    } else if (recent[2] > recent[0]) {\r\n      // Net increase\r\n      return 0.5;\r\n    } else if (recent[2] < recent[0]) {\r\n      // Net decrease\r\n      return -0.5;\r\n    }\r\n    \r\n    // No clear trend\r\n    return 0;\r\n  }\r\n  \r\n  /**\r\n   * Get the active directions for a specific phase\r\n   * Returns array of direction indices (0=N, 1=E, 2=S, 3=W)\r\n   */\r\n  private getActiveDirectionsForPhase(phase: number): number[] {\r\n    const phaseState = this.states[phase % this.states.length];\r\n    const directions: number[] = [];\r\n    \r\n    for (let i = 0; i < phaseState.length; i++) {\r\n      if (phaseState[i].length > 0) {\r\n        directions.push(i);\r\n      }\r\n    }\r\n    \r\n    return directions;\r\n  }\r\n  \r\n  /**\r\n   * Calculate traffic demand for given directions\r\n   * Returns a score based on congestion scores\r\n   */\r\n  private getTrafficDemandForDirections(directions: number[]): number {\r\n    let demand = 0;\r\n    \r\n    for (const dir of directions) {\r\n      // Use comprehensive congestion score\r\n      demand += this.congestionScores[dir];\r\n      \r\n      // Add bonus for left turn phases if configured\r\n      if (this.prioritizeLeftTurns) {\r\n        const phaseIdx = this.currentPhase % this.states.length;\r\n        const phaseState = this.states[phaseIdx][dir];\r\n        if (phaseState.includes('L')) {\r\n          demand *= 1.2; // 20% bonus for left turn phases when congested\r\n        }\r\n      }\r\n    }\r\n    \r\n    return demand;\r\n  }\r\n  \r\n  /**\r\n   * Get the duration for the current phase based on traffic conditions\r\n   */\r\n  protected getPhaseDuration(): number {\r\n    const baseDuration = this.configOptions.baseDuration || 30; // seconds\r\n    const sensitivity = this.configOptions.trafficSensitivity || 0.5;\r\n    \r\n    // If we don't have traffic data, use base duration\r\n    if (this.queueLengths.every(q => q === 0) && this.waitTimes.every(w => w === 0)) {\r\n      if (this.enableLogging) {\r\n        console.log(`[AdaptiveStrategy] No traffic data, using base duration: ${baseDuration}s`);\r\n      }\r\n      return baseDuration;\r\n    }\r\n    \r\n    // Get directions active in current phase\r\n    const currentDirections = this.getActiveDirectionsForPhase(this.currentPhase);\r\n    const currentTraffic = this.getTrafficDemandForDirections(currentDirections);\r\n    \r\n    // Check other phases' demand to determine relative importance\r\n    let totalDemand = currentTraffic;\r\n    let maxOtherDemand = 0;\r\n    \r\n    for (let i = 0; i < this.totalPhases; i++) {\r\n      if (i !== this.currentPhase) {\r\n        const phaseDemand = this.getTrafficDemandForDirections(\r\n          this.getActiveDirectionsForPhase(i)\r\n        );\r\n        totalDemand += phaseDemand;\r\n        maxOtherDemand = Math.max(maxOtherDemand, phaseDemand);\r\n      }\r\n    }\r\n    \r\n    // Calculate phase importance as ratio of its demand to total demand\r\n    const phaseImportance = totalDemand > 0 ? currentTraffic / totalDemand : 0;\r\n    \r\n    // Calculate adjusted duration\r\n    let adjustedDuration: number;\r\n    \r\n    if (maxOtherDemand > currentTraffic * 2) {\r\n      // If another phase has much more demand, shorten this phase\r\n      adjustedDuration = this.minPhaseDuration;\r\n    } else {\r\n      // Normal adjustment based on demand\r\n      const trafficFactor = Math.min(1.0, currentTraffic / 20); // Cap at 20 units of demand\r\n      const importanceFactor = Math.max(0.2, phaseImportance * 2); // Min 0.2, max 2.0\r\n      const durationAdjustment = sensitivity * trafficFactor * importanceFactor * (this.maxPhaseDuration - baseDuration);\r\n      \r\n      adjustedDuration = Math.min(\r\n        this.maxPhaseDuration,\r\n        Math.max(this.minPhaseDuration, baseDuration + durationAdjustment)\r\n      );\r\n    }\r\n    \r\n    // Store for analysis\r\n    this.phaseDurationHistory.push(adjustedDuration);\r\n    this.trafficScoreHistory.push(currentTraffic);\r\n    \r\n    if (this.enableLogging) {\r\n      console.log(\r\n        `[AdaptiveStrategy] Phase ${this.currentPhase + 1}: traffic=${currentTraffic.toFixed(1)}, ` +\r\n        `importance=${phaseImportance.toFixed(2)}, duration=${adjustedDuration.toFixed(1)}s`\r\n      );\r\n    }\r\n    \r\n    return adjustedDuration;\r\n  }\r\n  \r\n  /**\r\n   * Get the current signal states\r\n   */\r\n  protected getSignalStates(): number[][] {\r\n    const stringState = this.states[this.currentPhase % this.states.length];\r\n    \r\n    // For 2-way or T-intersections, always allow all movements\r\n    if (this.intersection && this.intersection.roads && this.intersection.roads.length <= 2) {\r\n      return [\r\n        this._decode('LFR'),\r\n        this._decode('LFR'),\r\n        this._decode('LFR'),\r\n        this._decode('LFR')\r\n      ];\r\n    }\r\n    \r\n    // Convert string patterns to numeric state arrays\r\n    return stringState.map(x => this._decode(x));\r\n  }\r\n  \r\n  /**\r\n   * Convert string representation to numeric state array\r\n   * e.g., \"LFR\" -> [1,1,1] (left, forward, right allowed)\r\n   */\r\n  private _decode(str: string): number[] {\r\n    const state = [0, 0, 0];\r\n    if (str.includes('L')) state[0] = 1;\r\n    if (str.includes('F')) state[1] = 1;\r\n    if (str.includes('R')) state[2] = 1;\r\n    return state;\r\n  }\r\n  \r\n  /**\r\n   * Add a custom phase advancement method that tracks changes\r\n   */\r\n  protected advanceToNextPhase(): void {\r\n    const oldPhase = this.currentPhase;\r\n    \r\n    // Call parent implementation\r\n    super.advanceToNextPhase();\r\n    \r\n    // Track phase changes\r\n    this.phaseChanges++;\r\n    \r\n    if (this.enableLogging) {\r\n      console.log(`[AdaptiveStrategy] Phase changed: ${oldPhase + 1} → ${this.currentPhase + 1}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check for emergency traffic conditions that require immediate intervention\r\n   */\r\n  private checkEmergencyConditions(): void {\r\n    // Check if any direction has extreme congestion\r\n    let emergencyDetected = false;\r\n    let emergencyDirection = -1;\r\n    \r\n    for (let i = 0; i < 4; i++) {\r\n      // Define emergency conditions:\r\n      // 1. Very high queue length (> 15)\r\n      // 2. Very high wait time (> 60 seconds)\r\n      // 3. Very low flow rate combined with high queue\r\n      const criticalQueue = this.queueLengths[i] > 15;\r\n      const criticalWait = this.waitTimes[i] > 60;\r\n      const criticalFlow = this.flowRates[i] < 1 && this.queueLengths[i] > 10;\r\n      \r\n      // Consistent growth trend is another emergency indicator\r\n      let growingTrend = false;\r\n      if (this.queueHistory.length >= 5) {\r\n        const trendFactor = this.calculateTrend(i, this.queueHistory);\r\n        growingTrend = trendFactor > 0.8; // Strong upward trend\r\n      }\r\n      \r\n      if ((criticalQueue || criticalWait || criticalFlow) && growingTrend) {\r\n        emergencyDetected = true;\r\n        emergencyDirection = i;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    // If emergency detected and emergency mode is enabled in config\r\n    if (emergencyDetected && this.configOptions.emergencyMode) {\r\n      // Check if we're not already servicing this direction\r\n      const currentDirections = this.getActiveDirectionsForPhase(this.currentPhase);\r\n      if (!currentDirections.includes(emergencyDirection)) {\r\n        if (this.enableLogging) {\r\n          console.log(`[AdaptiveStrategy] 🚨 EMERGENCY condition detected in direction ${emergencyDirection}`);\r\n        }\r\n        \r\n        // Find the phase that serves this direction\r\n        let targetPhase = -1;\r\n        for (let i = 0; i < this.totalPhases; i++) {\r\n          const phaseDirections = this.getActiveDirectionsForPhase(i);\r\n          if (phaseDirections.includes(emergencyDirection)) {\r\n            targetPhase = i;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (targetPhase >= 0 && this.timeInPhase > this.minPhaseDuration) {\r\n          // Force switch to this phase on next update\r\n          this.currentPhase = targetPhase - 1;\r\n          if (this.currentPhase < 0) this.currentPhase = this.totalPhases - 1;\r\n          this.timeInPhase = this.nextPhaseChangeTime; // Force a phase change\r\n          this.emergencyActivations++;\r\n          \r\n          if (this.enableLogging) {\r\n            console.log(`[AdaptiveStrategy] Emergency action: Switching to phase ${targetPhase} to address congestion`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate fairness metric across approaches\r\n   * A value of 1.0 means perfectly balanced service\r\n   * Lower values indicate some directions are underserved\r\n   */\r\n  private calculateFairness(): void {\r\n    // Calculate service time ratio between most and least served directions\r\n    if (this.phaseDurationHistory.length < this.totalPhases) {\r\n      this.fairnessMetric = 1.0; // Not enough data yet\r\n      return;\r\n    }\r\n    \r\n    // Get average wait times by direction\r\n    const avgWaitByDirection: number[] = [...this.waitTimes];\r\n    \r\n    // If any wait times are zero, set a minimum value\r\n    for (let i = 0; i < avgWaitByDirection.length; i++) {\r\n      if (avgWaitByDirection[i] === 0) avgWaitByDirection[i] = 0.1;\r\n    }\r\n    \r\n    // Calculate max/min ratio\r\n    const maxWait = Math.max(...avgWaitByDirection);\r\n    const minWait = Math.min(...avgWaitByDirection);\r\n    \r\n    // Invert and normalize to 0-1 range (1 = perfectly fair, 0 = completely unfair)\r\n    this.fairnessMetric = minWait / maxWait;\r\n    \r\n    if (this.enableLogging && this.fairnessMetric < 0.5) {\r\n      console.log(`[AdaptiveStrategy] Fairness alert: Low fairness metric ${this.fairnessMetric.toFixed(2)}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get performance analytics for this strategy\r\n   */\r\n  public getPerformanceAnalytics(): {\r\n    phaseDurationAvg: number;\r\n    phaseDurationMin: number;\r\n    phaseDurationMax: number;\r\n    phaseChanges: number;\r\n    trafficScoreAvg: number;\r\n    congestionScores: number[];\r\n    saturationRates: number[];\r\n    adaptationRate: number;\r\n    fairnessMetric: number;\r\n    emergencyActivations: number;\r\n    throughputRates: number[];\r\n  } {\r\n    // Calculate statistics\r\n    const durations = this.phaseDurationHistory;\r\n    const trafficScores = this.trafficScoreHistory;\r\n    \r\n    const phaseDurationAvg = durations.length > 0 ? \r\n      durations.reduce((sum, val) => sum + val, 0) / durations.length : 0;\r\n    const phaseDurationMin = durations.length > 0 ? Math.min(...durations) : 0;\r\n    const phaseDurationMax = durations.length > 0 ? Math.max(...durations) : 0;\r\n    \r\n    const trafficScoreAvg = trafficScores.length > 0 ?\r\n      trafficScores.reduce((sum, val) => sum + val, 0) / trafficScores.length : 0;\r\n    \r\n    // Calculate adaptation rate (how much timing varies from base duration)\r\n    let totalVariation = 0;\r\n    const baseDuration = this.basePhaseDuration;\r\n    \r\n    for (const duration of durations) {\r\n      totalVariation += Math.abs(duration - baseDuration) / baseDuration;\r\n    }\r\n    \r\n    const adaptationRate = durations.length > 0 ? totalVariation / durations.length : 0;\r\n    \r\n    return {\r\n      phaseDurationAvg,\r\n      phaseDurationMin,\r\n      phaseDurationMax,\r\n      phaseChanges: this.phaseChanges,\r\n      trafficScoreAvg,\r\n      congestionScores: [...this.congestionScores],\r\n      saturationRates: [...this.saturationRates],\r\n      adaptationRate,\r\n      fairnessMetric: this.fairnessMetric,\r\n      emergencyActivations: this.emergencyActivations,\r\n      throughputRates: [...this.throughputRates]\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Create from JSON\r\n   */\r\n  static fromJSON(data: any, intersection: Intersection): AdaptiveTimingStrategy {\r\n    const strategy = new AdaptiveTimingStrategy();\r\n    \r\n    // Restore state from saved data\r\n    strategy.currentPhase = data.currentPhase || 0;\r\n    strategy.timeInPhase = data.timeInPhase || 0;\r\n    strategy.totalPhases = data.totalPhases || 4;\r\n    strategy.phaseDuration = data.phaseDuration || 30;\r\n    strategy.configOptions = data.configOptions || {};\r\n    \r\n    // Restore adaptive-specific properties\r\n    strategy.minPhaseDuration = data.minPhaseDuration || strategy.configOptions.minPhaseDuration || 10;\r\n    strategy.maxPhaseDuration = data.maxPhaseDuration || strategy.configOptions.maxPhaseDuration || 60;\r\n    strategy.basePhaseDuration = data.basePhaseDuration || strategy.configOptions.baseDuration || 30;\r\n    strategy.trafficSensitivity = data.trafficSensitivity || strategy.configOptions.trafficSensitivity || 0.5;\r\n    strategy.queueWeight = data.queueWeight || strategy.configOptions.queueWeight || 1.0;\r\n    strategy.waitTimeWeight = data.waitTimeWeight || strategy.configOptions.waitTimeWeight || 1.0;\r\n    strategy.flowRateWeight = data.flowRateWeight || strategy.configOptions.flowRateWeight || 0.5;\r\n    strategy.trendWeight = data.trendWeight || strategy.configOptions.trendWeight || 0.3;\r\n    strategy.prioritizeLeftTurns = data.prioritizeLeftTurns !== undefined ? \r\n      data.prioritizeLeftTurns : strategy.configOptions.prioritizeLeftTurns !== undefined ? \r\n      strategy.configOptions.prioritizeLeftTurns : true;\r\n    strategy.enableLogging = data.enableLogging || strategy.configOptions.enableLogging || false;\r\n    strategy.emergencyMode = data.emergencyMode || strategy.configOptions.emergencyMode || false;\r\n    strategy.fairnessWeight = data.fairnessWeight || strategy.configOptions.fairnessWeight || 0.5;\r\n    \r\n    // If states array was saved, restore it\r\n    if (data.states) {\r\n      strategy.states = data.states;\r\n    }\r\n    \r\n    // Restore metrics if available\r\n    if (data.queueLengths) strategy.queueLengths = data.queueLengths;\r\n    if (data.waitTimes) strategy.waitTimes = data.waitTimes;\r\n    if (data.flowRates) strategy.flowRates = data.flowRates;\r\n    if (data.congestionScores) strategy.congestionScores = data.congestionScores;\r\n    if (data.throughputRates) strategy.throughputRates = data.throughputRates;\r\n    if (data.saturationRates) strategy.saturationRates = data.saturationRates;\r\n    if (data.fairnessMetric !== undefined) strategy.fairnessMetric = data.fairnessMetric;\r\n    if (data.emergencyActivations !== undefined) strategy.emergencyActivations = data.emergencyActivations;\r\n    \r\n    // Restore history arrays\r\n    if (data.queueHistory) strategy.queueHistory = data.queueHistory;\r\n    if (data.waitTimeHistory) strategy.waitTimeHistory = data.waitTimeHistory;\r\n    if (data.flowRateHistory) strategy.flowRateHistory = data.flowRateHistory;\r\n    if (data.phaseDurationHistory) strategy.phaseDurationHistory = data.phaseDurationHistory;\r\n    if (data.trafficScoreHistory) strategy.trafficScoreHistory = data.trafficScoreHistory;\r\n    if (data.phaseChanges !== undefined) strategy.phaseChanges = data.phaseChanges;\r\n    \r\n    strategy.initialize(intersection);\r\n    return strategy;\r\n  }\r\n  \r\n  /**\r\n   * Convert to JSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      ...super.toJSON(),\r\n      minPhaseDuration: this.minPhaseDuration,\r\n      maxPhaseDuration: this.maxPhaseDuration,\r\n      basePhaseDuration: this.basePhaseDuration,\r\n      trafficSensitivity: this.trafficSensitivity,\r\n      queueWeight: this.queueWeight,\r\n      waitTimeWeight: this.waitTimeWeight,\r\n      flowRateWeight: this.flowRateWeight,\r\n      trendWeight: this.trendWeight,\r\n      prioritizeLeftTurns: this.prioritizeLeftTurns,\r\n      enableLogging: this.enableLogging,\r\n      emergencyMode: this.emergencyMode,\r\n      fairnessWeight: this.fairnessWeight,\r\n      \r\n      // Current metrics\r\n      states: this.states,\r\n      queueLengths: this.queueLengths,\r\n      waitTimes: this.waitTimes,\r\n      flowRates: this.flowRates,\r\n      congestionScores: this.congestionScores,\r\n      throughputRates: this.throughputRates,\r\n      saturationRates: this.saturationRates,\r\n      fairnessMetric: this.fairnessMetric,\r\n      emergencyActivations: this.emergencyActivations,\r\n      \r\n      // History data (limited for size)\r\n      queueHistory: this.queueHistory.slice(-5),\r\n      waitTimeHistory: this.waitTimeHistory.slice(-5),\r\n      flowRateHistory: this.flowRateHistory.slice(-5),\r\n      phaseDurationHistory: this.phaseDurationHistory.slice(-10),\r\n      trafficScoreHistory: this.trafficScoreHistory.slice(-10),\r\n      phaseChanges: this.phaseChanges,\r\n      \r\n      // Analysis\r\n      analytics: this.getPerformanceAnalytics()\r\n    };\r\n  }\r\n}\r\n","/**\r\n * AllRedFlashingStrategy\r\n * \r\n * A special traffic control strategy that simulates an emergency mode where all\r\n * signals flash red, requiring vehicles to treat the intersection as an all-way stop.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { TrafficState } from './ITrafficControlStrategy';\r\nimport { AbstractTrafficControlStrategy } from './AbstractTrafficControlStrategy';\r\n\r\n/**\r\n * All-Red Flashing Strategy\r\n * Simulates emergency conditions or power outage at intersection\r\n */\r\nexport class AllRedFlashingStrategy extends AbstractTrafficControlStrategy {\r\n  readonly strategyType: string = 'all-red-flashing';\r\n  readonly displayName: string = 'All-Red Flashing';\r\n  readonly description: string = 'All approaches flash red - simulates emergency conditions';\r\n  \r\n  // Track whether signals are currently visible or not (for flashing effect)\r\n  private signalsVisible: boolean = true;\r\n  \r\n  // Flashing interval in seconds\r\n  private flashInterval: number = 1.0; // 1 second on, 1 second off\r\n  private timeInFlashState: number = 0;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.totalPhases = 1; // Only one phase (all red)\r\n    \r\n    this.configOptions = {\r\n      flashInterval: this.flashInterval\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Update the traffic signals with flashing behavior\r\n   */\r\n  update(delta: number, trafficStates?: TrafficState[]): number[][] {\r\n    // Update flash timing\r\n    this.timeInFlashState += delta;\r\n    if (this.timeInFlashState >= this.flashInterval) {\r\n      this.timeInFlashState = 0;\r\n      this.signalsVisible = !this.signalsVisible;\r\n    }\r\n    \r\n    // Return the signal state\r\n    return this.getSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Update configuration options\r\n   */\r\n  updateConfig(options: Record<string, any>): void {\r\n    super.updateConfig(options);\r\n    \r\n    if (options.flashInterval !== undefined) {\r\n      this.flashInterval = options.flashInterval;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get the current signal states - all red or all off depending on flash state\r\n   */\r\n  protected getSignalStates(): number[][] {\r\n    // If not visible in current flash state, return all off\r\n    if (!this.signalsVisible) {\r\n      return [\r\n        [0, 0, 0],\r\n        [0, 0, 0],\r\n        [0, 0, 0],\r\n        [0, 0, 0]\r\n      ];\r\n    }\r\n    \r\n    // Otherwise, all approaches are red (no movements allowed)\r\n    return [\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0]\r\n    ];\r\n  }\r\n  \r\n  /**\r\n   * Create from JSON\r\n   */\r\n  static fromJSON(data: any, intersection: Intersection): AllRedFlashingStrategy {\r\n    const strategy = new AllRedFlashingStrategy();\r\n    \r\n    // Restore state from saved data\r\n    strategy.flashInterval = data.flashInterval || strategy.flashInterval;\r\n    strategy.signalsVisible = data.signalsVisible !== undefined ? data.signalsVisible : true;\r\n    strategy.timeInFlashState = data.timeInFlashState || 0;\r\n    \r\n    // Apply configuration options\r\n    if (data.configOptions) {\r\n      strategy.updateConfig(data.configOptions);\r\n    }\r\n    \r\n    strategy.initialize(intersection);\r\n    return strategy;\r\n  }\r\n  \r\n  /**\r\n   * Convert to JSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      ...super.toJSON(),\r\n      flashInterval: this.flashInterval,\r\n      signalsVisible: this.signalsVisible,\r\n      timeInFlashState: this.timeInFlashState\r\n    };\r\n  }\r\n}\r\n","/**\r\n * FixedTimingStrategy\r\n * \r\n * A simple fixed-timing traffic control strategy that follows a predefined cycle.\r\n * This is equivalent to the original behavior in the simulation.\r\n * \r\n * Features:\r\n * - Fixed duration cycles for predictable traffic signal timing\r\n * - Configurable phase durations and variations\r\n * - Automatic adaptation to intersection type (4-way, 3-way, etc.)\r\n * - Detailed logging for timing verification and debugging\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { TrafficState } from './ITrafficControlStrategy';\r\nimport { AbstractTrafficControlStrategy } from './AbstractTrafficControlStrategy';\r\nimport settings = require('../../settings');\r\n\r\n/**\r\n * Fixed timing traffic control strategy\r\n * Cycles through predefined phases with fixed durations\r\n */\r\nexport class FixedTimingStrategy extends AbstractTrafficControlStrategy {\r\n  readonly strategyType: string = 'fixed-timing';\r\n  readonly displayName: string = 'Fixed Timing';\r\n  readonly description: string = 'Cycles through traffic signal phases with fixed durations';\r\n  \r\n  // Traffic signal patterns for intersections\r\n  // 'L' = Left turn, 'F' = Forward, 'R' = Right turn\r\n  // Each array represents a phase of the traffic light cycle\r\n  // Each element in the array represents a direction (N, E, S, W)\r\n  protected states = [\r\n    ['L', '', 'L', ''],       // Phase 1: North & South left turns\r\n    ['FR', '', 'FR', ''],     // Phase 2: North & South forward and right\r\n    ['', 'L', '', 'L'],       // Phase 3: East & West left turns\r\n    ['', 'FR', '', 'FR']      // Phase 4: East & West forward and right\r\n  ];\r\n  \r\n  // Random variation in timing to create natural offsets between intersections\r\n  private flipMultiplier: number;\r\n  \r\n  // Additional properties for timing verification\r\n  private phaseStartTimes: number[] = [];\r\n  private phaseDurations: number[] = [];\r\n  private phaseTargetDurations: number[] = [];\r\n  private enableLogging: boolean = false;\r\n  \r\n  constructor() {\r\n    super();\r\n    this.flipMultiplier = Math.random();\r\n    this.totalPhases = this.states.length;\r\n    \r\n    this.configOptions = {\r\n      baseDuration: settings.lightsFlipInterval / 30, // Convert to seconds\r\n      variationPercentage: 5, // 5% variation by default\r\n      enableLogging: false, // Enable detailed timing logs\r\n      logToConsole: true // Output logs to console\r\n    };\r\n    \r\n    // Initialize timing arrays\r\n    this.resetTimingStats();\r\n  }\r\n  \r\n  /**\r\n   * Reset timing statistics\r\n   */\r\n  private resetTimingStats(): void {\r\n    this.phaseStartTimes = new Array(this.totalPhases).fill(0);\r\n    this.phaseDurations = new Array(this.totalPhases).fill(0);\r\n    this.phaseTargetDurations = new Array(this.totalPhases).fill(0);\r\n  }\r\n  \r\n  /**\r\n   * Initialize the strategy with an intersection\r\n   */\r\n  initialize(intersection: Intersection): void {\r\n    super.initialize(intersection);\r\n    \r\n    // If it's a 2-way or T-intersection, use a simplified state cycle\r\n    if (intersection.roads && intersection.roads.length <= 2) {\r\n      this.states = [\r\n        ['LFR', 'LFR', 'LFR', 'LFR'] // Single phase allowing all movements\r\n      ];\r\n      this.totalPhases = 1;\r\n    }\r\n    \r\n    // Reset timing stats with the correct number of phases\r\n    this.resetTimingStats();\r\n    \r\n    // Apply configuration\r\n    this.enableLogging = this.configOptions.enableLogging || false;\r\n    \r\n    if (this.enableLogging) {\r\n      this.log(`Initialized FixedTimingStrategy for intersection ${intersection.id}`);\r\n      this.log(`Number of phases: ${this.totalPhases}`);\r\n      this.log(`Base duration: ${this.configOptions.baseDuration} seconds`);\r\n      this.log(`Variation: ${this.configOptions.variationPercentage}%`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get the duration for the current phase\r\n   */\r\n  protected getPhaseDuration(): number {\r\n    // Apply random variation to create offsets between intersections\r\n    const baseDuration = this.configOptions.baseDuration || 5; // seconds\r\n    const variation = this.configOptions.variationPercentage || 5; // percentage\r\n    \r\n    // Calculate duration with variation\r\n    return baseDuration * (1 + (this.flipMultiplier * variation / 100));\r\n  }\r\n  \r\n  /**\r\n   * Get the current signal states\r\n   */\r\n  protected getSignalStates(): number[][] {\r\n    const stringState = this.states[this.currentPhase % this.states.length];\r\n    \r\n    // For 2-way or T-intersections, always allow all movements\r\n    if (this.intersection && this.intersection.roads && this.intersection.roads.length <= 2) {\r\n      return [\r\n        this._decode('LFR'),\r\n        this._decode('LFR'),\r\n        this._decode('LFR'),\r\n        this._decode('LFR')\r\n      ];\r\n    }\r\n    \r\n    // Convert string patterns to numeric state arrays\r\n    return stringState.map(x => this._decode(x));\r\n  }\r\n  \r\n  /**\r\n   * Convert string representation to numeric state array\r\n   * e.g., \"LFR\" -> [1,1,1] (left, forward, right allowed)\r\n   */\r\n  private _decode(str: string): number[] {\r\n    const state = [0, 0, 0];\r\n    if (str.includes('L')) state[0] = 1;\r\n    if (str.includes('F')) state[1] = 1;\r\n    if (str.includes('R')) state[2] = 1;\r\n    return state;\r\n  }\r\n  \r\n  /**\r\n   * Create from JSON\r\n   */\r\n  static fromJSON(data: any, intersection: Intersection): FixedTimingStrategy {\r\n    const strategy = new FixedTimingStrategy();\r\n    \r\n    // Restore state from saved data\r\n    strategy.currentPhase = data.currentPhase || 0;\r\n    strategy.timeInPhase = data.timeInPhase || 0;\r\n    strategy.totalPhases = data.totalPhases || 4;\r\n    strategy.phaseDuration = data.phaseDuration || 5;\r\n    strategy.configOptions = data.configOptions || {};\r\n    strategy.flipMultiplier = data.flipMultiplier || Math.random();\r\n    strategy.enableLogging = data.enableLogging || false;\r\n    \r\n    // If states array was saved, restore it\r\n    if (data.states) {\r\n      strategy.states = data.states;\r\n    }\r\n    \r\n    strategy.initialize(intersection);\r\n    return strategy;\r\n  }\r\n  \r\n  /**\r\n   * Convert to JSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      ...super.toJSON(),\r\n      flipMultiplier: this.flipMultiplier,\r\n      states: this.states,\r\n      enableLogging: this.enableLogging,\r\n      timingStats: this.getTimingStatistics()\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Log message if logging is enabled\r\n   */\r\n  private log(message: string): void {\r\n    if (this.enableLogging && this.configOptions.logToConsole) {\r\n      const intersectionId = this.intersection?.id || 'unknown';\r\n      console.log(`[FixedTimingStrategy:${intersectionId}] ${message}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update the traffic signals based on elapsed time\r\n   * Overrides the base implementation to add timing tracking\r\n   */\r\n  update(delta: number, trafficStates?: TrafficState[]): number[][] {\r\n    // Record start time for new phase\r\n    if (this.timeInPhase === 0) {\r\n      const now = new Date().getTime() / 1000; // Current time in seconds\r\n      this.phaseStartTimes[this.currentPhase] = now;\r\n      this.phaseTargetDurations[this.currentPhase] = this.getPhaseDuration();\r\n      \r\n      if (this.enableLogging) {\r\n        this.log(`Starting phase ${this.currentPhase + 1}/${this.totalPhases} with target duration: ${this.phaseTargetDurations[this.currentPhase].toFixed(2)}s`);\r\n      }\r\n    }\r\n    \r\n    // Let the parent class handle the standard update logic\r\n    const result = super.update(delta, trafficStates);\r\n    \r\n    // If a phase change just occurred (timeInPhase was reset to 0)\r\n    if (this.timeInPhase < delta) {\r\n      const previousPhase = (this.currentPhase + this.totalPhases - 1) % this.totalPhases;\r\n      const now = new Date().getTime() / 1000;\r\n      const actualDuration = now - this.phaseStartTimes[previousPhase];\r\n      this.phaseDurations[previousPhase] = actualDuration;\r\n      \r\n      const targetDuration = this.phaseTargetDurations[previousPhase];\r\n      const deviation = Math.abs(actualDuration - targetDuration);\r\n      const deviationPercent = (deviation / targetDuration) * 100;\r\n      \r\n      if (this.enableLogging) {\r\n        this.log(`Phase ${previousPhase + 1} completed: actual=${actualDuration.toFixed(2)}s, target=${targetDuration.toFixed(2)}s, deviation=${deviationPercent.toFixed(1)}%`);\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Check if it's time to switch to the next phase\r\n   * This implementation uses the fixed timing approach\r\n   */\r\n  protected shouldSwitchPhase(trafficStates?: TrafficState[]): boolean {\r\n    const shouldSwitch = this.timeInPhase >= this.nextPhaseChangeTime;\r\n    \r\n    // Log when we're about to switch\r\n    if (shouldSwitch && this.enableLogging) {\r\n      this.log(`Time to switch phase: ${this.timeInPhase.toFixed(2)}s elapsed, threshold: ${this.nextPhaseChangeTime.toFixed(2)}s`);\r\n    }\r\n    \r\n    return shouldSwitch;\r\n  }\r\n  \r\n  /**\r\n   * Advance to the next phase and reset timing\r\n   */\r\n  protected advanceToNextPhase(): void {\r\n    const oldPhase = this.currentPhase;\r\n    \r\n    // Call the parent implementation\r\n    super.advanceToNextPhase();\r\n    \r\n    if (this.enableLogging) {\r\n      this.log(`Advanced from phase ${oldPhase + 1} to phase ${this.currentPhase + 1}`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get timing statistics for verification\r\n   * @returns Timing statistics for all phases\r\n   */\r\n  getTimingStatistics(): {\r\n    phaseStartTimes: number[];\r\n    phaseDurations: number[];\r\n    phaseTargetDurations: number[];\r\n    averageDeviation: number;\r\n    maxDeviation: number;\r\n  } {\r\n    // Calculate average and max deviation\r\n    let totalDeviation = 0;\r\n    let maxDeviation = 0;\r\n    let validPhaseCount = 0;\r\n    \r\n    for (let i = 0; i < this.totalPhases; i++) {\r\n      if (this.phaseDurations[i] > 0) {\r\n        const deviation = Math.abs(this.phaseDurations[i] - this.phaseTargetDurations[i]);\r\n        totalDeviation += deviation;\r\n        maxDeviation = Math.max(maxDeviation, deviation);\r\n        validPhaseCount++;\r\n      }\r\n    }\r\n    \r\n    const averageDeviation = validPhaseCount > 0 ? totalDeviation / validPhaseCount : 0;\r\n    \r\n    return {\r\n      phaseStartTimes: [...this.phaseStartTimes],\r\n      phaseDurations: [...this.phaseDurations],\r\n      phaseTargetDurations: [...this.phaseTargetDurations],\r\n      averageDeviation,\r\n      maxDeviation\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Reset all timing statistics\r\n   */\r\n  resetTimingStatistics(): void {\r\n    this.resetTimingStats();\r\n    if (this.enableLogging) {\r\n      this.log('Timing statistics reset');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Set logging enabled/disabled\r\n   * @param enabled Whether to enable detailed logging\r\n   */\r\n  setLogging(enabled: boolean): void {\r\n    this.enableLogging = enabled;\r\n    this.configOptions.enableLogging = enabled;\r\n    this.log(`Logging ${enabled ? 'enabled' : 'disabled'}`);\r\n  }\r\n}\r\n","/**\r\n * TrafficControlStrategyManager\r\n * \r\n * Manages traffic control strategies, allowing for registration, selection,\r\n * and applying strategies to intersections.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { ITrafficControlStrategy } from './ITrafficControlStrategy';\r\nimport { FixedTimingStrategy } from './FixedTimingStrategy';\r\nimport { AdaptiveTimingStrategy } from './AdaptiveTimingStrategy';\r\nimport { AllRedFlashingStrategy } from './AllRedFlashingStrategy';\r\nimport { TrafficEnforcerStrategy } from './TrafficEnforcerStrategy';\r\n\r\n/**\r\n * Manages traffic control strategies in the simulation\r\n */\r\nexport class TrafficControlStrategyManager {\r\n  /** Available strategies indexed by type */\r\n  private strategies: Map<string, new () => ITrafficControlStrategy> = new Map();\r\n  \r\n  /** Currently selected strategy type */\r\n  private selectedStrategyType: string = 'fixed-timing';\r\n\r\n  /**\r\n   * Initialize the strategy manager with default strategies\r\n   */\r\n  constructor() {\r\n    // Register all available strategies\r\n    this.registerStrategy('fixed-timing', FixedTimingStrategy);\r\n    this.registerStrategy('adaptive-timing', AdaptiveTimingStrategy);\r\n    this.registerStrategy('all-red-flashing', AllRedFlashingStrategy);\r\n    this.registerStrategy('traffic-enforcer', TrafficEnforcerStrategy);\r\n  }\r\n\r\n  /**\r\n   * Register a new traffic control strategy\r\n   * @param type Unique identifier for the strategy\r\n   * @param strategyClass Constructor for the strategy class\r\n   */\r\n  registerStrategy(type: string, strategyClass: new () => ITrafficControlStrategy): void {\r\n    this.strategies.set(type, strategyClass);\r\n  }\r\n\r\n  /**\r\n   * Get a list of available strategy types\r\n   */\r\n  getAvailableStrategyTypes(): string[] {\r\n    return Array.from(this.strategies.keys());\r\n  }\r\n\r\n  /**\r\n   * Set the currently selected strategy\r\n   * @param strategyType The type of strategy to select\r\n   * @returns true if successful, false if the strategy type doesn't exist\r\n   */\r\n  selectStrategy(strategyType: string): boolean {\r\n    if (this.strategies.has(strategyType)) {\r\n      this.selectedStrategyType = strategyType;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the currently selected strategy type\r\n   */\r\n  getSelectedStrategyType(): string {\r\n    return this.selectedStrategyType;\r\n  }\r\n\r\n  /**\r\n   * Create a new instance of the currently selected strategy\r\n   */\r\n  createStrategy(): ITrafficControlStrategy {\r\n    const StrategyClass = this.strategies.get(this.selectedStrategyType);\r\n    if (!StrategyClass) {\r\n      throw new Error(`Strategy type '${this.selectedStrategyType}' not registered`);\r\n    }\r\n    return new StrategyClass();\r\n  }\r\n\r\n  /**\r\n   * Apply the currently selected strategy to an intersection\r\n   * @param intersection The intersection to apply the strategy to\r\n   */\r\n  applyToIntersection(intersection: Intersection): ITrafficControlStrategy {\r\n    const strategy = this.createStrategy();\r\n    strategy.initialize(intersection);\r\n    return strategy;\r\n  }\r\n\r\n  /**\r\n   * Create a strategy from saved data\r\n   * @param data Serialized strategy data from toJSON\r\n   * @param intersection The intersection to control\r\n   */\r\n  createFromJSON(data: any, intersection: Intersection): ITrafficControlStrategy {\r\n    if (!data || !data.strategyType) {\r\n      // Default to fixed timing if no valid data\r\n      return this.applyToIntersection(intersection);\r\n    }\r\n    \r\n    const StrategyClass = this.strategies.get(data.strategyType);\r\n    if (!StrategyClass) {\r\n      console.warn(`Strategy type '${data.strategyType}' not found, using default`);\r\n      return this.applyToIntersection(intersection);\r\n    }\r\n    \r\n    // Create an instance and initialize from data\r\n    const strategy = new StrategyClass();\r\n    return strategy.fromJSON ? strategy.fromJSON(data, intersection) : strategy;\r\n  }\r\n}\r\n\r\n// Create a singleton instance\r\nexport const trafficControlStrategyManager = new TrafficControlStrategyManager();\r\n","/**\r\n * TrafficEnforcerStrategy\r\n * \r\n * Simulates a manual or AI-based traffic enforcer making decisions based on live conditions.\r\n * This strategy uses heuristics to prioritize lanes with high congestion or emergency situations.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { TrafficState } from './ITrafficControlStrategy';\r\nimport { AbstractTrafficControlStrategy } from './AbstractTrafficControlStrategy';\r\nimport settings = require('../../settings');\r\n\r\n/**\r\n * Traffic enforcer control strategy\r\n * Simulates a human or AI traffic enforcer making real-time decisions\r\n */\r\nexport class TrafficEnforcerStrategy extends AbstractTrafficControlStrategy {\r\n  readonly strategyType: string = 'traffic-enforcer';\r\n  readonly displayName: string = 'Traffic Enforcer';\r\n  readonly description: string = 'Simulates a traffic enforcer (human or AI) making real-time decisions based on traffic conditions';\r\n  \r\n  // Track traffic metrics for each approach\r\n  private queueLengths: number[] = [0, 0, 0, 0]; // N, E, S, W\r\n  private waitTimes: number[] = [0, 0, 0, 0];    // N, E, S, W\r\n  private flowRates: number[] = [0, 0, 0, 0];    // N, E, S, W\r\n  private congestionScores: number[] = [0, 0, 0, 0]; // N, E, S, W\r\n  \r\n  // Current active signals (1 = green, 0 = red) for each approach and movement\r\n  private currentSignals: number[][] = [\r\n    [0, 0, 0], // North [left, forward, right]\r\n    [0, 0, 0], // East\r\n    [0, 0, 0], // South\r\n    [0, 0, 0]  // West\r\n  ];\r\n  \r\n  // Decision-making parameters\r\n  private decisionInterval: number = 5; // seconds between major decisions\r\n  private timeSinceLastDecision: number = 0;\r\n  private minimumGreenTime: number = 10; // minimum green time for any movement\r\n  private greenTimers: { [key: string]: number } = {}; // track time for each green signal\r\n  private activeMovements: { direction: number, movement: number }[] = []; // currently active movements\r\n  \r\n  // Safety constraint: conflicting movements can't be green simultaneously\r\n  private conflictMatrix: {[key: string]: string[]} = {\r\n    'N-L': ['E-L', 'E-F', 'S-F', 'S-R', 'W-L', 'W-F'],\r\n    'N-F': ['E-L', 'E-F', 'E-R', 'S-L', 'W-L', 'W-F', 'W-R'],\r\n    'N-R': ['E-F', 'E-R', 'S-L', 'W-L'],\r\n    'E-L': ['N-L', 'N-F', 'S-L', 'S-F', 'W-F', 'W-R'],\r\n    'E-F': ['N-L', 'N-F', 'N-R', 'S-L', 'S-F', 'S-R', 'W-L'],\r\n    'E-R': ['N-F', 'N-R', 'S-L', 'W-L'],\r\n    'S-L': ['N-F', 'N-R', 'E-L', 'E-F', 'W-L', 'W-F'],\r\n    'S-F': ['N-L', 'E-L', 'E-F', 'E-R', 'W-L', 'W-F', 'W-R'],\r\n    'S-R': ['N-L', 'E-F', 'E-R', 'W-L'],\r\n    'W-L': ['N-L', 'N-F', 'N-R', 'E-L', 'E-R', 'S-L', 'S-R'],\r\n    'W-F': ['N-L', 'N-F', 'E-L', 'E-F', 'S-L', 'S-F'],\r\n    'W-R': ['N-F', 'N-R', 'E-L', 'S-F']\r\n  };\r\n  \r\n  // Enforcer rules and priorities\r\n  private priorityThreshold: number = 7; // congestion score above which a movement gets priority\r\n  private emergencyThreshold: number = 9; // threshold for emergency intervention\r\n  private fairnessWindow: number = 60; // time window (seconds) to ensure fairness\r\n  private directionHistory: { [key: string]: number } = {}; // track time given to each direction\r\n  \r\n  // Extra priorities that can be set via configuration\r\n  private prioritizedDirections: number[] = []; // directions that get priority (0=N, 1=E, 2=S, 3=W)\r\n  private prioritizedMovements: { direction: number, movement: number }[] = []; // specific movements with priority\r\n  \r\n  constructor() {\r\n    super();\r\n    \r\n    this.configOptions = {\r\n      decisionInterval: this.decisionInterval,\r\n      minimumGreenTime: this.minimumGreenTime,\r\n      priorityThreshold: this.priorityThreshold,\r\n      emergencyThreshold: this.emergencyThreshold,\r\n      fairnessWindow: this.fairnessWindow,\r\n      prioritizedDirections: [],\r\n      prioritizedMovements: []\r\n    };\r\n    \r\n    // Initialize green timers and direction history\r\n    for (let d = 0; d < 4; d++) {\r\n      for (let m = 0; m < 3; m++) {\r\n        this.greenTimers[`${d}-${m}`] = 0;\r\n      }\r\n      this.directionHistory[d.toString()] = 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Initialize the strategy with an intersection\r\n   */\r\n  initialize(intersection: Intersection): void {\r\n    super.initialize(intersection);\r\n    \r\n    // Reset state\r\n    this.resetSignals();\r\n    this.activeMovements = [];\r\n    this.timeSinceLastDecision = 0;\r\n    \r\n    // Apply configuration\r\n    this.decisionInterval = this.configOptions.decisionInterval || 5;\r\n    this.minimumGreenTime = this.configOptions.minimumGreenTime || 10;\r\n    this.priorityThreshold = this.configOptions.priorityThreshold || 7;\r\n    this.emergencyThreshold = this.configOptions.emergencyThreshold || 9;\r\n    this.fairnessWindow = this.configOptions.fairnessWindow || 60;\r\n    \r\n    // Set priorities from config\r\n    this.prioritizedDirections = this.configOptions.prioritizedDirections || [];\r\n    this.prioritizedMovements = this.configOptions.prioritizedMovements || [];\r\n    \r\n    // For non-standard intersections (e.g., T-intersections), adjust the conflict matrix\r\n    if (intersection.roads && intersection.roads.length < 4) {\r\n      this.adjustConflictMatrixForNonStandardIntersection();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update strategy based on elapsed time and traffic states\r\n   */\r\n  update(delta: number, trafficStates?: TrafficState[]): number[][] {\r\n    // Update internal time tracking\r\n    this.timeSinceLastDecision += delta;\r\n    \r\n    // Update green timers\r\n    this.updateGreenTimers(delta);\r\n    \r\n    // Update direction history for fairness tracking\r\n    for (const movement of this.activeMovements) {\r\n      this.directionHistory[movement.direction.toString()] += delta;\r\n    }\r\n    \r\n    // Process traffic states\r\n    if (trafficStates && trafficStates.length > 0) {\r\n      this.updateTrafficMetrics(trafficStates);\r\n      \r\n      // Check for emergency conditions that require immediate response\r\n      if (this.checkForEmergencyConditions()) {\r\n        console.log(\"[Enforcer] Emergency conditions detected, making immediate decision\");\r\n        this.makeTrafficDecision();\r\n        this.timeSinceLastDecision = 0;\r\n      }\r\n      // Make normal decisions at regular intervals\r\n      else if (this.timeSinceLastDecision >= this.decisionInterval) {\r\n        this.makeTrafficDecision();\r\n        this.timeSinceLastDecision = 0;\r\n      }\r\n    }\r\n    \r\n    return this.getCurrentSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Get current signal states\r\n   */\r\n  getCurrentSignalStates(): number[][] {\r\n    return this.currentSignals.map(signals => [...signals]);\r\n  }\r\n  \r\n  /**\r\n   * Implementation of abstract method\r\n   */\r\n  protected getSignalStates(): number[][] {\r\n    return this.getCurrentSignalStates();\r\n  }\r\n  \r\n  /**\r\n   * Reset the strategy to initial state\r\n   */\r\n  reset(): void {\r\n    super.reset();\r\n    this.resetSignals();\r\n    this.timeSinceLastDecision = 0;\r\n    this.activeMovements = [];\r\n    \r\n    // Reset timers and history\r\n    for (let d = 0; d < 4; d++) {\r\n      for (let m = 0; m < 3; m++) {\r\n        this.greenTimers[`${d}-${m}`] = 0;\r\n      }\r\n      this.directionHistory[d.toString()] = 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Reset all signals to red\r\n   */\r\n  private resetSignals(): void {\r\n    this.currentSignals = [\r\n      [0, 0, 0], // North\r\n      [0, 0, 0], // East\r\n      [0, 0, 0], // South\r\n      [0, 0, 0]  // West\r\n    ];\r\n  }\r\n  \r\n  /**\r\n   * Update traffic metrics based on current states\r\n   */\r\n  private updateTrafficMetrics(trafficStates: TrafficState[]): void {\r\n    // Update current metrics\r\n    for (let i = 0; i < trafficStates.length; i++) {\r\n      if (i < this.queueLengths.length) {\r\n        this.queueLengths[i] = trafficStates[i].queueLength;\r\n        this.waitTimes[i] = trafficStates[i].averageWaitTime;\r\n        this.flowRates[i] = trafficStates[i].flowRate;\r\n      }\r\n    }\r\n    \r\n    // Calculate congestion scores\r\n    this.calculateCongestionScores();\r\n  }\r\n  \r\n  /**\r\n   * Calculate congestion scores for each approach and movement\r\n   */\r\n  private calculateCongestionScores(): void {\r\n    const directionNames = ['North', 'East', 'South', 'West'];\r\n    \r\n    for (let d = 0; d < 4; d++) {\r\n      // Calculate based on queue length and wait time\r\n      const queueScore = Math.min(10, this.queueLengths[d] / 2);\r\n      const waitScore = Math.min(10, this.waitTimes[d] / 30);\r\n      const flowScore = this.flowRates[d] > 0 ? 10 / Math.max(1, this.flowRates[d]) : 10;\r\n      \r\n      // Combined score (0-10)\r\n      this.congestionScores[d] = (queueScore * 0.5 + waitScore * 0.3 + flowScore * 0.2);\r\n      \r\n      // Add priority bonus if this direction is prioritized\r\n      if (this.prioritizedDirections.includes(d)) {\r\n        this.congestionScores[d] += 2;\r\n      }\r\n      \r\n      // Debug log\r\n      if (this.congestionScores[d] > this.priorityThreshold) {\r\n        console.log(`[Enforcer] ${directionNames[d]} approach has high congestion: ${this.congestionScores[d].toFixed(1)}`);\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if any green timer has exceeded minimum time\r\n   */\r\n  private canSwitchSignals(): boolean {\r\n    for (const movement of this.activeMovements) {\r\n      const key = `${movement.direction}-${movement.movement}`;\r\n      if (this.greenTimers[key] < this.minimumGreenTime) {\r\n        return false; // Can't switch yet, minimum green time not met\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Update timers for green signals\r\n   */\r\n  private updateGreenTimers(delta: number): void {\r\n    // Increment timer for each active movement\r\n    for (const movement of this.activeMovements) {\r\n      const key = `${movement.direction}-${movement.movement}`;\r\n      this.greenTimers[key] += delta;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Reset timer for a movement that just turned green\r\n   */\r\n  private resetGreenTimer(direction: number, movement: number): void {\r\n    const key = `${direction}-${movement}`;\r\n    this.greenTimers[key] = 0;\r\n  }\r\n  \r\n  /**\r\n   * Check if a movement has a priority configuration\r\n   */\r\n  private hasConfiguredPriority(direction: number, movement: number): boolean {\r\n    return this.prioritizedMovements.some(m => \r\n      m.direction === direction && m.movement === movement\r\n    );\r\n  }\r\n  \r\n  /**\r\n   * Check if activating a movement would create conflicts with current active movements\r\n   */\r\n  private wouldCreateConflict(direction: number, movement: number): boolean {\r\n    // Get movement key (e.g., \"N-L\" for North Left)\r\n    const directionCodes = ['N', 'E', 'S', 'W'];\r\n    const movementCodes = ['L', 'F', 'R'];\r\n    const movementKey = `${directionCodes[direction]}-${movementCodes[movement]}`;\r\n    \r\n    // Check against each active movement\r\n    for (const active of this.activeMovements) {\r\n      const activeKey = `${directionCodes[active.direction]}-${movementCodes[active.movement]}`;\r\n      \r\n      // If the active movement conflicts with proposed movement, it would create a conflict\r\n      if (this.conflictMatrix[activeKey]?.includes(movementKey) || \r\n          this.conflictMatrix[movementKey]?.includes(activeKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Calculate fairness score based on historical allocation\r\n   * Returns 0-1 value where 0 is completely unfair and 1 is perfectly fair\r\n   */\r\n  private calculateFairnessScore(): number {\r\n    const times = Object.values(this.directionHistory);\r\n    const maxTime = Math.max(...times);\r\n    const minTime = Math.min(...times);\r\n    \r\n    if (maxTime === 0) return 1; // No history yet\r\n    \r\n    return minTime / maxTime; // Closer to 1 is more fair\r\n  }\r\n  \r\n  /**\r\n   * Check for emergency conditions that require immediate attention\r\n   */\r\n  private checkForEmergencyConditions(): boolean {\r\n    // Check for extremely high congestion in any direction\r\n    for (let d = 0; d < 4; d++) {\r\n      if (this.congestionScores[d] >= this.emergencyThreshold) {\r\n        console.log(`[Enforcer] Emergency: Direction ${d} has critical congestion (${this.congestionScores[d].toFixed(1)})`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Check for extremely unfair allocation\r\n    const fairnessScore = this.calculateFairnessScore();\r\n    if (fairnessScore < 0.3 && Object.values(this.directionHistory).some(t => t > this.fairnessWindow)) {\r\n      console.log(`[Enforcer] Emergency: Fairness is critically low (${fairnessScore.toFixed(2)})`);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Make traffic control decision based on current conditions\r\n   * This is where the \"enforcer intelligence\" logic lives\r\n   */\r\n  private makeTrafficDecision(): void {\r\n    console.log(\"[Enforcer] Making traffic decision\");\r\n    \r\n    // If we can't switch signals yet due to minimum green time, do nothing\r\n    if (this.activeMovements.length > 0 && !this.canSwitchSignals()) {\r\n      console.log(\"[Enforcer] Can't switch yet - minimum green time not met\");\r\n      return;\r\n    }\r\n    \r\n    // Step 1: Score each possible movement\r\n    const scores: { direction: number; movement: number; score: number }[] = [];\r\n    const directionNames = ['North', 'East', 'South', 'West'];\r\n    const movementNames = ['Left', 'Forward', 'Right'];\r\n    \r\n    for (let d = 0; d < 4; d++) {\r\n      // Skip directions that don't exist in this intersection\r\n      if (this.intersection && this.intersection.roads && \r\n          d >= this.intersection.roads.length) {\r\n        continue;\r\n      }\r\n      \r\n      for (let m = 0; m < 3; m++) {\r\n        // Base score is the congestion score for this direction\r\n        let score = this.congestionScores[d];\r\n        \r\n        // Adjust based on wait time for fairness\r\n        const fairnessAdjustment = (1 - (this.directionHistory[d.toString()] / \r\n                                     Math.max(...Object.values(this.directionHistory)))) * 3;\r\n        score += fairnessAdjustment;\r\n        \r\n        // Preference for letting traffic flow forward over turns\r\n        if (m === 1) score += 1; // Small bonus for forward movement\r\n        \r\n        // Add bonus for configured priorities\r\n        if (this.hasConfiguredPriority(d, m)) {\r\n          score += 3;\r\n        }\r\n        \r\n        scores.push({ direction: d, movement: m, score });\r\n      }\r\n    }\r\n    \r\n    // Sort by score (highest first)\r\n    scores.sort((a, b) => b.score - a.score);\r\n    \r\n    // Step 2: Select movements to enable based on scores and conflicts\r\n    const newActiveMovements: { direction: number, movement: number }[] = [];\r\n    const activatedMovements: { direction: number, movement: number, score: number }[] = [];\r\n    \r\n    for (const candidate of scores) {\r\n      // Skip low-priority movements\r\n      if (candidate.score < this.priorityThreshold / 2) continue;\r\n      \r\n      // Check if this would conflict with any already selected movement\r\n      let hasConflict = false;\r\n      for (const active of newActiveMovements) {\r\n        if (this.wouldCreateConflict(candidate.direction, candidate.movement)) {\r\n          hasConflict = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if (!hasConflict) {\r\n        newActiveMovements.push({\r\n          direction: candidate.direction,\r\n          movement: candidate.movement\r\n        });\r\n        activatedMovements.push(candidate);\r\n        \r\n        console.log(`[Enforcer] Activating ${directionNames[candidate.direction]} ${movementNames[candidate.movement]} (score: ${candidate.score.toFixed(1)})`);\r\n      }\r\n    }\r\n    \r\n    // If nothing was selected, enable the highest scoring movement regardless\r\n    if (newActiveMovements.length === 0 && scores.length > 0) {\r\n      const best = scores[0];\r\n      newActiveMovements.push({\r\n        direction: best.direction,\r\n        movement: best.movement\r\n      });\r\n      activatedMovements.push(best);\r\n      \r\n      console.log(`[Enforcer] Forced activation of ${directionNames[best.direction]} ${movementNames[best.movement]} (score: ${best.score.toFixed(1)})`);\r\n    }\r\n    \r\n    // Step 3: Apply the new signal configuration\r\n    this.resetSignals(); // All red first\r\n    \r\n    for (const movement of newActiveMovements) {\r\n      // Set signal to green\r\n      this.currentSignals[movement.direction][movement.movement] = 1;\r\n      // Reset the green timer for this movement\r\n      this.resetGreenTimer(movement.direction, movement.movement);\r\n    }\r\n    \r\n    // Update active movements list\r\n    this.activeMovements = [...newActiveMovements];\r\n    \r\n    // Log the decision\r\n    console.log(`[Enforcer] New signal state: ${this.activeMovements.length} green signals`);\r\n  }\r\n  \r\n  /**\r\n   * Adjust conflict matrix for non-standard intersections (e.g., T-junctions)\r\n   */\r\n  private adjustConflictMatrixForNonStandardIntersection(): void {\r\n    // For simplicity, we'll implement a T-intersection case (3 roads)\r\n    // Assuming road 3 (West) is missing\r\n    if (this.intersection && this.intersection.roads && this.intersection.roads.length === 3) {\r\n      // Remove all conflicts related to the missing road\r\n      Object.keys(this.conflictMatrix).forEach(key => {\r\n        if (key.startsWith('W-')) {\r\n          delete this.conflictMatrix[key];\r\n        } else {\r\n          // Remove the missing road from conflict lists\r\n          this.conflictMatrix[key] = this.conflictMatrix[key].filter(conflict => !conflict.startsWith('W-'));\r\n        }\r\n      });\r\n      \r\n      console.log(\"[Enforcer] Adjusted conflict matrix for T-intersection\");\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Override updateConfig to handle complex configuration options\r\n   */\r\n  updateConfig(options: Record<string, any>): void {\r\n    super.updateConfig(options);\r\n    \r\n    // Update specific options\r\n    if (options.decisionInterval !== undefined) this.decisionInterval = options.decisionInterval;\r\n    if (options.minimumGreenTime !== undefined) this.minimumGreenTime = options.minimumGreenTime;\r\n    if (options.priorityThreshold !== undefined) this.priorityThreshold = options.priorityThreshold;\r\n    if (options.emergencyThreshold !== undefined) this.emergencyThreshold = options.emergencyThreshold;\r\n    if (options.fairnessWindow !== undefined) this.fairnessWindow = options.fairnessWindow;\r\n    \r\n    // Handle direction priorities (array of numbers)\r\n    if (options.prioritizedDirections !== undefined) {\r\n      this.prioritizedDirections = Array.isArray(options.prioritizedDirections) ? \r\n        options.prioritizedDirections : [];\r\n    }\r\n    \r\n    // Handle movement priorities (array of objects)\r\n    if (options.prioritizedMovements !== undefined) {\r\n      this.prioritizedMovements = Array.isArray(options.prioritizedMovements) ? \r\n        options.prioritizedMovements : [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Create this strategy from JSON data\r\n   */\r\n  static fromJSON(data: any, intersection: Intersection): TrafficEnforcerStrategy {\r\n    const strategy = new TrafficEnforcerStrategy();\r\n    \r\n    // Restore state from saved data\r\n    strategy.configOptions = data.configOptions || {};\r\n    \r\n    // Restore enforcer-specific properties\r\n    strategy.decisionInterval = data.decisionInterval || strategy.configOptions.decisionInterval || 5;\r\n    strategy.minimumGreenTime = data.minimumGreenTime || strategy.configOptions.minimumGreenTime || 10;\r\n    strategy.priorityThreshold = data.priorityThreshold || strategy.configOptions.priorityThreshold || 7;\r\n    strategy.emergencyThreshold = data.emergencyThreshold || strategy.configOptions.emergencyThreshold || 9;\r\n    strategy.fairnessWindow = data.fairnessWindow || strategy.configOptions.fairnessWindow || 60;\r\n    \r\n    strategy.prioritizedDirections = data.prioritizedDirections || strategy.configOptions.prioritizedDirections || [];\r\n    strategy.prioritizedMovements = data.prioritizedMovements || strategy.configOptions.prioritizedMovements || [];\r\n    \r\n    // Restore signal state if available\r\n    if (data.currentSignals) {\r\n      strategy.currentSignals = data.currentSignals;\r\n    }\r\n    \r\n    // Restore active movements\r\n    if (data.activeMovements) {\r\n      strategy.activeMovements = data.activeMovements;\r\n    }\r\n    \r\n    // Restore timers and history\r\n    if (data.greenTimers) strategy.greenTimers = data.greenTimers;\r\n    if (data.directionHistory) strategy.directionHistory = data.directionHistory;\r\n    if (data.timeSinceLastDecision !== undefined) strategy.timeSinceLastDecision = data.timeSinceLastDecision;\r\n    \r\n    strategy.initialize(intersection);\r\n    return strategy;\r\n  }\r\n  \r\n  /**\r\n   * Convert to JSON for serialization\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      ...super.toJSON(),\r\n      strategyType: this.strategyType,\r\n      decisionInterval: this.decisionInterval,\r\n      minimumGreenTime: this.minimumGreenTime,\r\n      priorityThreshold: this.priorityThreshold,\r\n      emergencyThreshold: this.emergencyThreshold,\r\n      fairnessWindow: this.fairnessWindow,\r\n      \r\n      prioritizedDirections: this.prioritizedDirections,\r\n      prioritizedMovements: this.prioritizedMovements,\r\n      \r\n      currentSignals: this.currentSignals,\r\n      activeMovements: this.activeMovements,\r\n      greenTimers: this.greenTimers,\r\n      directionHistory: this.directionHistory,\r\n      timeSinceLastDecision: this.timeSinceLastDecision,\r\n      \r\n      // Current traffic metrics\r\n      queueLengths: this.queueLengths,\r\n      waitTimes: this.waitTimes,\r\n      flowRates: this.flowRates,\r\n      congestionScores: this.congestionScores\r\n    };\r\n  }\r\n}\r\n","/**\r\n * TrafficLightController\r\n * \r\n * Manages traffic light control for intersections using pluggable strategies.\r\n * This class replaces the old ControlSignals class with a more modular approach.\r\n */\r\n\r\nimport Intersection = require('../intersection');\r\nimport { ITrafficControlStrategy, TrafficState } from './ITrafficControlStrategy';\r\nimport { trafficControlStrategyManager } from './TrafficControlStrategyManager';\r\nimport { kpiCollector } from '../kpi-collector';\r\n\r\nclass TrafficLightController {\r\n  /** Reference to the controlled intersection */\r\n  public intersection: Intersection;\r\n  \r\n  /** Current simulation time */\r\n  public time: number = 0;\r\n  \r\n  /** The active traffic control strategy */\r\n  private strategy: ITrafficControlStrategy;\r\n  \r\n  /** Traffic state metrics for each approach */\r\n  private trafficStates: TrafficState[] = [];\r\n  \r\n  /**\r\n   * Create a new traffic light controller for an intersection\r\n   */\r\n  constructor(intersection: Intersection) {\r\n    this.intersection = intersection;\r\n    this.strategy = trafficControlStrategyManager.applyToIntersection(intersection);\r\n    this.initializeTrafficStates();\r\n  }\r\n  \r\n  /**\r\n   * Initialize traffic state tracking for each approach\r\n   */\r\n  private initializeTrafficStates(): void {\r\n    // Create a traffic state for each approach (N, E, S, W)\r\n    this.trafficStates = [0, 1, 2, 3].map(() => ({\r\n      queueLength: 0,\r\n      averageWaitTime: 0,\r\n      maxWaitTime: 0,\r\n      flowRate: 0,\r\n      signalState: [0, 0, 0] // [left, forward, right]\r\n    }));\r\n  }\r\n  \r\n  /**\r\n   * Create a copy of a traffic light controller\r\n   * Used when deserializing world state\r\n   */\r\n  static copy(controller: any, intersection: Intersection): TrafficLightController {\r\n    if (!controller) {\r\n      return new TrafficLightController(intersection);\r\n    }\r\n    \r\n    // Create a proper instance with the correct prototype\r\n    const result = new TrafficLightController(intersection);\r\n    \r\n    // Copy over basic properties\r\n    result.time = controller.time || 0;\r\n    \r\n    // Load the strategy from saved data if available\r\n    if (controller.strategy) {\r\n      result.strategy = trafficControlStrategyManager.createFromJSON(\r\n        controller.strategy,\r\n        intersection\r\n      );\r\n    }\r\n    \r\n    return result;\r\n  }\r\n  \r\n  /**\r\n   * Convert to a serializable object for storage\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      time: this.time,\r\n      strategy: this.strategy.toJSON()\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Change the active traffic control strategy\r\n   */\r\n  setStrategy(strategyType: string): boolean {\r\n    if (trafficControlStrategyManager.selectStrategy(strategyType)) {\r\n      this.strategy = trafficControlStrategyManager.applyToIntersection(this.intersection);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Get the current active strategy\r\n   */\r\n  getStrategy(): ITrafficControlStrategy {\r\n    return this.strategy;\r\n  }\r\n  \r\n  /**\r\n   * Get the current traffic light state for all approaches\r\n   * Returns a 2D array: [approach][movement] where:\r\n   * - approach is 0-3 (N, E, S, W)\r\n   * - movement is 0-2 (left, forward, right)\r\n   * - value is 0 (RED) or 1 (GREEN)\r\n   */\r\n  get state(): number[][] {\r\n    // Return the current state without updating the strategy again\r\n    // The strategy is already updated in onTick\r\n    return this.strategy.getCurrentSignalStates ? \r\n      this.strategy.getCurrentSignalStates() : \r\n      this.strategy.update(0, this.trafficStates);\r\n  }\r\n  \r\n  /**\r\n   * Update traffic states based on KPI metrics\r\n   * This fetches real-time data from the KPI collector to inform adaptive strategies\r\n   */\r\n  private updateTrafficStates(): void {\r\n    // Get intersection ID for KPI lookups\r\n    const intersectionId = this.intersection.id;\r\n    \r\n    // Get data from KPI collector\r\n    const metrics = kpiCollector.getMetrics();\r\n    const intersectionMetric = metrics.intersectionMetrics[intersectionId];\r\n    \r\n    // Get lane metrics for all connected roads\r\n    const connectedLanes: { [direction: number]: any[] } = {\r\n      0: [], // North\r\n      1: [], // East\r\n      2: [], // South\r\n      3: []  // West\r\n    };\r\n    \r\n    // Get road directions from intersection\r\n    // Map lanes to their cardinal directions\r\n    if (this.intersection.roads) {\r\n      this.intersection.roads.forEach((road, index) => {\r\n        // Use index % 4 to map to N, E, S, W (0, 1, 2, 3)\r\n        const direction = index % 4;\r\n        \r\n        if (road.lanes) {\r\n          road.lanes.forEach(lane => {\r\n            if (lane.id && metrics.laneMetrics[lane.id]) {\r\n              connectedLanes[direction].push(metrics.laneMetrics[lane.id]);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Update traffic states with real data\r\n    for (let i = 0; i < this.trafficStates.length; i++) {\r\n      // Get combined metrics for this approach\r\n      const lanesToCheck = connectedLanes[i] || [];\r\n      \r\n      // Aggregate metrics from all lanes for this approach\r\n      let queueLength = 0;\r\n      let totalWaitTime = 0;\r\n      let maxWaitTime = 0;\r\n      let flowRate = 0;\r\n      let count = 0;\r\n      \r\n      lanesToCheck.forEach(laneMetric => {\r\n        queueLength += laneMetric.queueLength || 0;\r\n        totalWaitTime += laneMetric.averageWaitTime || 0;\r\n        maxWaitTime = Math.max(maxWaitTime, laneMetric.averageWaitTime || 0);\r\n        flowRate += laneMetric.throughput || 0;\r\n        count++;\r\n      });\r\n      \r\n      // Update traffic state with real data\r\n      this.trafficStates[i].queueLength = queueLength;\r\n      this.trafficStates[i].averageWaitTime = count > 0 ? totalWaitTime / count : 0;\r\n      this.trafficStates[i].maxWaitTime = maxWaitTime;\r\n      this.trafficStates[i].flowRate = flowRate;\r\n      \r\n      // Copy current signal state\r\n      if (this.state && this.state[i]) {\r\n        this.trafficStates[i].signalState = [...this.state[i]];\r\n      }\r\n      \r\n      // If intersection metrics exist, use them to enhance our data\r\n      if (intersectionMetric) {\r\n        this.trafficStates[i].queueLength = Math.max(\r\n          this.trafficStates[i].queueLength, \r\n          intersectionMetric.averageQueueLength / 4\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update the traffic signals based on elapsed time\r\n   * This is called every tick of the simulation\r\n   */\r\n  onTick = (delta: number): void => {\r\n    // Update time\r\n    this.time += delta;\r\n    \r\n    // Update traffic states with real data from KPI collector\r\n    this.updateTrafficStates();\r\n    \r\n    // Explicitly update the strategy with the latest traffic states\r\n    // This ensures the strategy has the latest data even if state isn't accessed\r\n    this.strategy.update(delta, this.trafficStates);\r\n  }\r\n}\r\n\r\nexport = TrafficLightController;\r\n","/**\r\n * AdaptiveTimingStrategyTest\r\n * \r\n * Test suite for the AdaptiveTimingStrategy implementation\r\n */\r\n\r\nimport Intersection = require('../../intersection');\r\nimport Rect = require('../../../geom/rect');\r\nimport { AdaptiveTimingStrategy } from '../AdaptiveTimingStrategy';\r\nimport { TrafficState } from '../ITrafficControlStrategy';\r\n\r\nexport class AdaptiveTimingStrategyTest {\r\n  private strategy: AdaptiveTimingStrategy;\r\n  private intersection: Intersection;\r\n  \r\n  constructor() {\r\n    // Create a mock intersection\r\n    this.intersection = new Intersection(new Rect(0, 0, 100, 100));\r\n    this.intersection.id = 'test-intersection';\r\n    \r\n    // Create the strategy\r\n    this.strategy = new AdaptiveTimingStrategy();\r\n    \r\n    // Enable logging for tests\r\n    this.strategy.updateConfig({ enableLogging: true });\r\n  }\r\n  \r\n  /**\r\n   * Run all tests\r\n   */\r\n  runTests(): boolean {\r\n    console.log('=== Running AdaptiveTimingStrategy Tests ===');\r\n    \r\n    let allPassed = true;\r\n    const tests = [\r\n      this.testInitialization,\r\n      this.testNoTrafficDefaultBehavior,\r\n      this.testLightTrafficBehavior,\r\n      this.testHeavyTrafficBehavior,\r\n      this.testImbalancedTrafficBehavior,\r\n      this.testRushHourTrafficBehavior,\r\n      this.testConfigOptions,\r\n      this.testSerialization\r\n    ];\r\n    \r\n    for (const test of tests) {\r\n      try {\r\n        console.log(`\\nRunning: ${test.name}`);\r\n        const passed = test.call(this);\r\n        console.log(`${test.name}: ${passed ? 'PASSED' : 'FAILED'}`);\r\n        allPassed = allPassed && passed;\r\n      } catch (e) {\r\n        console.error(`Test ${test.name} FAILED with error:`, e);\r\n        allPassed = false;\r\n      }\r\n    }\r\n    \r\n    console.log(`\\nFinal result: ${allPassed ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED'}`);\r\n    return allPassed;\r\n  }\r\n  \r\n  /**\r\n   * Test basic initialization\r\n   */\r\n  testInitialization(): boolean {\r\n    this.setup();\r\n    \r\n    // Check that strategy initialized properly\r\n    return this.strategy.strategyType === 'adaptive-timing' && \r\n           this.strategy.getCurrentPhase() === 0;\r\n  }\r\n  \r\n  /**\r\n   * Test behavior with no traffic\r\n   */\r\n  testNoTrafficDefaultBehavior(): boolean {\r\n    this.setup();\r\n    \r\n    // Simulate 30 seconds with no traffic\r\n    const states = this.createTrafficStates([0, 0, 0, 0], [0, 0, 0, 0]);\r\n    \r\n    // Should behave like fixed timing\r\n    let phaseChanged = false;\r\n    let totalTime = 0;\r\n    const timeStep = 1.0; // 1 second steps\r\n    \r\n    // Run for up to 120 seconds\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      // Check if phase changed\r\n      if (this.strategy.getCurrentPhase() !== 0) {\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase changed after ${totalTime}s with no traffic`);\r\n    \r\n    // Should change at around the base duration (default is 30s)\r\n    const baseTime = this.strategy.getConfigOptions().baseDuration;\r\n    \r\n    // Allow 20% tolerance\r\n    return phaseChanged && Math.abs(totalTime - baseTime) < (baseTime * 0.2);\r\n  }\r\n  \r\n  /**\r\n   * Test behavior with light traffic\r\n   */\r\n  testLightTrafficBehavior(): boolean {\r\n    this.setup();\r\n    \r\n    // Light traffic on all approaches\r\n    const queueLengths = [1, 1, 1, 1];\r\n    const waitTimes = [5, 5, 5, 5];\r\n    const states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Should adjust slightly from base timing\r\n    let phaseChanged = false;\r\n    let totalTime = 0;\r\n    const timeStep = 1.0;\r\n    \r\n    // Run for up to 120 seconds\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      if (this.strategy.getCurrentPhase() !== 0) {\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase changed after ${totalTime}s with light traffic`);\r\n    \r\n    // Should be slightly longer than base\r\n    const baseTime = this.strategy.getConfigOptions().baseDuration;\r\n    return phaseChanged && totalTime > baseTime && totalTime < baseTime * 1.5;\r\n  }\r\n  \r\n  /**\r\n   * Test behavior with heavy traffic\r\n   */\r\n  testHeavyTrafficBehavior(): boolean {\r\n    this.setup();\r\n    \r\n    // Heavy traffic on all approaches\r\n    const queueLengths = [5, 5, 5, 5];\r\n    const waitTimes = [20, 20, 20, 20];\r\n    const states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Should extend phase to closer to max duration\r\n    let phaseChanged = false;\r\n    let totalTime = 0;\r\n    const timeStep = 1.0;\r\n    \r\n    // Run for up to 120 seconds\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      if (this.strategy.getCurrentPhase() !== 0) {\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase changed after ${totalTime}s with heavy traffic`);\r\n    \r\n    // Should be longer, close to max\r\n    const baseTime = this.strategy.getConfigOptions().baseDuration;\r\n    const maxTime = this.strategy.getConfigOptions().maxPhaseDuration;\r\n    \r\n    // Should be at least 50% of the way from base to max\r\n    const expectedMinTime = baseTime + (maxTime - baseTime) * 0.5;\r\n    return phaseChanged && totalTime >= expectedMinTime;\r\n  }\r\n  \r\n  /**\r\n   * Test behavior with imbalanced traffic\r\n   */\r\n  testImbalancedTrafficBehavior(): boolean {\r\n    this.setup();\r\n    \r\n    // Start with balanced light traffic\r\n    let queueLengths = [1, 1, 1, 1];\r\n    let waitTimes = [5, 5, 5, 5];\r\n    let states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Run for a while to establish baseline\r\n    for (let i = 0; i < 10; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Now create imbalance - heavy traffic on next phase (E-W)\r\n    queueLengths = [1, 5, 1, 5]; // Higher on East-West (indices 1 & 3)\r\n    waitTimes = [5, 25, 5, 25];  // Higher on East-West\r\n    states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Should switch earlier than normal\r\n    let phaseChanged = false;\r\n    let totalTime = 0;\r\n    const timeStep = 1.0;\r\n    \r\n    // Run for up to 120 seconds\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      if (this.strategy.getCurrentPhase() !== 0) {\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase changed after ${totalTime}s with imbalanced traffic`);\r\n    \r\n    // Should switch earlier than base time due to high demand in next phase\r\n    const baseTime = this.strategy.getConfigOptions().baseDuration;\r\n    return phaseChanged && totalTime < baseTime * 0.9;\r\n  }\r\n  \r\n  /**\r\n   * Test behavior with rush hour traffic pattern\r\n   */\r\n  testRushHourTrafficBehavior(): boolean {\r\n    this.setup();\r\n    \r\n    // First test: consistent high demand on North-South (current phase)\r\n    let queueLengths = [5, 1, 5, 1]; // High on N-S (indices 0 & 2)\r\n    let waitTimes = [20, 5, 20, 5];  // High on N-S\r\n    let states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Should extend the phase\r\n    let phaseChanged = false;\r\n    let totalTime = 0;\r\n    const timeStep = 1.0;\r\n    \r\n    // Run for up to 120 seconds\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      if (this.strategy.getCurrentPhase() !== 0) {\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase 1 changed after ${totalTime}s with rush hour traffic (N-S)`);\r\n    \r\n    // Now advance to E-W phase (phase 3)\r\n    this.strategy.update(timeStep, states); // Phase 1\r\n    this.strategy.update(timeStep, states); // Phase 2\r\n    \r\n    // Reset metrics\r\n    phaseChanged = false;\r\n    totalTime = 0;\r\n    \r\n    // Run with low traffic on E-W (current phase)\r\n    queueLengths = [5, 1, 5, 1]; // Still high on N-S, low on E-W\r\n    waitTimes = [20, 5, 20, 5];\r\n    states = this.createTrafficStates(queueLengths, waitTimes);\r\n    \r\n    // Should shorten the phase for E-W since demand is low\r\n    for (let i = 0; i < 120 && !phaseChanged; i++) {\r\n      this.strategy.update(timeStep, states);\r\n      totalTime += timeStep;\r\n      \r\n      if (this.strategy.getCurrentPhase() !== 2) { // Check phase 3 changed\r\n        phaseChanged = true;\r\n      }\r\n    }\r\n    \r\n    console.log(`Phase 3 changed after ${totalTime}s with rush hour traffic (low E-W)`);\r\n    \r\n    // Should change quickly since there's low traffic on current phase but high on next\r\n    const minTime = this.strategy.getConfigOptions().minPhaseDuration;\r\n    const baseTime = this.strategy.getConfigOptions().baseDuration;\r\n    \r\n    // Should be closer to minimum than base\r\n    return phaseChanged && totalTime < (minTime + baseTime) / 2;\r\n  }\r\n  \r\n  /**\r\n   * Test configuration options\r\n   */\r\n  testConfigOptions(): boolean {\r\n    this.setup();\r\n    \r\n    // Update configuration\r\n    const testConfig = {\r\n      minPhaseDuration: 8,\r\n      maxPhaseDuration: 45,\r\n      baseDuration: 25,\r\n      trafficSensitivity: 0.8,\r\n      queueWeight: 1.5,\r\n      waitTimeWeight: 0.7\r\n    };\r\n    \r\n    this.strategy.updateConfig(testConfig);\r\n    \r\n    // Check that config was applied\r\n    const config = this.strategy.getConfigOptions();\r\n    return config.minPhaseDuration === 8 && \r\n           config.maxPhaseDuration === 45 &&\r\n           config.baseDuration === 25 &&\r\n           config.trafficSensitivity === 0.8 &&\r\n           config.queueWeight === 1.5 &&\r\n           config.waitTimeWeight === 0.7;\r\n  }\r\n  \r\n  /**\r\n   * Test serialization and deserialization\r\n   */\r\n  testSerialization(): boolean {\r\n    this.setup();\r\n    \r\n    // Update configuration with non-default values\r\n    this.strategy.updateConfig({\r\n      minPhaseDuration: 8,\r\n      maxPhaseDuration: 45,\r\n      trafficSensitivity: 0.8,\r\n      enableLogging: true\r\n    });\r\n    \r\n    // Run for a bit to accumulate some history\r\n    const states = this.createTrafficStates([3, 1, 3, 1], [15, 5, 15, 5]);\r\n    for (let i = 0; i < 15; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Serialize\r\n    const json = this.strategy.toJSON();\r\n    \r\n    // Deserialize\r\n    const newStrategy = AdaptiveTimingStrategy.fromJSON(json, this.intersection);\r\n    \r\n    // Check that key properties match\r\n    return newStrategy.strategyType === this.strategy.strategyType && \r\n           newStrategy.getConfigOptions().minPhaseDuration === 8 &&\r\n           newStrategy.getConfigOptions().maxPhaseDuration === 45 &&\r\n           newStrategy.getConfigOptions().trafficSensitivity === 0.8 &&\r\n           newStrategy.getConfigOptions().enableLogging === true;\r\n  }\r\n  \r\n  /**\r\n   * Helper to create traffic states for testing\r\n   */\r\n  private createTrafficStates(queueLengths: number[], waitTimes: number[]): TrafficState[] {\r\n    const states: TrafficState[] = [];\r\n    \r\n    for (let i = 0; i < 4; i++) {\r\n      states.push({\r\n        queueLength: queueLengths[i] || 0,\r\n        averageWaitTime: waitTimes[i] || 0,\r\n        maxWaitTime: waitTimes[i] * 1.5 || 0,\r\n        flowRate: queueLengths[i] > 0 ? queueLengths[i] / 2 : 0,\r\n        signalState: [0, 0, 0] // Placeholder, updated by strategy\r\n      });\r\n    }\r\n    \r\n    return states;\r\n  }\r\n  \r\n  /**\r\n   * Reset for a new test\r\n   */\r\n  private setup() {\r\n    this.strategy = new AdaptiveTimingStrategy();\r\n    this.strategy.initialize(this.intersection);\r\n    this.strategy.updateConfig({ enableLogging: true });\r\n  }\r\n}\r\n\r\n// Export the test class\r\nexport default AdaptiveTimingStrategyTest;\r\n","/**\r\n * FixedTimingStrategy Tests\r\n * \r\n * This file contains tests for the FixedTimingStrategy to verify its behavior\r\n * and timing accuracy.\r\n */\r\n\r\nimport Intersection = require('../../intersection');\r\nimport Rect = require('../../../geom/rect');\r\nimport { FixedTimingStrategy } from '../FixedTimingStrategy';\r\nimport { TrafficState } from '../ITrafficControlStrategy';\r\n\r\n/**\r\n * Simple test utility to verify FixedTimingStrategy behavior\r\n */\r\nexport class FixedTimingStrategyTest {\r\n  private strategy: FixedTimingStrategy;\r\n  private intersection: Intersection;\r\n  private testResults: {\r\n    name: string;\r\n    passed: boolean;\r\n    message: string;\r\n  }[] = [];\r\n\r\n  constructor() {\r\n    // Create a test intersection\r\n    this.intersection = new Intersection(new Rect(0, 0, 100, 100));\r\n    \r\n    // Create the strategy\r\n    this.strategy = new FixedTimingStrategy();\r\n    this.strategy.initialize(this.intersection);\r\n    \r\n    // Enable logging for the strategy\r\n    this.strategy.setLogging(true);\r\n  }\r\n\r\n  /**\r\n   * Run all tests\r\n   */\r\n  runAllTests(): void {\r\n    console.log('=== Running FixedTimingStrategy Tests ===');\r\n    \r\n    this.testInitialization();\r\n    this.testPhaseTransitions();\r\n    this.testTimingAccuracy();\r\n    this.testConfigChanges();\r\n    this.testSerializationDeserialization();\r\n    \r\n    // Report results\r\n    this.reportResults();\r\n  }\r\n\r\n  /**\r\n   * Test basic initialization\r\n   */\r\n  testInitialization(): void {\r\n    try {\r\n      // Check strategy has correct number of phases\r\n      const totalPhases = this.strategy.getTotalPhases();\r\n      this.assert(\r\n        totalPhases > 0,\r\n        'Initialization',\r\n        `Strategy should have phases defined (found ${totalPhases})`\r\n      );\r\n      \r\n      // Check current phase is 0\r\n      const currentPhase = this.strategy.getCurrentPhase();\r\n      this.assert(\r\n        currentPhase === 0,\r\n        'Initialization',\r\n        `Initial phase should be 0 (found ${currentPhase})`\r\n      );\r\n      \r\n      // Check config options\r\n      const config = this.strategy.getConfigOptions();\r\n      this.assert(\r\n        config.baseDuration > 0,\r\n        'Initialization',\r\n        `Base duration should be positive (found ${config.baseDuration})`\r\n      );\r\n    } catch (error) {\r\n      this.fail('Initialization', `Unexpected error: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test phase transitions\r\n   */\r\n  testPhaseTransitions(): void {\r\n    try {\r\n      // Reset the strategy\r\n      this.strategy.reset();\r\n      \r\n      // Check initial phase\r\n      const initialPhase = this.strategy.getCurrentPhase();\r\n      this.assert(\r\n        initialPhase === 0,\r\n        'PhaseTransitions',\r\n        `Initial phase should be 0 (found ${initialPhase})`\r\n      );\r\n      \r\n      // Get config and set base duration to 1 second for quicker tests\r\n      const config = this.strategy.getConfigOptions();\r\n      config.baseDuration = 1;\r\n      config.variationPercentage = 0; // No variation for predictable tests\r\n      this.strategy.updateConfig(config);\r\n      \r\n      // Get initial signal states\r\n      const initialStates = this.strategy.update(0);\r\n      \r\n      // Advance time by just under 1 second\r\n      this.strategy.update(0.9);\r\n      const samePhaseStates = this.strategy.update(0);\r\n      \r\n      // Check we're still in the same phase\r\n      this.assert(\r\n        this.strategy.getCurrentPhase() === initialPhase,\r\n        'PhaseTransitions',\r\n        `Should remain in phase ${initialPhase} after 0.9s`\r\n      );\r\n      \r\n      // Signal states should be the same\r\n      this.assert(\r\n        JSON.stringify(initialStates) === JSON.stringify(samePhaseStates),\r\n        'PhaseTransitions',\r\n        'Signal states should be unchanged within the same phase'\r\n      );\r\n      \r\n      // Advance time beyond the phase duration\r\n      this.strategy.update(0.2);\r\n      \r\n      // Check we've moved to the next phase\r\n      const totalPhases = this.strategy.getTotalPhases();\r\n      const expectedPhase = totalPhases > 1 ? 1 : 0;\r\n      this.assert(\r\n        this.strategy.getCurrentPhase() === expectedPhase,\r\n        'PhaseTransitions',\r\n        `Should advance to phase ${expectedPhase} after exceeding duration`\r\n      );\r\n      \r\n      // Signal states should be different if we have multiple phases\r\n      if (totalPhases > 1) {\r\n        const newStates = this.strategy.update(0);\r\n        this.assert(\r\n          JSON.stringify(initialStates) !== JSON.stringify(newStates),\r\n          'PhaseTransitions',\r\n          'Signal states should change between phases'\r\n        );\r\n      }\r\n    } catch (error) {\r\n      this.fail('PhaseTransitions', `Unexpected error: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test timing accuracy\r\n   */\r\n  testTimingAccuracy(): void {\r\n    try {\r\n      // Reset the strategy\r\n      this.strategy.reset();\r\n      this.strategy.resetTimingStatistics();\r\n      \r\n      // Get config and set base duration to 1 second for quicker tests\r\n      const config = this.strategy.getConfigOptions();\r\n      config.baseDuration = 1;\r\n      config.variationPercentage = 0; // No variation for predictable tests\r\n      this.strategy.updateConfig(config);\r\n      \r\n      // Run for multiple phases\r\n      const phasesToTest = 3;\r\n      const totalPhases = this.strategy.getTotalPhases();\r\n      const actualPhases = Math.min(phasesToTest, totalPhases);\r\n      \r\n      console.log(`Testing timing accuracy over ${actualPhases} phases...`);\r\n      \r\n      for (let i = 0; i < actualPhases; i++) {\r\n        // Small increments to simulate real-time updates\r\n        for (let time = 0; time < 1.1; time += 0.1) {\r\n          this.strategy.update(0.1);\r\n        }\r\n      }\r\n      \r\n      // Get timing statistics\r\n      const stats = this.strategy.getTimingStatistics();\r\n      \r\n      // Check average deviation is within 10%\r\n      this.assert(\r\n        stats.averageDeviation < 0.1,\r\n        'TimingAccuracy',\r\n        `Average timing deviation should be less than 0.1s (found ${stats.averageDeviation.toFixed(3)}s)`\r\n      );\r\n      \r\n      // Check max deviation is within 20%\r\n      this.assert(\r\n        stats.maxDeviation < 0.2,\r\n        'TimingAccuracy',\r\n        `Max timing deviation should be less than 0.2s (found ${stats.maxDeviation.toFixed(3)}s)`\r\n      );\r\n    } catch (error) {\r\n      this.fail('TimingAccuracy', `Unexpected error: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test configuration changes\r\n   */\r\n  testConfigChanges(): void {\r\n    try {\r\n      // Reset the strategy\r\n      this.strategy.reset();\r\n      \r\n      // Get initial config\r\n      const initialConfig = this.strategy.getConfigOptions();\r\n      \r\n      // Update config\r\n      const newConfig = {\r\n        ...initialConfig,\r\n        baseDuration: 2,\r\n        variationPercentage: 0\r\n      };\r\n      \r\n      this.strategy.updateConfig(newConfig);\r\n      \r\n      // Check config was updated\r\n      const updatedConfig = this.strategy.getConfigOptions();\r\n      this.assert(\r\n        updatedConfig.baseDuration === 2,\r\n        'ConfigChanges',\r\n        `Base duration should be updated to 2 (found ${updatedConfig.baseDuration})`\r\n      );\r\n      \r\n      // Check timing is affected by config change\r\n      // Run for one phase\r\n      let phaseChanged = false;\r\n      let initialPhase = this.strategy.getCurrentPhase();\r\n      \r\n      // Should NOT change phase after 1 second (new duration is 2 seconds)\r\n      for (let time = 0; time < 1.1; time += 0.1) {\r\n        this.strategy.update(0.1);\r\n        if (this.strategy.getCurrentPhase() !== initialPhase) {\r\n          phaseChanged = true;\r\n        }\r\n      }\r\n      \r\n      this.assert(\r\n        !phaseChanged,\r\n        'ConfigChanges',\r\n        'Phase should not change before the new duration'\r\n      );\r\n      \r\n      // Should change phase after another second\r\n      phaseChanged = false;\r\n      for (let time = 0; time < 1.1; time += 0.1) {\r\n        this.strategy.update(0.1);\r\n        if (this.strategy.getCurrentPhase() !== initialPhase) {\r\n          phaseChanged = true;\r\n        }\r\n      }\r\n      \r\n      // Only assert if we have more than one phase\r\n      if (this.strategy.getTotalPhases() > 1) {\r\n        this.assert(\r\n          phaseChanged,\r\n          'ConfigChanges',\r\n          'Phase should change after the new duration'\r\n        );\r\n      }\r\n    } catch (error) {\r\n      this.fail('ConfigChanges', `Unexpected error: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test serialization and deserialization\r\n   */\r\n  testSerializationDeserialization(): void {\r\n    try {\r\n      // Reset the strategy\r\n      this.strategy.reset();\r\n      \r\n      // Update config for a unique test value\r\n      const testConfig = {\r\n        baseDuration: 3.5,\r\n        variationPercentage: 2.5,\r\n        testValue: 'test123'\r\n      };\r\n      \r\n      this.strategy.updateConfig(testConfig);\r\n      \r\n      // Set a specific phase\r\n      while (this.strategy.getCurrentPhase() !== 1 % this.strategy.getTotalPhases()) {\r\n        this.strategy.update(10); // Force phase change\r\n      }\r\n      \r\n      // Serialize\r\n      const serialized = this.strategy.toJSON();\r\n      \r\n      // Create a new strategy from the serialized data\r\n      const newStrategy = FixedTimingStrategy.fromJSON(serialized, this.intersection);\r\n      \r\n      // Check deserialized properties\r\n      this.assert(\r\n        newStrategy.getCurrentPhase() === this.strategy.getCurrentPhase(),\r\n        'Serialization',\r\n        `Current phase should be preserved (expected ${this.strategy.getCurrentPhase()}, got ${newStrategy.getCurrentPhase()})`\r\n      );\r\n      \r\n      // Check config was preserved\r\n      const deserializedConfig = newStrategy.getConfigOptions();\r\n      this.assert(\r\n        deserializedConfig.baseDuration === testConfig.baseDuration,\r\n        'Serialization',\r\n        `Base duration should be preserved (expected ${testConfig.baseDuration}, got ${deserializedConfig.baseDuration})`\r\n      );\r\n      \r\n      this.assert(\r\n        deserializedConfig.testValue === testConfig.testValue,\r\n        'Serialization',\r\n        `Custom config values should be preserved (expected ${testConfig.testValue}, got ${deserializedConfig.testValue})`\r\n      );\r\n    } catch (error) {\r\n      this.fail('Serialization', `Unexpected error: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assert a condition and record the result\r\n   */\r\n  private assert(condition: boolean, testName: string, message: string): void {\r\n    this.testResults.push({\r\n      name: testName,\r\n      passed: condition,\r\n      message: message\r\n    });\r\n    \r\n    if (!condition) {\r\n      console.error(`❌ FAILED: ${testName} - ${message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record a failed test\r\n   */\r\n  private fail(testName: string, message: string): void {\r\n    this.testResults.push({\r\n      name: testName,\r\n      passed: false,\r\n      message: message\r\n    });\r\n    \r\n    console.error(`❌ FAILED: ${testName} - ${message}`);\r\n  }\r\n\r\n  /**\r\n   * Report test results\r\n   */\r\n  private reportResults(): void {\r\n    const total = this.testResults.length;\r\n    const passed = this.testResults.filter(r => r.passed).length;\r\n    \r\n    console.log('=== FixedTimingStrategy Test Results ===');\r\n    console.log(`Total Tests: ${total}`);\r\n    console.log(`Passed: ${passed}`);\r\n    console.log(`Failed: ${total - passed}`);\r\n    \r\n    const uniqueTests = [...new Set(this.testResults.map(r => r.name))];\r\n    \r\n    uniqueTests.forEach(testName => {\r\n      const testsForName = this.testResults.filter(r => r.name === testName);\r\n      const passedForName = testsForName.filter(r => r.passed).length;\r\n      \r\n      console.log(`\\n${testName}: ${passedForName}/${testsForName.length} passed`);\r\n      \r\n      testsForName.filter(r => !r.passed).forEach(failed => {\r\n        console.error(`  ❌ ${failed.message}`);\r\n      });\r\n    });\r\n    \r\n    console.log('\\n=== End of Test Results ===');\r\n  }\r\n}\r\n\r\n/**\r\n * Run the tests if this file is executed directly\r\n */\r\nexport function runFixedTimingStrategyTests(): void {\r\n  const tester = new FixedTimingStrategyTest();\r\n  tester.runAllTests();\r\n}\r\n\r\n// If running directly from Node.js\r\nif (typeof window === 'undefined' && require.main === module) {\r\n  runFixedTimingStrategyTests();\r\n}\r\n","/**\r\n * Test Runner\r\n * \r\n * This file exports a test runner that can be used to run tests from the browser console.\r\n */\r\n\r\nimport { runFixedTimingStrategyTests } from './FixedTimingStrategyTest';\r\nimport AdaptiveTimingStrategyTest from './AdaptiveTimingStrategyTest';\r\nimport TrafficEnforcerStrategyTest from './TrafficEnforcerStrategyTest';\r\nimport TrafficLightControllerTest from './TrafficLightControllerTest';\r\n\r\n/**\r\n * Test runner for traffic control strategies\r\n */\r\nexport class TrafficControlTestRunner {\r\n  /**\r\n   * Run all tests\r\n   */\r\n  runAllTests(): void {\r\n    console.log('=== Running Traffic Control Tests ===');\r\n    this.runTrafficLightControllerTests(); // Run controller tests first\r\n    this.runFixedTimingTests();\r\n    this.runAdaptiveTimingTests();\r\n    this.runTrafficEnforcerTests();\r\n    console.log('=== All Tests Completed ===');\r\n  }\r\n  \r\n  /**\r\n   * Run traffic light controller tests\r\n   */\r\n  runTrafficLightControllerTests(): void {\r\n    console.log('\\n=== Traffic Light Controller Tests ===');\r\n    const tester = new TrafficLightControllerTest();\r\n    tester.runTests();\r\n  }\r\n  \r\n  /**\r\n   * Run fixed timing strategy tests\r\n   */\r\n  runFixedTimingTests(): void {\r\n    console.log('\\n=== Fixed Timing Strategy Tests ===');\r\n    runFixedTimingStrategyTests();\r\n  }\r\n  \r\n  /**\r\n   * Run adaptive timing strategy tests\r\n   */\r\n  runAdaptiveTimingTests(): void {\r\n    console.log('\\n=== Adaptive Timing Strategy Tests ===');\r\n    const tester = new AdaptiveTimingStrategyTest();\r\n    tester.runTests();\r\n  }\r\n  \r\n  /**\r\n   * Run traffic enforcer strategy tests\r\n   */\r\n  runTrafficEnforcerTests(): void {\r\n    console.log('\\n=== Traffic Enforcer Strategy Tests ===');\r\n    const tester = new TrafficEnforcerStrategyTest();\r\n    tester.runTests();\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const testRunner = new TrafficControlTestRunner();\r\n","/**\r\n * TrafficEnforcerStrategyTest\r\n * \r\n * Test suite for the TrafficEnforcerStrategy implementation\r\n */\r\n\r\nimport Intersection = require('../../intersection');\r\nimport Rect = require('../../../geom/rect');\r\nimport { TrafficEnforcerStrategy } from '../TrafficEnforcerStrategy';\r\nimport { TrafficState } from '../ITrafficControlStrategy';\r\n\r\nexport class TrafficEnforcerStrategyTest {\r\n  private strategy: TrafficEnforcerStrategy;\r\n  private intersection: Intersection;\r\n  \r\n  constructor() {\r\n    // Create a mock intersection\r\n    this.intersection = new Intersection(new Rect(0, 0, 100, 100));\r\n    this.intersection.id = 'test-intersection';\r\n    \r\n    // Create the strategy\r\n    this.strategy = new TrafficEnforcerStrategy();\r\n    \r\n    // Configure for testing\r\n    this.strategy.updateConfig({\r\n      decisionInterval: 2, // Shorter interval for testing\r\n      minimumGreenTime: 3  // Shorter minimum green time for testing\r\n    });\r\n    \r\n    this.strategy.initialize(this.intersection);\r\n  }\r\n  \r\n  /**\r\n   * Run all tests\r\n   */\r\n  runTests(): boolean {\r\n    console.log('=== Running TrafficEnforcerStrategy Tests ===');\r\n    \r\n    let allPassed = true;\r\n    const tests = [\r\n      this.testInitialization,\r\n      this.testBasicDecisionMaking,\r\n      this.testConflictAvoidance,\r\n      this.testPriorityHandling,\r\n      this.testEmergencyConditions,\r\n      this.testFairnessHandling,\r\n      this.testSerialization\r\n    ];\r\n    \r\n    for (const test of tests) {\r\n      try {\r\n        console.log(`\\nRunning: ${test.name}`);\r\n        const passed = test.call(this);\r\n        console.log(`${test.name}: ${passed ? 'PASSED' : 'FAILED'}`);\r\n        allPassed = allPassed && passed;\r\n      } catch (e) {\r\n        console.error(`Test ${test.name} FAILED with error:`, e);\r\n        allPassed = false;\r\n      }\r\n    }\r\n    \r\n    console.log(`\\nFinal result: ${allPassed ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED'}`);\r\n    return allPassed;\r\n  }\r\n  \r\n  /**\r\n   * Test basic initialization\r\n   */\r\n  testInitialization(): boolean {\r\n    this.setup();\r\n    \r\n    // Check that strategy initialized properly\r\n    const initialState = this.strategy.getCurrentSignalStates();\r\n    \r\n    // All signals should start as red\r\n    const allRed = initialState.every(direction => \r\n      direction.every(signal => signal === 0)\r\n    );\r\n    \r\n    return this.strategy.strategyType === 'traffic-enforcer' && allRed;\r\n  }\r\n  \r\n  /**\r\n   * Test basic decision-making\r\n   */\r\n  testBasicDecisionMaking(): boolean {\r\n    this.setup();\r\n    \r\n    // Simulate traffic in North direction\r\n    const states = this.createTrafficStates([5, 0, 0, 0], [20, 0, 0, 0]);\r\n    \r\n    // Run for a few seconds to trigger decision making\r\n    for (let i = 0; i < 10; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Check that at least one signal in the North direction is green\r\n    const currentState = this.strategy.getCurrentSignalStates();\r\n    const northSignal = currentState[0]; // North direction\r\n    \r\n    const northHasGreen = northSignal.some(signal => signal === 1);\r\n    \r\n    if (!northHasGreen) {\r\n      console.log(\"Expected North direction to have at least one green signal\");\r\n      console.log(\"Current state:\", currentState);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Test that conflicting movements aren't allowed simultaneously\r\n   */\r\n  testConflictAvoidance(): boolean {\r\n    this.setup();\r\n    \r\n    // Heavy congestion in all directions\r\n    const states = this.createTrafficStates([10, 10, 10, 10], [30, 30, 30, 30]);\r\n    \r\n    // Run for enough time to make several decisions\r\n    for (let i = 0; i < 20; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Check current state\r\n    const currentState = this.strategy.getCurrentSignalStates();\r\n    \r\n    // Define conflicting pairs to check\r\n    // We'll check a few key conflicts: \r\n    // 1. North-South vs East-West through movements\r\n    // 2. Left turns vs opposing through movements\r\n    const conflicts = [\r\n      { dir1: 0, mov1: 1, dir2: 1, mov2: 1 }, // N-straight vs E-straight\r\n      { dir1: 0, mov1: 0, dir2: 2, mov2: 1 }, // N-left vs S-straight\r\n      { dir1: 1, mov1: 0, dir2: 3, mov2: 1 }, // E-left vs W-straight\r\n    ];\r\n    \r\n    // Check each conflict pair\r\n    for (const conflict of conflicts) {\r\n      const signal1 = currentState[conflict.dir1][conflict.mov1];\r\n      const signal2 = currentState[conflict.dir2][conflict.mov2];\r\n      \r\n      if (signal1 === 1 && signal2 === 1) {\r\n        console.log(`Conflict detected: Direction ${conflict.dir1} movement ${conflict.mov1} and Direction ${conflict.dir2} movement ${conflict.mov2} are both green`);\r\n        console.log(\"Current state:\", currentState);\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Test priority handling\r\n   */\r\n  testPriorityHandling(): boolean {\r\n    this.setup();\r\n    \r\n    // Configure priorities\r\n    this.strategy.updateConfig({\r\n      prioritizedDirections: [1], // East direction gets priority\r\n      prioritizedMovements: [{ direction: 1, movement: 1 }] // East straight movement\r\n    });\r\n    \r\n    // Equal congestion in all directions\r\n    const states = this.createTrafficStates([5, 5, 5, 5], [15, 15, 15, 15]);\r\n    \r\n    // Run for enough time to make a decision\r\n    for (let i = 0; i < 10; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Check that East direction has been prioritized\r\n    const currentState = this.strategy.getCurrentSignalStates();\r\n    const eastSignal = currentState[1]; // East direction\r\n    const eastStraightIsGreen = eastSignal[1] === 1; // Check if straight movement is green\r\n    \r\n    if (!eastStraightIsGreen) {\r\n      console.log(\"Expected East straight movement to be prioritized\");\r\n      console.log(\"Current state:\", currentState);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Test emergency conditions\r\n   */\r\n  testEmergencyConditions(): boolean {\r\n    this.setup();\r\n    \r\n    // Configure emergency threshold\r\n    this.strategy.updateConfig({\r\n      emergencyThreshold: 8 // Lower threshold for testing\r\n    });\r\n    \r\n    // First, establish some baseline with moderate congestion\r\n    let states = this.createTrafficStates([3, 3, 3, 3], [10, 10, 10, 10]);\r\n    for (let i = 0; i < 5; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Record initial state\r\n    const initialState = this.strategy.getCurrentSignalStates();\r\n    \r\n    // Now create emergency in North direction\r\n    states = this.createTrafficStates([15, 3, 3, 3], [45, 10, 10, 10]);\r\n    \r\n    // Should trigger immediate decision\r\n    this.strategy.update(1.0, states);\r\n    \r\n    // Check that North direction has green signal after emergency\r\n    const currentState = this.strategy.getCurrentSignalStates();\r\n    const northSignal = currentState[0]; // North direction\r\n    const northHasGreen = northSignal.some(signal => signal === 1);\r\n    \r\n    if (!northHasGreen) {\r\n      console.log(\"Expected North direction to have green signal after emergency\");\r\n      console.log(\"Current state:\", currentState);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Test fairness handling\r\n   */\r\n  testFairnessHandling(): boolean {\r\n    this.setup();\r\n    \r\n    // First give a lot of green time to North direction\r\n    let states = this.createTrafficStates([10, 1, 1, 1], [30, 5, 5, 5]);\r\n    for (let i = 0; i < 30; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Now equalize congestion but South has been neglected\r\n    states = this.createTrafficStates([5, 5, 5, 5], [15, 15, 15, 15]);\r\n    \r\n    // Run for enough time to make several decisions\r\n    for (let i = 0; i < 20; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Check that South direction gets green time due to fairness\r\n    const currentState = this.strategy.getCurrentSignalStates();\r\n    let southGreenObserved = false;\r\n    \r\n    // We'd need to run the simulation longer to guarantee South gets green,\r\n    // but for test purposes, we'll just check if South has green now\r\n    if (currentState[2].some(signal => signal === 1)) {\r\n      southGreenObserved = true;\r\n    }\r\n    \r\n    return southGreenObserved;\r\n  }\r\n  \r\n  /**\r\n   * Test serialization and deserialization\r\n   */\r\n  testSerialization(): boolean {\r\n    this.setup();\r\n    \r\n    // Configure with non-default values\r\n    this.strategy.updateConfig({\r\n      decisionInterval: 7,\r\n      prioritizedDirections: [2],\r\n      priorityThreshold: 6\r\n    });\r\n    \r\n    // Establish some state\r\n    const states = this.createTrafficStates([5, 3, 8, 2], [15, 10, 25, 8]);\r\n    for (let i = 0; i < 10; i++) {\r\n      this.strategy.update(1.0, states);\r\n    }\r\n    \r\n    // Serialize\r\n    const json = this.strategy.toJSON();\r\n    \r\n    // Deserialize\r\n    const newStrategy = TrafficEnforcerStrategy.fromJSON(json, this.intersection);\r\n    \r\n    // Check that key properties match\r\n    const matchesType = newStrategy.strategyType === 'traffic-enforcer';\r\n    const matchesInterval = newStrategy.getConfigOptions().decisionInterval === 7;\r\n    const matchesPriorities = Array.isArray(newStrategy.getConfigOptions().prioritizedDirections) && \r\n                              newStrategy.getConfigOptions().prioritizedDirections.includes(2);\r\n    const matchesThreshold = newStrategy.getConfigOptions().priorityThreshold === 6;\r\n    \r\n    // Also check that signal states were preserved\r\n    const originalState = this.strategy.getCurrentSignalStates();\r\n    const newState = newStrategy.getCurrentSignalStates();\r\n    \r\n    const signalsMatch = JSON.stringify(originalState) === JSON.stringify(newState);\r\n    \r\n    return matchesType && matchesInterval && matchesPriorities && \r\n           matchesThreshold && signalsMatch;\r\n  }\r\n  \r\n  /**\r\n   * Helper to create traffic states for testing\r\n   */\r\n  private createTrafficStates(queueLengths: number[], waitTimes: number[]): TrafficState[] {\r\n    const states: TrafficState[] = [];\r\n    \r\n    for (let i = 0; i < 4; i++) {\r\n      states.push({\r\n        queueLength: queueLengths[i] || 0,\r\n        averageWaitTime: waitTimes[i] || 0,\r\n        maxWaitTime: waitTimes[i] * 1.5 || 0,\r\n        flowRate: queueLengths[i] > 0 ? queueLengths[i] / 2 : 0,\r\n        signalState: [0, 0, 0] // Placeholder, updated by strategy\r\n      });\r\n    }\r\n    \r\n    return states;\r\n  }\r\n  \r\n  /**\r\n   * Reset for a new test\r\n   */\r\n  private setup() {\r\n    this.strategy = new TrafficEnforcerStrategy();\r\n    this.strategy.updateConfig({\r\n      decisionInterval: 2, // Shorter interval for testing\r\n      minimumGreenTime: 3  // Shorter minimum green time for testing\r\n    });\r\n    this.strategy.initialize(this.intersection);\r\n  }\r\n}\r\n\r\n// Export the test class\r\nexport default TrafficEnforcerStrategyTest;\r\n","/**\r\n * TrafficLightControllerTest\r\n * \r\n * Test suite for the TrafficLightController class and its integration with strategies.\r\n * Tests that switching strategies changes control behavior and that the system\r\n * remains stable and efficient.\r\n */\r\n\r\nimport Intersection = require('../../intersection');\r\nimport Rect = require('../../../geom/rect');\r\nimport TrafficLightController = require('../TrafficLightController');\r\nimport { TrafficState } from '../ITrafficControlStrategy';\r\nimport { trafficControlStrategyManager } from '../TrafficControlStrategyManager';\r\nimport { FixedTimingStrategy } from '../FixedTimingStrategy';\r\nimport { AdaptiveTimingStrategy } from '../AdaptiveTimingStrategy';\r\nimport { TrafficEnforcerStrategy } from '../TrafficEnforcerStrategy';\r\n\r\nexport class TrafficLightControllerTest {\r\n  private intersection: Intersection;\r\n  private controller: TrafficLightController;\r\n  \r\n  constructor() {\r\n    // Create a mock intersection\r\n    this.intersection = new Intersection(new Rect(0, 0, 100, 100));\r\n    this.intersection.id = 'test-intersection';\r\n    \r\n    // Create the controller\r\n    this.controller = new TrafficLightController(this.intersection);\r\n  }\r\n  \r\n  /**\r\n   * Run all tests\r\n   */\r\n  runTests(): boolean {\r\n    console.log('=== Running TrafficLightController Tests ===');\r\n    \r\n    let allPassed = true;\r\n    const tests = [\r\n      this.testInitialization,\r\n      this.testStrategySwitch,\r\n      this.testDefaultStrategy,\r\n      this.testStateAccess,\r\n      this.testStrategyIntegration,\r\n      this.testSerialization,\r\n      this.testDifferentBehaviors\r\n    ];\r\n    \r\n    for (const test of tests) {\r\n      try {\r\n        console.log(`\\nRunning: ${test.name}`);\r\n        const passed = test.call(this);\r\n        console.log(`${test.name}: ${passed ? 'PASSED' : 'FAILED'}`);\r\n        allPassed = allPassed && passed;\r\n      } catch (e) {\r\n        console.error(`Test ${test.name} FAILED with error:`, e);\r\n        allPassed = false;\r\n      }\r\n    }\r\n    \r\n    console.log(`\\nFinal result: ${allPassed ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED'}`);\r\n    return allPassed;\r\n  }\r\n  \r\n  /**\r\n   * Test basic initialization\r\n   */\r\n  testInitialization(): boolean {\r\n    // Check that controller initializes properly with default strategy\r\n    const initialState = this.controller.state;\r\n    \r\n    // State should be a 4x3 array (4 approaches, 3 movements per approach)\r\n    const isValidState = initialState.length === 4 && \r\n                        initialState.every(approach => approach.length === 3);\r\n    \r\n    // Check that traffic states were initialized\r\n    const hasTrafficStates = Array.isArray(this.controller['trafficStates']) &&\r\n                            this.controller['trafficStates'].length === 4;\r\n    \r\n    return isValidState && hasTrafficStates;\r\n  }\r\n  \r\n  /**\r\n   * Test strategy switching\r\n   */\r\n  testStrategySwitch(): boolean {\r\n    // Get current strategy type\r\n    const initialStrategyType = this.controller.getStrategy().strategyType;\r\n    \r\n    // Find a different strategy to switch to\r\n    const availableTypes = trafficControlStrategyManager.getAvailableStrategyTypes();\r\n    const differentType = availableTypes.find(type => type !== initialStrategyType);\r\n    \r\n    if (!differentType) {\r\n      console.error(\"Couldn't find a different strategy to switch to\");\r\n      return false;\r\n    }\r\n    \r\n    // Switch to different strategy\r\n    const switchSuccess = this.controller.setStrategy(differentType);\r\n    if (!switchSuccess) {\r\n      console.error(`Failed to switch to strategy ${differentType}`);\r\n      return false;\r\n    }\r\n    \r\n    // Verify that strategy changed\r\n    const newStrategyType = this.controller.getStrategy().strategyType;\r\n    \r\n    return newStrategyType === differentType && newStrategyType !== initialStrategyType;\r\n  }\r\n  \r\n  /**\r\n   * Test that a default strategy is always active\r\n   */\r\n  testDefaultStrategy(): boolean {\r\n    // Create a new controller\r\n    const controller = new TrafficLightController(this.intersection);\r\n    \r\n    // Strategy should exist and have a valid type\r\n    const strategy = controller.getStrategy();\r\n    \r\n    return !!strategy && \r\n           typeof strategy.strategyType === 'string' && \r\n           strategy.strategyType.length > 0;\r\n  }\r\n  \r\n  /**\r\n   * Test state access\r\n   */\r\n  testStateAccess(): boolean {\r\n    // Get state\r\n    const state = this.controller.state;\r\n    \r\n    // State should be a 4x3 array with valid values (0 or 1)\r\n    const isValidState = state.length === 4 && \r\n                        state.every(approach => \r\n                          approach.length === 3 && \r\n                          approach.every(signal => signal === 0 || signal === 1));\r\n    \r\n    return isValidState;\r\n  }\r\n  \r\n  /**\r\n   * Test that controller correctly integrates with strategies\r\n   */\r\n  testStrategyIntegration(): boolean {\r\n    // Set fixed timing strategy\r\n    this.controller.setStrategy('fixed-timing');\r\n    \r\n    // Update a few times\r\n    for (let i = 0; i < 5; i++) {\r\n      this.controller.onTick(1.0);\r\n    }\r\n    \r\n    // Get state after updates\r\n    const state1 = this.controller.state;\r\n    \r\n    // Save phase info\r\n    const phase1 = this.controller.getStrategy().getCurrentPhase();\r\n    \r\n    // Update a lot more to trigger phase change\r\n    for (let i = 0; i < 30; i++) {\r\n      this.controller.onTick(1.0);\r\n    }\r\n    \r\n    // Get state after more updates\r\n    const state2 = this.controller.state;\r\n    \r\n    // Phase should have changed\r\n    const phase2 = this.controller.getStrategy().getCurrentPhase();\r\n    \r\n    // Either phase or state should be different\r\n    const phaseDifferent = phase1 !== phase2;\r\n    const stateDifferent = JSON.stringify(state1) !== JSON.stringify(state2);\r\n    \r\n    return phaseDifferent || stateDifferent;\r\n  }\r\n  \r\n  /**\r\n   * Test serialization and deserialization\r\n   */\r\n  testSerialization(): boolean {\r\n    // Configure with non-default strategy\r\n    this.controller.setStrategy('adaptive-timing');\r\n    \r\n    // Update a bit to establish state\r\n    for (let i = 0; i < 5; i++) {\r\n      this.controller.onTick(1.0);\r\n    }\r\n    \r\n    // Serialize\r\n    const json = this.controller.toJSON();\r\n    \r\n    // Deserialize\r\n    const newController = TrafficLightController.copy(json, this.intersection);\r\n    \r\n    // Check that the strategy type matches\r\n    const originalType = this.controller.getStrategy().strategyType;\r\n    const newType = newController.getStrategy().strategyType;\r\n    \r\n    return originalType === newType;\r\n  }\r\n  \r\n  /**\r\n   * Test that different strategies produce different behaviors\r\n   */\r\n  testDifferentBehaviors(): boolean {\r\n    const trafficStates = this.createHighTrafficStates();\r\n    \r\n    // Test with fixed timing strategy\r\n    this.controller.setStrategy('fixed-timing');\r\n    const fixedStates: number[][][] = [];\r\n    \r\n    for (let i = 0; i < 50; i++) {\r\n      this.controller.onTick(1.0);\r\n      // Only record every 10th state to reduce noise\r\n      if (i % 10 === 0) {\r\n        fixedStates.push(JSON.parse(JSON.stringify(this.controller.state)));\r\n      }\r\n    }\r\n    \r\n    // Test with adaptive timing strategy\r\n    this.controller.setStrategy('adaptive-timing');\r\n    const adaptiveStates: number[][][] = [];\r\n    \r\n    for (let i = 0; i < 50; i++) {\r\n      // Update traffic states\r\n      this.updateControllerTrafficStates(trafficStates);\r\n      this.controller.onTick(1.0);\r\n      \r\n      // Only record every 10th state to reduce noise\r\n      if (i % 10 === 0) {\r\n        adaptiveStates.push(JSON.parse(JSON.stringify(this.controller.state)));\r\n      }\r\n    }\r\n    \r\n    // Test with enforcer strategy\r\n    this.controller.setStrategy('traffic-enforcer');\r\n    const enforcerStates: number[][][] = [];\r\n    \r\n    for (let i = 0; i < 50; i++) {\r\n      // Update traffic states\r\n      this.updateControllerTrafficStates(trafficStates);\r\n      this.controller.onTick(1.0);\r\n      \r\n      // Only record every 10th state to reduce noise\r\n      if (i % 10 === 0) {\r\n        enforcerStates.push(JSON.parse(JSON.stringify(this.controller.state)));\r\n      }\r\n    }\r\n    \r\n    // Compare states between strategies\r\n    // We expect at least some differences between the strategies\r\n    let fixedVsAdaptiveDifferent = false;\r\n    let fixedVsEnforcerDifferent = false;\r\n    let adaptiveVsEnforcerDifferent = false;\r\n    \r\n    for (let i = 0; i < Math.min(fixedStates.length, adaptiveStates.length, enforcerStates.length); i++) {\r\n      if (JSON.stringify(fixedStates[i]) !== JSON.stringify(adaptiveStates[i])) {\r\n        fixedVsAdaptiveDifferent = true;\r\n      }\r\n      \r\n      if (JSON.stringify(fixedStates[i]) !== JSON.stringify(enforcerStates[i])) {\r\n        fixedVsEnforcerDifferent = true;\r\n      }\r\n      \r\n      if (JSON.stringify(adaptiveStates[i]) !== JSON.stringify(enforcerStates[i])) {\r\n        adaptiveVsEnforcerDifferent = true;\r\n      }\r\n    }\r\n    \r\n    // All strategy pairs should have at least one difference\r\n    return fixedVsAdaptiveDifferent && fixedVsEnforcerDifferent && adaptiveVsEnforcerDifferent;\r\n  }\r\n  \r\n  /**\r\n   * Helper method to create traffic states with high traffic volume\r\n   */\r\n  private createHighTrafficStates(): TrafficState[] {\r\n    // Create traffic states with high volume in North direction\r\n    return [\r\n      { queueLength: 10, averageWaitTime: 30, maxWaitTime: 50, flowRate: 5, signalState: [0, 0, 0] },\r\n      { queueLength: 2, averageWaitTime: 5, maxWaitTime: 10, flowRate: 8, signalState: [0, 0, 0] },\r\n      { queueLength: 3, averageWaitTime: 10, maxWaitTime: 15, flowRate: 7, signalState: [0, 0, 0] },\r\n      { queueLength: 1, averageWaitTime: 3, maxWaitTime: 5, flowRate: 10, signalState: [0, 0, 0] }\r\n    ];\r\n  }\r\n  \r\n  /**\r\n   * Helper method to update controller traffic states\r\n   */\r\n  private updateControllerTrafficStates(states: TrafficState[]): void {\r\n    // Update controller's traffic states directly\r\n    // This is a bit of a hack, but it's the easiest way to test strategies\r\n    if (this.controller['trafficStates']) {\r\n      for (let i = 0; i < states.length; i++) {\r\n        if (i < this.controller['trafficStates'].length) {\r\n          this.controller['trafficStates'][i].queueLength = states[i].queueLength;\r\n          this.controller['trafficStates'][i].averageWaitTime = states[i].averageWaitTime;\r\n          this.controller['trafficStates'][i].maxWaitTime = states[i].maxWaitTime;\r\n          this.controller['trafficStates'][i].flowRate = states[i].flowRate;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Export the test class\r\nexport default TrafficLightControllerTest;\r\n","interface Settings {\n  colors: {\n    background: string;\n    redLight: string;\n    greenLight: string;\n    intersection: string;\n    road: string;\n    roadMarking: string;\n    hoveredIntersection: string;\n    tempRoad: string;\n    gridPoint: string;\n    grid1: string;\n    grid2: string;\n    hoveredGrid: string;\n  };\n  fps: number;\n  lightsFlipInterval: number;\n  gridSize: number;\n  defaultTimeFactor: number;\n}\n\nconst settings: Settings = {\n  colors: {\n    background: '#97a1a1',\n    redLight: 'hsl(0, 100%, 50%)',\n    greenLight: '#85ee00',\n    intersection: '#586970',\n    road: '#586970',\n    roadMarking: '#bbb',\n    hoveredIntersection: '#3d4c53',\n    tempRoad: '#aaa',\n    gridPoint: '#586970',\n    grid1: 'rgba(255, 255, 255, 0.5)',\n    grid2: 'rgba(220, 220, 220, 0.5)',\n    hoveredGrid: '#f4e8e1'\n  },\n  fps: 30,\n  lightsFlipInterval: 160,\n  gridSize: 14,\n  defaultTimeFactor: 5\n};\n\nexport = settings;\n","/**\r\n * Manual test script for traffic control strategies\r\n * Run this in the browser console to test the refactored traffic control system\r\n */\r\n\r\n// Import the test runner\r\nimport { testRunner } from './model/traffic-control/tests/TestRunner';\r\n\r\n// Run all tests\r\nfunction runTests() {\r\n  console.log(\"Starting traffic control tests...\");\r\n  testRunner.runAllTests();\r\n}\r\n\r\n// Export for browser access\r\n(window as any).runTrafficTests = runTests;\r\n\r\n// Log instructions\r\nconsole.log(\"Run traffic control tests by calling runTrafficTests() in the browser console\");\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__(__webpack_require__.s = \"./src/test-runner.ts\");\n",""],"names":[],"sourceRoot":""}